
stula.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005658  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080057f8  080057f8  000157f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058b4  080058b4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080058b4  080058b4  000158b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058bc  080058bc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058bc  080058bc  000158bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058c0  080058c0  000158c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080058c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001918  20000078  0800593c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001990  0800593c  00021990  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f868  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000209b  00000000  00000000  0002f910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  000319b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  000327d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183f3  00000000  00000000  00033538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f749  00000000  00000000  0004b92b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b700  00000000  00000000  0005b074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6774  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004490  00000000  00000000  000f67c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080057e0 	.word	0x080057e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080057e0 	.word	0x080057e0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a70:	f000 b974 	b.w	8000d5c <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468e      	mov	lr, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14d      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4694      	mov	ip, r2
 8000a9e:	d969      	bls.n	8000b74 <__udivmoddi4+0xe8>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b152      	cbz	r2, 8000abc <__udivmoddi4+0x30>
 8000aa6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aaa:	f1c2 0120 	rsb	r1, r2, #32
 8000aae:	fa20 f101 	lsr.w	r1, r0, r1
 8000ab2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aba:	4094      	lsls	r4, r2
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	0c21      	lsrs	r1, r4, #16
 8000ac2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ac6:	fa1f f78c 	uxth.w	r7, ip
 8000aca:	fb08 e316 	mls	r3, r8, r6, lr
 8000ace:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ad2:	fb06 f107 	mul.w	r1, r6, r7
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ae2:	f080 811f 	bcs.w	8000d24 <__udivmoddi4+0x298>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 811c 	bls.w	8000d24 <__udivmoddi4+0x298>
 8000aec:	3e02      	subs	r6, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af8:	fb08 3310 	mls	r3, r8, r0, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb00 f707 	mul.w	r7, r0, r7
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x92>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b10:	f080 810a 	bcs.w	8000d28 <__udivmoddi4+0x29c>
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	f240 8107 	bls.w	8000d28 <__udivmoddi4+0x29c>
 8000b1a:	4464      	add	r4, ip
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	1be4      	subs	r4, r4, r7
 8000b24:	2600      	movs	r6, #0
 8000b26:	b11d      	cbz	r5, 8000b30 <__udivmoddi4+0xa4>
 8000b28:	40d4      	lsrs	r4, r2
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d909      	bls.n	8000b4e <__udivmoddi4+0xc2>
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	f000 80ef 	beq.w	8000d1e <__udivmoddi4+0x292>
 8000b40:	2600      	movs	r6, #0
 8000b42:	e9c5 0100 	strd	r0, r1, [r5]
 8000b46:	4630      	mov	r0, r6
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	fab3 f683 	clz	r6, r3
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d14a      	bne.n	8000bec <__udivmoddi4+0x160>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xd4>
 8000b5a:	4282      	cmp	r2, r0
 8000b5c:	f200 80f9 	bhi.w	8000d52 <__udivmoddi4+0x2c6>
 8000b60:	1a84      	subs	r4, r0, r2
 8000b62:	eb61 0303 	sbc.w	r3, r1, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	469e      	mov	lr, r3
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d0e0      	beq.n	8000b30 <__udivmoddi4+0xa4>
 8000b6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b72:	e7dd      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000b74:	b902      	cbnz	r2, 8000b78 <__udivmoddi4+0xec>
 8000b76:	deff      	udf	#255	; 0xff
 8000b78:	fab2 f282 	clz	r2, r2
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	f040 8092 	bne.w	8000ca6 <__udivmoddi4+0x21a>
 8000b82:	eba1 010c 	sub.w	r1, r1, ip
 8000b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8a:	fa1f fe8c 	uxth.w	lr, ip
 8000b8e:	2601      	movs	r6, #1
 8000b90:	0c20      	lsrs	r0, r4, #16
 8000b92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b96:	fb07 1113 	mls	r1, r7, r3, r1
 8000b9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b9e:	fb0e f003 	mul.w	r0, lr, r3
 8000ba2:	4288      	cmp	r0, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x12c>
 8000ba6:	eb1c 0101 	adds.w	r1, ip, r1
 8000baa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x12a>
 8000bb0:	4288      	cmp	r0, r1
 8000bb2:	f200 80cb 	bhi.w	8000d4c <__udivmoddi4+0x2c0>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	1a09      	subs	r1, r1, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bcc:	45a6      	cmp	lr, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x156>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x154>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f200 80bb 	bhi.w	8000d56 <__udivmoddi4+0x2ca>
 8000be0:	4608      	mov	r0, r1
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bea:	e79c      	b.n	8000b26 <__udivmoddi4+0x9a>
 8000bec:	f1c6 0720 	rsb	r7, r6, #32
 8000bf0:	40b3      	lsls	r3, r6
 8000bf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000c02:	431c      	orrs	r4, r3
 8000c04:	40f9      	lsrs	r1, r7
 8000c06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c12:	0c20      	lsrs	r0, r4, #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fb09 1118 	mls	r1, r9, r8, r1
 8000c1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c20:	fb08 f00e 	mul.w	r0, r8, lr
 8000c24:	4288      	cmp	r0, r1
 8000c26:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b8>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c34:	f080 8088 	bcs.w	8000d48 <__udivmoddi4+0x2bc>
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	f240 8085 	bls.w	8000d48 <__udivmoddi4+0x2bc>
 8000c3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1a09      	subs	r1, r1, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c58:	458e      	cmp	lr, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1e2>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000c64:	d26c      	bcs.n	8000d40 <__udivmoddi4+0x2b4>
 8000c66:	458e      	cmp	lr, r1
 8000c68:	d96a      	bls.n	8000d40 <__udivmoddi4+0x2b4>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c72:	fba0 9402 	umull	r9, r4, r0, r2
 8000c76:	eba1 010e 	sub.w	r1, r1, lr
 8000c7a:	42a1      	cmp	r1, r4
 8000c7c:	46c8      	mov	r8, r9
 8000c7e:	46a6      	mov	lr, r4
 8000c80:	d356      	bcc.n	8000d30 <__udivmoddi4+0x2a4>
 8000c82:	d053      	beq.n	8000d2c <__udivmoddi4+0x2a0>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x212>
 8000c86:	ebb3 0208 	subs.w	r2, r3, r8
 8000c8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c92:	fa22 f306 	lsr.w	r3, r2, r6
 8000c96:	40f1      	lsrs	r1, r6
 8000c98:	431f      	orrs	r7, r3
 8000c9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	40d8      	lsrs	r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	4301      	orrs	r1, r0
 8000cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cc4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc8:	0c0b      	lsrs	r3, r1, #16
 8000cca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cce:	fb00 f60e 	mul.w	r6, r0, lr
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x260>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ce2:	d22f      	bcs.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce4:	429e      	cmp	r6, r3
 8000ce6:	d92d      	bls.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	b289      	uxth	r1, r1
 8000cf0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cf4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfc:	fb06 f30e 	mul.w	r3, r6, lr
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x28a>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d0c:	d216      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d914      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000d12:	3e02      	subs	r6, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	1ac9      	subs	r1, r1, r3
 8000d18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d1c:	e738      	b.n	8000b90 <__udivmoddi4+0x104>
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e705      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e3      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6f8      	b.n	8000b1e <__udivmoddi4+0x92>
 8000d2c:	454b      	cmp	r3, r9
 8000d2e:	d2a9      	bcs.n	8000c84 <__udivmoddi4+0x1f8>
 8000d30:	ebb9 0802 	subs.w	r8, r9, r2
 8000d34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7a3      	b.n	8000c84 <__udivmoddi4+0x1f8>
 8000d3c:	4646      	mov	r6, r8
 8000d3e:	e7ea      	b.n	8000d16 <__udivmoddi4+0x28a>
 8000d40:	4620      	mov	r0, r4
 8000d42:	e794      	b.n	8000c6e <__udivmoddi4+0x1e2>
 8000d44:	4640      	mov	r0, r8
 8000d46:	e7d1      	b.n	8000cec <__udivmoddi4+0x260>
 8000d48:	46d0      	mov	r8, sl
 8000d4a:	e77b      	b.n	8000c44 <__udivmoddi4+0x1b8>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	4461      	add	r1, ip
 8000d50:	e732      	b.n	8000bb8 <__udivmoddi4+0x12c>
 8000d52:	4630      	mov	r0, r6
 8000d54:	e709      	b.n	8000b6a <__udivmoddi4+0xde>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	e742      	b.n	8000be2 <__udivmoddi4+0x156>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <set_number>:
uint32_t max_idx = -1;

bool IS_FULL = false;
bool READ_DATA = false;

void set_number(){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	switch(DisplayCOM){
 8000d64:	4bca      	ldr	r3, [pc, #808]	; (8001090 <set_number+0x330>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b03      	cmp	r3, #3
 8000d6a:	d87b      	bhi.n	8000e64 <set_number+0x104>
 8000d6c:	a201      	add	r2, pc, #4	; (adr r2, 8000d74 <set_number+0x14>)
 8000d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d72:	bf00      	nop
 8000d74:	08000d85 	.word	0x08000d85
 8000d78:	08000dbd 	.word	0x08000dbd
 8000d7c:	08000df5 	.word	0x08000df5
 8000d80:	08000e2d 	.word	0x08000e2d
	case 0:
		HAL_GPIO_WritePin(GPIOC, COM1_Pin, GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d8a:	48c2      	ldr	r0, [pc, #776]	; (8001094 <set_number+0x334>)
 8000d8c:	f002 f83c 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, COM2_Pin, GPIO_PIN_SET);
 8000d90:	2201      	movs	r2, #1
 8000d92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d96:	48bf      	ldr	r0, [pc, #764]	; (8001094 <set_number+0x334>)
 8000d98:	f002 f836 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, COM3_Pin, GPIO_PIN_SET);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000da2:	48bc      	ldr	r0, [pc, #752]	; (8001094 <set_number+0x334>)
 8000da4:	f002 f830 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, COM4_Pin, GPIO_PIN_SET);
 8000da8:	2201      	movs	r2, #1
 8000daa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dae:	48b9      	ldr	r0, [pc, #740]	; (8001094 <set_number+0x334>)
 8000db0:	f002 f82a 	bl	8002e08 <HAL_GPIO_WritePin>
		DisplayCOM = 1;
 8000db4:	4bb6      	ldr	r3, [pc, #728]	; (8001090 <set_number+0x330>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
		break;
 8000dba:	e053      	b.n	8000e64 <set_number+0x104>
	case 1:
		HAL_GPIO_WritePin(GPIOC, COM1_Pin, GPIO_PIN_SET);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dc2:	48b4      	ldr	r0, [pc, #720]	; (8001094 <set_number+0x334>)
 8000dc4:	f002 f820 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, COM2_Pin, GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dce:	48b1      	ldr	r0, [pc, #708]	; (8001094 <set_number+0x334>)
 8000dd0:	f002 f81a 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, COM3_Pin, GPIO_PIN_SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dda:	48ae      	ldr	r0, [pc, #696]	; (8001094 <set_number+0x334>)
 8000ddc:	f002 f814 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, COM4_Pin, GPIO_PIN_SET);
 8000de0:	2201      	movs	r2, #1
 8000de2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000de6:	48ab      	ldr	r0, [pc, #684]	; (8001094 <set_number+0x334>)
 8000de8:	f002 f80e 	bl	8002e08 <HAL_GPIO_WritePin>
		DisplayCOM = 2;
 8000dec:	4ba8      	ldr	r3, [pc, #672]	; (8001090 <set_number+0x330>)
 8000dee:	2202      	movs	r2, #2
 8000df0:	701a      	strb	r2, [r3, #0]
		break;
 8000df2:	e037      	b.n	8000e64 <set_number+0x104>
	case 2:
		HAL_GPIO_WritePin(GPIOC, COM1_Pin, GPIO_PIN_SET);
 8000df4:	2201      	movs	r2, #1
 8000df6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dfa:	48a6      	ldr	r0, [pc, #664]	; (8001094 <set_number+0x334>)
 8000dfc:	f002 f804 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, COM2_Pin, GPIO_PIN_SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e06:	48a3      	ldr	r0, [pc, #652]	; (8001094 <set_number+0x334>)
 8000e08:	f001 fffe 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, COM3_Pin, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e12:	48a0      	ldr	r0, [pc, #640]	; (8001094 <set_number+0x334>)
 8000e14:	f001 fff8 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, COM4_Pin, GPIO_PIN_SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e1e:	489d      	ldr	r0, [pc, #628]	; (8001094 <set_number+0x334>)
 8000e20:	f001 fff2 	bl	8002e08 <HAL_GPIO_WritePin>
		DisplayCOM = 3;
 8000e24:	4b9a      	ldr	r3, [pc, #616]	; (8001090 <set_number+0x330>)
 8000e26:	2203      	movs	r2, #3
 8000e28:	701a      	strb	r2, [r3, #0]
		break;
 8000e2a:	e01b      	b.n	8000e64 <set_number+0x104>
	case 3:
		HAL_GPIO_WritePin(GPIOC, COM1_Pin, GPIO_PIN_SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e32:	4898      	ldr	r0, [pc, #608]	; (8001094 <set_number+0x334>)
 8000e34:	f001 ffe8 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, COM2_Pin, GPIO_PIN_SET);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e3e:	4895      	ldr	r0, [pc, #596]	; (8001094 <set_number+0x334>)
 8000e40:	f001 ffe2 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, COM3_Pin, GPIO_PIN_SET);
 8000e44:	2201      	movs	r2, #1
 8000e46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e4a:	4892      	ldr	r0, [pc, #584]	; (8001094 <set_number+0x334>)
 8000e4c:	f001 ffdc 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, COM4_Pin, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e56:	488f      	ldr	r0, [pc, #572]	; (8001094 <set_number+0x334>)
 8000e58:	f001 ffd6 	bl	8002e08 <HAL_GPIO_WritePin>
		DisplayCOM = 0;
 8000e5c:	4b8c      	ldr	r3, [pc, #560]	; (8001090 <set_number+0x330>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
		break;
 8000e62:	bf00      	nop
	}

	switch(DisplayNumbers[DisplayCOM]){
 8000e64:	4b8a      	ldr	r3, [pc, #552]	; (8001090 <set_number+0x330>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b8b      	ldr	r3, [pc, #556]	; (8001098 <set_number+0x338>)
 8000e6c:	5c9b      	ldrb	r3, [r3, r2]
 8000e6e:	2b09      	cmp	r3, #9
 8000e70:	f200 81b8 	bhi.w	80011e4 <set_number+0x484>
 8000e74:	a201      	add	r2, pc, #4	; (adr r2, 8000e7c <set_number+0x11c>)
 8000e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7a:	bf00      	nop
 8000e7c:	08000ea5 	.word	0x08000ea5
 8000e80:	08000ef7 	.word	0x08000ef7
 8000e84:	08000f49 	.word	0x08000f49
 8000e88:	08000f9b 	.word	0x08000f9b
 8000e8c:	08000fed 	.word	0x08000fed
 8000e90:	0800103f 	.word	0x0800103f
 8000e94:	0800109d 	.word	0x0800109d
 8000e98:	080010ef 	.word	0x080010ef
 8000e9c:	08001141 	.word	0x08001141
 8000ea0:	08001193 	.word	0x08001193
	case 0:
		HAL_GPIO_WritePin(GPIOC, segA_Pin, GPIO_PIN_SET);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	2140      	movs	r1, #64	; 0x40
 8000ea8:	487a      	ldr	r0, [pc, #488]	; (8001094 <set_number+0x334>)
 8000eaa:	f001 ffad 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segB_Pin, GPIO_PIN_SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2110      	movs	r1, #16
 8000eb2:	4878      	ldr	r0, [pc, #480]	; (8001094 <set_number+0x334>)
 8000eb4:	f001 ffa8 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segC_Pin, GPIO_PIN_SET);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2108      	movs	r1, #8
 8000ebc:	4875      	ldr	r0, [pc, #468]	; (8001094 <set_number+0x334>)
 8000ebe:	f001 ffa3 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segD_Pin, GPIO_PIN_SET);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	4873      	ldr	r0, [pc, #460]	; (8001094 <set_number+0x334>)
 8000ec8:	f001 ff9e 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segE_Pin, GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2104      	movs	r1, #4
 8000ed0:	4870      	ldr	r0, [pc, #448]	; (8001094 <set_number+0x334>)
 8000ed2:	f001 ff99 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segF_Pin, GPIO_PIN_SET);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	2120      	movs	r1, #32
 8000eda:	486e      	ldr	r0, [pc, #440]	; (8001094 <set_number+0x334>)
 8000edc:	f001 ff94 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segG_Pin, GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	486b      	ldr	r0, [pc, #428]	; (8001094 <set_number+0x334>)
 8000ee6:	f001 ff8f 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segDP_Pin, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2180      	movs	r1, #128	; 0x80
 8000eee:	4869      	ldr	r0, [pc, #420]	; (8001094 <set_number+0x334>)
 8000ef0:	f001 ff8a 	bl	8002e08 <HAL_GPIO_WritePin>
		break;
 8000ef4:	e19f      	b.n	8001236 <set_number+0x4d6>
	case 1:
		HAL_GPIO_WritePin(GPIOC, segA_Pin, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2140      	movs	r1, #64	; 0x40
 8000efa:	4866      	ldr	r0, [pc, #408]	; (8001094 <set_number+0x334>)
 8000efc:	f001 ff84 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segB_Pin, GPIO_PIN_SET);
 8000f00:	2201      	movs	r2, #1
 8000f02:	2110      	movs	r1, #16
 8000f04:	4863      	ldr	r0, [pc, #396]	; (8001094 <set_number+0x334>)
 8000f06:	f001 ff7f 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segC_Pin, GPIO_PIN_SET);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	2108      	movs	r1, #8
 8000f0e:	4861      	ldr	r0, [pc, #388]	; (8001094 <set_number+0x334>)
 8000f10:	f001 ff7a 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segD_Pin, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2102      	movs	r1, #2
 8000f18:	485e      	ldr	r0, [pc, #376]	; (8001094 <set_number+0x334>)
 8000f1a:	f001 ff75 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segE_Pin, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2104      	movs	r1, #4
 8000f22:	485c      	ldr	r0, [pc, #368]	; (8001094 <set_number+0x334>)
 8000f24:	f001 ff70 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segF_Pin, GPIO_PIN_RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2120      	movs	r1, #32
 8000f2c:	4859      	ldr	r0, [pc, #356]	; (8001094 <set_number+0x334>)
 8000f2e:	f001 ff6b 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segG_Pin, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2101      	movs	r1, #1
 8000f36:	4857      	ldr	r0, [pc, #348]	; (8001094 <set_number+0x334>)
 8000f38:	f001 ff66 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segDP_Pin, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2180      	movs	r1, #128	; 0x80
 8000f40:	4854      	ldr	r0, [pc, #336]	; (8001094 <set_number+0x334>)
 8000f42:	f001 ff61 	bl	8002e08 <HAL_GPIO_WritePin>
		break;
 8000f46:	e176      	b.n	8001236 <set_number+0x4d6>
	case 2:
		HAL_GPIO_WritePin(GPIOC, segA_Pin, GPIO_PIN_SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2140      	movs	r1, #64	; 0x40
 8000f4c:	4851      	ldr	r0, [pc, #324]	; (8001094 <set_number+0x334>)
 8000f4e:	f001 ff5b 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segB_Pin, GPIO_PIN_SET);
 8000f52:	2201      	movs	r2, #1
 8000f54:	2110      	movs	r1, #16
 8000f56:	484f      	ldr	r0, [pc, #316]	; (8001094 <set_number+0x334>)
 8000f58:	f001 ff56 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segC_Pin, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2108      	movs	r1, #8
 8000f60:	484c      	ldr	r0, [pc, #304]	; (8001094 <set_number+0x334>)
 8000f62:	f001 ff51 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segD_Pin, GPIO_PIN_SET);
 8000f66:	2201      	movs	r2, #1
 8000f68:	2102      	movs	r1, #2
 8000f6a:	484a      	ldr	r0, [pc, #296]	; (8001094 <set_number+0x334>)
 8000f6c:	f001 ff4c 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segE_Pin, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2104      	movs	r1, #4
 8000f74:	4847      	ldr	r0, [pc, #284]	; (8001094 <set_number+0x334>)
 8000f76:	f001 ff47 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segF_Pin, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2120      	movs	r1, #32
 8000f7e:	4845      	ldr	r0, [pc, #276]	; (8001094 <set_number+0x334>)
 8000f80:	f001 ff42 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segG_Pin, GPIO_PIN_SET);
 8000f84:	2201      	movs	r2, #1
 8000f86:	2101      	movs	r1, #1
 8000f88:	4842      	ldr	r0, [pc, #264]	; (8001094 <set_number+0x334>)
 8000f8a:	f001 ff3d 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segDP_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2180      	movs	r1, #128	; 0x80
 8000f92:	4840      	ldr	r0, [pc, #256]	; (8001094 <set_number+0x334>)
 8000f94:	f001 ff38 	bl	8002e08 <HAL_GPIO_WritePin>
		break;
 8000f98:	e14d      	b.n	8001236 <set_number+0x4d6>
	case 3:
		HAL_GPIO_WritePin(GPIOC, segA_Pin, GPIO_PIN_SET);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2140      	movs	r1, #64	; 0x40
 8000f9e:	483d      	ldr	r0, [pc, #244]	; (8001094 <set_number+0x334>)
 8000fa0:	f001 ff32 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segB_Pin, GPIO_PIN_SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	2110      	movs	r1, #16
 8000fa8:	483a      	ldr	r0, [pc, #232]	; (8001094 <set_number+0x334>)
 8000faa:	f001 ff2d 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segC_Pin, GPIO_PIN_SET);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2108      	movs	r1, #8
 8000fb2:	4838      	ldr	r0, [pc, #224]	; (8001094 <set_number+0x334>)
 8000fb4:	f001 ff28 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segD_Pin, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2102      	movs	r1, #2
 8000fbc:	4835      	ldr	r0, [pc, #212]	; (8001094 <set_number+0x334>)
 8000fbe:	f001 ff23 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segE_Pin, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2104      	movs	r1, #4
 8000fc6:	4833      	ldr	r0, [pc, #204]	; (8001094 <set_number+0x334>)
 8000fc8:	f001 ff1e 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segF_Pin, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2120      	movs	r1, #32
 8000fd0:	4830      	ldr	r0, [pc, #192]	; (8001094 <set_number+0x334>)
 8000fd2:	f001 ff19 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segG_Pin, GPIO_PIN_SET);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	2101      	movs	r1, #1
 8000fda:	482e      	ldr	r0, [pc, #184]	; (8001094 <set_number+0x334>)
 8000fdc:	f001 ff14 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segDP_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2180      	movs	r1, #128	; 0x80
 8000fe4:	482b      	ldr	r0, [pc, #172]	; (8001094 <set_number+0x334>)
 8000fe6:	f001 ff0f 	bl	8002e08 <HAL_GPIO_WritePin>
		break;
 8000fea:	e124      	b.n	8001236 <set_number+0x4d6>
	case 4:
		HAL_GPIO_WritePin(GPIOC, segA_Pin, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2140      	movs	r1, #64	; 0x40
 8000ff0:	4828      	ldr	r0, [pc, #160]	; (8001094 <set_number+0x334>)
 8000ff2:	f001 ff09 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segB_Pin, GPIO_PIN_SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2110      	movs	r1, #16
 8000ffa:	4826      	ldr	r0, [pc, #152]	; (8001094 <set_number+0x334>)
 8000ffc:	f001 ff04 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segC_Pin, GPIO_PIN_SET);
 8001000:	2201      	movs	r2, #1
 8001002:	2108      	movs	r1, #8
 8001004:	4823      	ldr	r0, [pc, #140]	; (8001094 <set_number+0x334>)
 8001006:	f001 feff 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segD_Pin, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	2102      	movs	r1, #2
 800100e:	4821      	ldr	r0, [pc, #132]	; (8001094 <set_number+0x334>)
 8001010:	f001 fefa 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segE_Pin, GPIO_PIN_RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	2104      	movs	r1, #4
 8001018:	481e      	ldr	r0, [pc, #120]	; (8001094 <set_number+0x334>)
 800101a:	f001 fef5 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segF_Pin, GPIO_PIN_SET);
 800101e:	2201      	movs	r2, #1
 8001020:	2120      	movs	r1, #32
 8001022:	481c      	ldr	r0, [pc, #112]	; (8001094 <set_number+0x334>)
 8001024:	f001 fef0 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segG_Pin, GPIO_PIN_SET);
 8001028:	2201      	movs	r2, #1
 800102a:	2101      	movs	r1, #1
 800102c:	4819      	ldr	r0, [pc, #100]	; (8001094 <set_number+0x334>)
 800102e:	f001 feeb 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segDP_Pin, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	2180      	movs	r1, #128	; 0x80
 8001036:	4817      	ldr	r0, [pc, #92]	; (8001094 <set_number+0x334>)
 8001038:	f001 fee6 	bl	8002e08 <HAL_GPIO_WritePin>
		break;
 800103c:	e0fb      	b.n	8001236 <set_number+0x4d6>
	case 5:
		HAL_GPIO_WritePin(GPIOC, segA_Pin, GPIO_PIN_SET);
 800103e:	2201      	movs	r2, #1
 8001040:	2140      	movs	r1, #64	; 0x40
 8001042:	4814      	ldr	r0, [pc, #80]	; (8001094 <set_number+0x334>)
 8001044:	f001 fee0 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segB_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	2110      	movs	r1, #16
 800104c:	4811      	ldr	r0, [pc, #68]	; (8001094 <set_number+0x334>)
 800104e:	f001 fedb 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segC_Pin, GPIO_PIN_SET);
 8001052:	2201      	movs	r2, #1
 8001054:	2108      	movs	r1, #8
 8001056:	480f      	ldr	r0, [pc, #60]	; (8001094 <set_number+0x334>)
 8001058:	f001 fed6 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segD_Pin, GPIO_PIN_SET);
 800105c:	2201      	movs	r2, #1
 800105e:	2102      	movs	r1, #2
 8001060:	480c      	ldr	r0, [pc, #48]	; (8001094 <set_number+0x334>)
 8001062:	f001 fed1 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segE_Pin, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	2104      	movs	r1, #4
 800106a:	480a      	ldr	r0, [pc, #40]	; (8001094 <set_number+0x334>)
 800106c:	f001 fecc 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segF_Pin, GPIO_PIN_SET);
 8001070:	2201      	movs	r2, #1
 8001072:	2120      	movs	r1, #32
 8001074:	4807      	ldr	r0, [pc, #28]	; (8001094 <set_number+0x334>)
 8001076:	f001 fec7 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segG_Pin, GPIO_PIN_SET);
 800107a:	2201      	movs	r2, #1
 800107c:	2101      	movs	r1, #1
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <set_number+0x334>)
 8001080:	f001 fec2 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segDP_Pin, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	2180      	movs	r1, #128	; 0x80
 8001088:	4802      	ldr	r0, [pc, #8]	; (8001094 <set_number+0x334>)
 800108a:	f001 febd 	bl	8002e08 <HAL_GPIO_WritePin>
		break;
 800108e:	e0d2      	b.n	8001236 <set_number+0x4d6>
 8001090:	200001fc 	.word	0x200001fc
 8001094:	40020800 	.word	0x40020800
 8001098:	20000000 	.word	0x20000000
	case 6:
		HAL_GPIO_WritePin(GPIOC, segA_Pin, GPIO_PIN_SET);
 800109c:	2201      	movs	r2, #1
 800109e:	2140      	movs	r1, #64	; 0x40
 80010a0:	4866      	ldr	r0, [pc, #408]	; (800123c <set_number+0x4dc>)
 80010a2:	f001 feb1 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segB_Pin, GPIO_PIN_RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2110      	movs	r1, #16
 80010aa:	4864      	ldr	r0, [pc, #400]	; (800123c <set_number+0x4dc>)
 80010ac:	f001 feac 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segC_Pin, GPIO_PIN_SET);
 80010b0:	2201      	movs	r2, #1
 80010b2:	2108      	movs	r1, #8
 80010b4:	4861      	ldr	r0, [pc, #388]	; (800123c <set_number+0x4dc>)
 80010b6:	f001 fea7 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segD_Pin, GPIO_PIN_SET);
 80010ba:	2201      	movs	r2, #1
 80010bc:	2102      	movs	r1, #2
 80010be:	485f      	ldr	r0, [pc, #380]	; (800123c <set_number+0x4dc>)
 80010c0:	f001 fea2 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segE_Pin, GPIO_PIN_SET);
 80010c4:	2201      	movs	r2, #1
 80010c6:	2104      	movs	r1, #4
 80010c8:	485c      	ldr	r0, [pc, #368]	; (800123c <set_number+0x4dc>)
 80010ca:	f001 fe9d 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segF_Pin, GPIO_PIN_SET);
 80010ce:	2201      	movs	r2, #1
 80010d0:	2120      	movs	r1, #32
 80010d2:	485a      	ldr	r0, [pc, #360]	; (800123c <set_number+0x4dc>)
 80010d4:	f001 fe98 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segG_Pin, GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	2101      	movs	r1, #1
 80010dc:	4857      	ldr	r0, [pc, #348]	; (800123c <set_number+0x4dc>)
 80010de:	f001 fe93 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segDP_Pin, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2180      	movs	r1, #128	; 0x80
 80010e6:	4855      	ldr	r0, [pc, #340]	; (800123c <set_number+0x4dc>)
 80010e8:	f001 fe8e 	bl	8002e08 <HAL_GPIO_WritePin>
		break;
 80010ec:	e0a3      	b.n	8001236 <set_number+0x4d6>
	case 7:
		HAL_GPIO_WritePin(GPIOC, segA_Pin, GPIO_PIN_SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	2140      	movs	r1, #64	; 0x40
 80010f2:	4852      	ldr	r0, [pc, #328]	; (800123c <set_number+0x4dc>)
 80010f4:	f001 fe88 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segB_Pin, GPIO_PIN_SET);
 80010f8:	2201      	movs	r2, #1
 80010fa:	2110      	movs	r1, #16
 80010fc:	484f      	ldr	r0, [pc, #316]	; (800123c <set_number+0x4dc>)
 80010fe:	f001 fe83 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segC_Pin, GPIO_PIN_SET);
 8001102:	2201      	movs	r2, #1
 8001104:	2108      	movs	r1, #8
 8001106:	484d      	ldr	r0, [pc, #308]	; (800123c <set_number+0x4dc>)
 8001108:	f001 fe7e 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segD_Pin, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	2102      	movs	r1, #2
 8001110:	484a      	ldr	r0, [pc, #296]	; (800123c <set_number+0x4dc>)
 8001112:	f001 fe79 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segE_Pin, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	2104      	movs	r1, #4
 800111a:	4848      	ldr	r0, [pc, #288]	; (800123c <set_number+0x4dc>)
 800111c:	f001 fe74 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segF_Pin, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	2120      	movs	r1, #32
 8001124:	4845      	ldr	r0, [pc, #276]	; (800123c <set_number+0x4dc>)
 8001126:	f001 fe6f 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segG_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	2101      	movs	r1, #1
 800112e:	4843      	ldr	r0, [pc, #268]	; (800123c <set_number+0x4dc>)
 8001130:	f001 fe6a 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segDP_Pin, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	2180      	movs	r1, #128	; 0x80
 8001138:	4840      	ldr	r0, [pc, #256]	; (800123c <set_number+0x4dc>)
 800113a:	f001 fe65 	bl	8002e08 <HAL_GPIO_WritePin>
		break;
 800113e:	e07a      	b.n	8001236 <set_number+0x4d6>
	case 8:
		HAL_GPIO_WritePin(GPIOC, segA_Pin, GPIO_PIN_SET);
 8001140:	2201      	movs	r2, #1
 8001142:	2140      	movs	r1, #64	; 0x40
 8001144:	483d      	ldr	r0, [pc, #244]	; (800123c <set_number+0x4dc>)
 8001146:	f001 fe5f 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segB_Pin, GPIO_PIN_SET);
 800114a:	2201      	movs	r2, #1
 800114c:	2110      	movs	r1, #16
 800114e:	483b      	ldr	r0, [pc, #236]	; (800123c <set_number+0x4dc>)
 8001150:	f001 fe5a 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segC_Pin, GPIO_PIN_SET);
 8001154:	2201      	movs	r2, #1
 8001156:	2108      	movs	r1, #8
 8001158:	4838      	ldr	r0, [pc, #224]	; (800123c <set_number+0x4dc>)
 800115a:	f001 fe55 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segD_Pin, GPIO_PIN_SET);
 800115e:	2201      	movs	r2, #1
 8001160:	2102      	movs	r1, #2
 8001162:	4836      	ldr	r0, [pc, #216]	; (800123c <set_number+0x4dc>)
 8001164:	f001 fe50 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segE_Pin, GPIO_PIN_SET);
 8001168:	2201      	movs	r2, #1
 800116a:	2104      	movs	r1, #4
 800116c:	4833      	ldr	r0, [pc, #204]	; (800123c <set_number+0x4dc>)
 800116e:	f001 fe4b 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segF_Pin, GPIO_PIN_SET);
 8001172:	2201      	movs	r2, #1
 8001174:	2120      	movs	r1, #32
 8001176:	4831      	ldr	r0, [pc, #196]	; (800123c <set_number+0x4dc>)
 8001178:	f001 fe46 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segG_Pin, GPIO_PIN_SET);
 800117c:	2201      	movs	r2, #1
 800117e:	2101      	movs	r1, #1
 8001180:	482e      	ldr	r0, [pc, #184]	; (800123c <set_number+0x4dc>)
 8001182:	f001 fe41 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segDP_Pin, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	2180      	movs	r1, #128	; 0x80
 800118a:	482c      	ldr	r0, [pc, #176]	; (800123c <set_number+0x4dc>)
 800118c:	f001 fe3c 	bl	8002e08 <HAL_GPIO_WritePin>
		break;
 8001190:	e051      	b.n	8001236 <set_number+0x4d6>
	case 9:
		HAL_GPIO_WritePin(GPIOC, segA_Pin, GPIO_PIN_SET);
 8001192:	2201      	movs	r2, #1
 8001194:	2140      	movs	r1, #64	; 0x40
 8001196:	4829      	ldr	r0, [pc, #164]	; (800123c <set_number+0x4dc>)
 8001198:	f001 fe36 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segB_Pin, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	2110      	movs	r1, #16
 80011a0:	4826      	ldr	r0, [pc, #152]	; (800123c <set_number+0x4dc>)
 80011a2:	f001 fe31 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segC_Pin, GPIO_PIN_SET);
 80011a6:	2201      	movs	r2, #1
 80011a8:	2108      	movs	r1, #8
 80011aa:	4824      	ldr	r0, [pc, #144]	; (800123c <set_number+0x4dc>)
 80011ac:	f001 fe2c 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segD_Pin, GPIO_PIN_SET);
 80011b0:	2201      	movs	r2, #1
 80011b2:	2102      	movs	r1, #2
 80011b4:	4821      	ldr	r0, [pc, #132]	; (800123c <set_number+0x4dc>)
 80011b6:	f001 fe27 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segE_Pin, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2104      	movs	r1, #4
 80011be:	481f      	ldr	r0, [pc, #124]	; (800123c <set_number+0x4dc>)
 80011c0:	f001 fe22 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segF_Pin, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	2120      	movs	r1, #32
 80011c8:	481c      	ldr	r0, [pc, #112]	; (800123c <set_number+0x4dc>)
 80011ca:	f001 fe1d 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segG_Pin, GPIO_PIN_SET);
 80011ce:	2201      	movs	r2, #1
 80011d0:	2101      	movs	r1, #1
 80011d2:	481a      	ldr	r0, [pc, #104]	; (800123c <set_number+0x4dc>)
 80011d4:	f001 fe18 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segDP_Pin, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	2180      	movs	r1, #128	; 0x80
 80011dc:	4817      	ldr	r0, [pc, #92]	; (800123c <set_number+0x4dc>)
 80011de:	f001 fe13 	bl	8002e08 <HAL_GPIO_WritePin>
		break;
 80011e2:	e028      	b.n	8001236 <set_number+0x4d6>
	default:
		HAL_GPIO_WritePin(GPIOC, segA_Pin, GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2140      	movs	r1, #64	; 0x40
 80011e8:	4814      	ldr	r0, [pc, #80]	; (800123c <set_number+0x4dc>)
 80011ea:	f001 fe0d 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segB_Pin, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2110      	movs	r1, #16
 80011f2:	4812      	ldr	r0, [pc, #72]	; (800123c <set_number+0x4dc>)
 80011f4:	f001 fe08 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segC_Pin, GPIO_PIN_RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2108      	movs	r1, #8
 80011fc:	480f      	ldr	r0, [pc, #60]	; (800123c <set_number+0x4dc>)
 80011fe:	f001 fe03 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segD_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	2102      	movs	r1, #2
 8001206:	480d      	ldr	r0, [pc, #52]	; (800123c <set_number+0x4dc>)
 8001208:	f001 fdfe 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segE_Pin, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	2104      	movs	r1, #4
 8001210:	480a      	ldr	r0, [pc, #40]	; (800123c <set_number+0x4dc>)
 8001212:	f001 fdf9 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segF_Pin, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2120      	movs	r1, #32
 800121a:	4808      	ldr	r0, [pc, #32]	; (800123c <set_number+0x4dc>)
 800121c:	f001 fdf4 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segG_Pin, GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	2101      	movs	r1, #1
 8001224:	4805      	ldr	r0, [pc, #20]	; (800123c <set_number+0x4dc>)
 8001226:	f001 fdef 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, segDP_Pin, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	2180      	movs	r1, #128	; 0x80
 800122e:	4803      	ldr	r0, [pc, #12]	; (800123c <set_number+0x4dc>)
 8001230:	f001 fdea 	bl	8002e08 <HAL_GPIO_WritePin>
	}
}
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40020800 	.word	0x40020800

08001240 <display>:

void display(uint8_t tab[]){
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	DisplayCOM = 0;
 8001248:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <display+0x40>)
 800124a:	2200      	movs	r2, #0
 800124c:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < 4; i++){
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	e00b      	b.n	800126c <display+0x2c>
		DisplayNumbers[i] = tab[i];
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	7819      	ldrb	r1, [r3, #0]
 800125c:	4a09      	ldr	r2, [pc, #36]	; (8001284 <display+0x44>)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4413      	add	r3, r2
 8001262:	460a      	mov	r2, r1
 8001264:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < 4; i++){
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	3301      	adds	r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2b03      	cmp	r3, #3
 8001270:	ddf0      	ble.n	8001254 <display+0x14>
	}

}
 8001272:	bf00      	nop
 8001274:	bf00      	nop
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	200001fc 	.word	0x200001fc
 8001284:	20000000 	.word	0x20000000

08001288 <display_int>:

void display_int(int num){
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	uint8_t tab [4];
	for (int i=3; i>=0; i--){
 8001290:	2303      	movs	r3, #3
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	e01d      	b.n	80012d2 <display_int+0x4a>
		tab[i] = num % 10;
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <display_int+0x64>)
 800129a:	fb83 1302 	smull	r1, r3, r3, r2
 800129e:	1099      	asrs	r1, r3, #2
 80012a0:	17d3      	asrs	r3, r2, #31
 80012a2:	1ac9      	subs	r1, r1, r3
 80012a4:	460b      	mov	r3, r1
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	1ad1      	subs	r1, r2, r3
 80012ae:	b2c9      	uxtb	r1, r1
 80012b0:	f107 0208 	add.w	r2, r7, #8
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4413      	add	r3, r2
 80012b8:	460a      	mov	r2, r1
 80012ba:	701a      	strb	r2, [r3, #0]
		num = num / 10;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a0b      	ldr	r2, [pc, #44]	; (80012ec <display_int+0x64>)
 80012c0:	fb82 1203 	smull	r1, r2, r2, r3
 80012c4:	1092      	asrs	r2, r2, #2
 80012c6:	17db      	asrs	r3, r3, #31
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	607b      	str	r3, [r7, #4]
	for (int i=3; i>=0; i--){
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	dade      	bge.n	8001296 <display_int+0xe>
	}
	display(tab);
 80012d8:	f107 0308 	add.w	r3, r7, #8
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ffaf 	bl	8001240 <display>
}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	66666667 	.word	0x66666667

080012f0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]

	if( htim == &htim1 ){
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a18      	ldr	r2, [pc, #96]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d102      	bne.n	8001306 <HAL_TIM_PeriodElapsedCallback+0x16>
		set_number();
 8001300:	f7ff fd2e 	bl	8000d60 <set_number>
			TimerCnt = 0;
		}
		else
			TimerCnt++;
	}
}
 8001304:	e026      	b.n	8001354 <HAL_TIM_PeriodElapsedCallback+0x64>
	else if( htim == &htim4 ) {
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a15      	ldr	r2, [pc, #84]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d122      	bne.n	8001354 <HAL_TIM_PeriodElapsedCallback+0x64>
		if (TimerCnt >= 100){
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2b63      	cmp	r3, #99	; 0x63
 8001314:	d919      	bls.n	800134a <HAL_TIM_PeriodElapsedCallback+0x5a>
			if (READ_DATA){
 8001316:	4b14      	ldr	r3, [pc, #80]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d009      	beq.n	8001332 <HAL_TIM_PeriodElapsedCallback+0x42>
				display_int(BufferAD[idx-1]);
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	3b01      	subs	r3, #1
 8001324:	4a12      	ldr	r2, [pc, #72]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001326:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ffac 	bl	8001288 <display_int>
 8001330:	e007      	b.n	8001342 <HAL_TIM_PeriodElapsedCallback+0x52>
				uint8_t tab[4] = {-1, -1, -1, -1};
 8001332:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001336:	60fb      	str	r3, [r7, #12]
				(display(tab));
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff7f 	bl	8001240 <display>
			TimerCnt = 0;
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
}
 8001348:	e004      	b.n	8001354 <HAL_TIM_PeriodElapsedCallback+0x64>
			TimerCnt++;
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	3301      	adds	r3, #1
 8001350:	4a04      	ldr	r2, [pc, #16]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001352:	6013      	str	r3, [r2, #0]
}
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200000dc 	.word	0x200000dc
 8001360:	2000016c 	.word	0x2000016c
 8001364:	200001f8 	.word	0x200001f8
 8001368:	20001975 	.word	0x20001975
 800136c:	20001970 	.word	0x20001970
 8001370:	200011a0 	.word	0x200011a0

08001374 <HAL_GPIO_EXTI_Callback>:
			}
		}
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Button1_Pin){
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d105      	bne.n	8001390 <HAL_GPIO_EXTI_Callback+0x1c>
		READ_DATA = true;
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <HAL_GPIO_EXTI_Callback+0x44>)
 8001386:	2201      	movs	r2, #1
 8001388:	701a      	strb	r2, [r3, #0]
		idx = 0;
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <HAL_GPIO_EXTI_Callback+0x48>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
//		button_click(0);
//		//printf("button1\r\n");
	}
	if(GPIO_Pin == Button2_Pin){
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	2b20      	cmp	r3, #32
 8001394:	d109      	bne.n	80013aa <HAL_GPIO_EXTI_Callback+0x36>
		READ_DATA = false;
 8001396:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <HAL_GPIO_EXTI_Callback+0x44>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
		max_idx = idx;
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <HAL_GPIO_EXTI_Callback+0x48>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a07      	ldr	r2, [pc, #28]	; (80013c0 <HAL_GPIO_EXTI_Callback+0x4c>)
 80013a2:	6013      	str	r3, [r2, #0]
		IS_FULL = true;
 80013a4:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <HAL_GPIO_EXTI_Callback+0x50>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	701a      	strb	r2, [r3, #0]
//		button_click(1);
//		//printf("button2\r\n");
	}
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20001975 	.word	0x20001975
 80013bc:	20001970 	.word	0x20001970
 80013c0:	20000004 	.word	0x20000004
 80013c4:	20001974 	.word	0x20001974

080013c8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	if (READ_DATA){
 80013d0:	4b29      	ldr	r3, [pc, #164]	; (8001478 <HAL_ADC_ConvCpltCallback+0xb0>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d041      	beq.n	800145c <HAL_ADC_ConvCpltCallback+0x94>
		int WYNIK_ADC = HAL_ADC_GetValue(&hadc1);
 80013d8:	4828      	ldr	r0, [pc, #160]	; (800147c <HAL_ADC_ConvCpltCallback+0xb4>)
 80013da:	f001 f825 	bl	8002428 <HAL_ADC_GetValue>
 80013de:	4603      	mov	r3, r0
 80013e0:	60fb      	str	r3, [r7, #12]
		int ADCRes = (uint16_t)(3.3 * (double)WYNIK_ADC / 4.095); // [mV]
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f7ff f89e 	bl	8000524 <__aeabi_i2d>
 80013e8:	a31f      	add	r3, pc, #124	; (adr r3, 8001468 <HAL_ADC_ConvCpltCallback+0xa0>)
 80013ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ee:	f7ff f903 	bl	80005f8 <__aeabi_dmul>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	a31d      	add	r3, pc, #116	; (adr r3, 8001470 <HAL_ADC_ConvCpltCallback+0xa8>)
 80013fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001400:	f7ff fa24 	bl	800084c <__aeabi_ddiv>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4610      	mov	r0, r2
 800140a:	4619      	mov	r1, r3
 800140c:	f7ff fb06 	bl	8000a1c <__aeabi_d2uiz>
 8001410:	4603      	mov	r3, r0
 8001412:	b29b      	uxth	r3, r3
 8001414:	60bb      	str	r3, [r7, #8]
		//display_int(ADCRes);

		BufferT[idx] = ARM_CM_DWT_CYCCNT;
 8001416:	4a1a      	ldr	r2, [pc, #104]	; (8001480 <HAL_ADC_ConvCpltCallback+0xb8>)
 8001418:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <HAL_ADC_ConvCpltCallback+0xbc>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6812      	ldr	r2, [r2, #0]
 800141e:	491a      	ldr	r1, [pc, #104]	; (8001488 <HAL_ADC_ConvCpltCallback+0xc0>)
 8001420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		BufferAD[idx] = ADCRes;
 8001424:	4b17      	ldr	r3, [pc, #92]	; (8001484 <HAL_ADC_ConvCpltCallback+0xbc>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68ba      	ldr	r2, [r7, #8]
 800142a:	b291      	uxth	r1, r2
 800142c:	4a17      	ldr	r2, [pc, #92]	; (800148c <HAL_ADC_ConvCpltCallback+0xc4>)
 800142e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		idx++;
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <HAL_ADC_ConvCpltCallback+0xbc>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	3301      	adds	r3, #1
 8001438:	4a12      	ldr	r2, [pc, #72]	; (8001484 <HAL_ADC_ConvCpltCallback+0xbc>)
 800143a:	6013      	str	r3, [r2, #0]
		if (idx == BUFFER_LEN-1){
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <HAL_ADC_ConvCpltCallback+0xbc>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001444:	4293      	cmp	r3, r2
 8001446:	d109      	bne.n	800145c <HAL_ADC_ConvCpltCallback+0x94>
			IS_FULL = 1;
 8001448:	4b11      	ldr	r3, [pc, #68]	; (8001490 <HAL_ADC_ConvCpltCallback+0xc8>)
 800144a:	2201      	movs	r2, #1
 800144c:	701a      	strb	r2, [r3, #0]
			max_idx = idx;
 800144e:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <HAL_ADC_ConvCpltCallback+0xbc>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a10      	ldr	r2, [pc, #64]	; (8001494 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001454:	6013      	str	r3, [r2, #0]
			READ_DATA = false;
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800145c:	bf00      	nop
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	f3af 8000 	nop.w
 8001468:	66666666 	.word	0x66666666
 800146c:	400a6666 	.word	0x400a6666
 8001470:	ae147ae1 	.word	0xae147ae1
 8001474:	40106147 	.word	0x40106147
 8001478:	20001975 	.word	0x20001975
 800147c:	20000094 	.word	0x20000094
 8001480:	e0001004 	.word	0xe0001004
 8001484:	20001970 	.word	0x20001970
 8001488:	20000200 	.word	0x20000200
 800148c:	200011a0 	.word	0x200011a0
 8001490:	20001974 	.word	0x20001974
 8001494:	20000004 	.word	0x20000004

08001498 <__io_putchar>:

int __io_putchar(int ch) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80014a0:	1d39      	adds	r1, r7, #4
 80014a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014a6:	2201      	movs	r2, #1
 80014a8:	4803      	ldr	r0, [pc, #12]	; (80014b8 <__io_putchar+0x20>)
 80014aa:	f002 fe64 	bl	8004176 <HAL_UART_Transmit>
	return ch;
 80014ae:	687b      	ldr	r3, [r7, #4]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	200001b4 	.word	0x200001b4

080014bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c2:	f000 fd2d 	bl	8001f20 <HAL_Init>

  /* USER CODE BEGIN Init */
  if (ARM_CM_DWT_CTRL != 0) { // See if DWT is available
 80014c6:	4b28      	ldr	r3, [pc, #160]	; (8001568 <main+0xac>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00e      	beq.n	80014ec <main+0x30>
	  ARM_CM_DEMCR |= 1 << 24; // Set bit 24
 80014ce:	4b27      	ldr	r3, [pc, #156]	; (800156c <main+0xb0>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a26      	ldr	r2, [pc, #152]	; (800156c <main+0xb0>)
 80014d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014d8:	6013      	str	r3, [r2, #0]
	  ARM_CM_DWT_CYCCNT = 0;
 80014da:	4b25      	ldr	r3, [pc, #148]	; (8001570 <main+0xb4>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
	  ARM_CM_DWT_CTRL |= 1 << 0; // Set bit 0
 80014e0:	4b21      	ldr	r3, [pc, #132]	; (8001568 <main+0xac>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a20      	ldr	r2, [pc, #128]	; (8001568 <main+0xac>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ec:	f000 f854 	bl	8001598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f0:	f000 fa20 	bl	8001934 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014f4:	f000 f9f4 	bl	80018e0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80014f8:	f000 f908 	bl	800170c <MX_TIM1_Init>
  MX_ADC1_Init();
 80014fc:	f000 f8b4 	bl	8001668 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001500:	f000 f9a0 	bl	8001844 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001504:	f000 f952 	bl	80017ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8001508:	481a      	ldr	r0, [pc, #104]	; (8001574 <main+0xb8>)
 800150a:	f002 f9f1 	bl	80038f0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);
 800150e:	481a      	ldr	r0, [pc, #104]	; (8001578 <main+0xbc>)
 8001510:	f002 f994 	bl	800383c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8001514:	4819      	ldr	r0, [pc, #100]	; (800157c <main+0xc0>)
 8001516:	f002 f9eb 	bl	80038f0 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT(&hadc1);
 800151a:	4819      	ldr	r0, [pc, #100]	; (8001580 <main+0xc4>)
 800151c:	f000 fdb6 	bl	800208c <HAL_ADC_Start_IT>
//		  for (int i = 0; i < BUFFER_LEN; i++){
//				printf("%li %i, \r\n", BufferT[i], BufferAD[i]);
//		  }
//		  IS_FULL = false;
//	  }
	  if (IS_FULL){
 8001520:	4b18      	ldr	r3, [pc, #96]	; (8001584 <main+0xc8>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0fb      	beq.n	8001520 <main+0x64>
		  for (int i = 0; i < max_idx; i++){
 8001528:	2300      	movs	r3, #0
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	e00e      	b.n	800154c <main+0x90>
				printf("%li %i, \r\n", BufferT[i], BufferAD[i]);
 800152e:	4a16      	ldr	r2, [pc, #88]	; (8001588 <main+0xcc>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001536:	4a15      	ldr	r2, [pc, #84]	; (800158c <main+0xd0>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800153e:	461a      	mov	r2, r3
 8001540:	4813      	ldr	r0, [pc, #76]	; (8001590 <main+0xd4>)
 8001542:	f003 f9bf 	bl	80048c4 <iprintf>
		  for (int i = 0; i < max_idx; i++){
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3301      	adds	r3, #1
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	4b11      	ldr	r3, [pc, #68]	; (8001594 <main+0xd8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	d3eb      	bcc.n	800152e <main+0x72>
		  }
		  IS_FULL = false;
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <main+0xc8>)
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
		  max_idx = -1;
 800155c:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <main+0xd8>)
 800155e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001562:	601a      	str	r2, [r3, #0]
	  if (IS_FULL){
 8001564:	e7dc      	b.n	8001520 <main+0x64>
 8001566:	bf00      	nop
 8001568:	e0001000 	.word	0xe0001000
 800156c:	e000edfc 	.word	0xe000edfc
 8001570:	e0001004 	.word	0xe0001004
 8001574:	200000dc 	.word	0x200000dc
 8001578:	20000124 	.word	0x20000124
 800157c:	2000016c 	.word	0x2000016c
 8001580:	20000094 	.word	0x20000094
 8001584:	20001974 	.word	0x20001974
 8001588:	20000200 	.word	0x20000200
 800158c:	200011a0 	.word	0x200011a0
 8001590:	080057f8 	.word	0x080057f8
 8001594:	20000004 	.word	0x20000004

08001598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b094      	sub	sp, #80	; 0x50
 800159c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800159e:	f107 0320 	add.w	r3, r7, #32
 80015a2:	2230      	movs	r2, #48	; 0x30
 80015a4:	2100      	movs	r1, #0
 80015a6:	4618      	mov	r0, r3
 80015a8:	f003 f984 	bl	80048b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	4b27      	ldr	r3, [pc, #156]	; (8001660 <SystemClock_Config+0xc8>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	4a26      	ldr	r2, [pc, #152]	; (8001660 <SystemClock_Config+0xc8>)
 80015c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ca:	6413      	str	r3, [r2, #64]	; 0x40
 80015cc:	4b24      	ldr	r3, [pc, #144]	; (8001660 <SystemClock_Config+0xc8>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015d8:	2300      	movs	r3, #0
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	4b21      	ldr	r3, [pc, #132]	; (8001664 <SystemClock_Config+0xcc>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a20      	ldr	r2, [pc, #128]	; (8001664 <SystemClock_Config+0xcc>)
 80015e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <SystemClock_Config+0xcc>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015f4:	2302      	movs	r3, #2
 80015f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015f8:	2301      	movs	r3, #1
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015fc:	2310      	movs	r3, #16
 80015fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001600:	2302      	movs	r3, #2
 8001602:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001604:	2300      	movs	r3, #0
 8001606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001608:	2308      	movs	r3, #8
 800160a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800160c:	2364      	movs	r3, #100	; 0x64
 800160e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001610:	2302      	movs	r3, #2
 8001612:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001614:	2304      	movs	r3, #4
 8001616:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001618:	f107 0320 	add.w	r3, r7, #32
 800161c:	4618      	mov	r0, r3
 800161e:	f001 fc25 	bl	8002e6c <HAL_RCC_OscConfig>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001628:	f000 fa26 	bl	8001a78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800162c:	230f      	movs	r3, #15
 800162e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001630:	2302      	movs	r3, #2
 8001632:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001642:	f107 030c 	add.w	r3, r7, #12
 8001646:	2103      	movs	r1, #3
 8001648:	4618      	mov	r0, r3
 800164a:	f001 fe87 	bl	800335c <HAL_RCC_ClockConfig>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001654:	f000 fa10 	bl	8001a78 <Error_Handler>
  }
}
 8001658:	bf00      	nop
 800165a:	3750      	adds	r7, #80	; 0x50
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40023800 	.word	0x40023800
 8001664:	40007000 	.word	0x40007000

08001668 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800166e:	463b      	mov	r3, r7
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800167a:	4b22      	ldr	r3, [pc, #136]	; (8001704 <MX_ADC1_Init+0x9c>)
 800167c:	4a22      	ldr	r2, [pc, #136]	; (8001708 <MX_ADC1_Init+0xa0>)
 800167e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001680:	4b20      	ldr	r3, [pc, #128]	; (8001704 <MX_ADC1_Init+0x9c>)
 8001682:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001686:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001688:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <MX_ADC1_Init+0x9c>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800168e:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <MX_ADC1_Init+0x9c>)
 8001690:	2201      	movs	r2, #1
 8001692:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001694:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <MX_ADC1_Init+0x9c>)
 8001696:	2201      	movs	r2, #1
 8001698:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800169a:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <MX_ADC1_Init+0x9c>)
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80016a2:	4b18      	ldr	r3, [pc, #96]	; (8001704 <MX_ADC1_Init+0x9c>)
 80016a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80016aa:	4b16      	ldr	r3, [pc, #88]	; (8001704 <MX_ADC1_Init+0x9c>)
 80016ac:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80016b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016b2:	4b14      	ldr	r3, [pc, #80]	; (8001704 <MX_ADC1_Init+0x9c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <MX_ADC1_Init+0x9c>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <MX_ADC1_Init+0x9c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016c6:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <MX_ADC1_Init+0x9c>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016cc:	480d      	ldr	r0, [pc, #52]	; (8001704 <MX_ADC1_Init+0x9c>)
 80016ce:	f000 fc99 	bl	8002004 <HAL_ADC_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80016d8:	f000 f9ce 	bl	8001a78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80016dc:	2301      	movs	r3, #1
 80016de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016e0:	2301      	movs	r3, #1
 80016e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016e8:	463b      	mov	r3, r7
 80016ea:	4619      	mov	r1, r3
 80016ec:	4805      	ldr	r0, [pc, #20]	; (8001704 <MX_ADC1_Init+0x9c>)
 80016ee:	f000 febd 	bl	800246c <HAL_ADC_ConfigChannel>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80016f8:	f000 f9be 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016fc:	bf00      	nop
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000094 	.word	0x20000094
 8001708:	40012000 	.word	0x40012000

0800170c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001712:	f107 0308 	add.w	r3, r7, #8
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001720:	463b      	mov	r3, r7
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001728:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <MX_TIM1_Init+0x98>)
 800172a:	4a1f      	ldr	r2, [pc, #124]	; (80017a8 <MX_TIM1_Init+0x9c>)
 800172c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100;
 800172e:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <MX_TIM1_Init+0x98>)
 8001730:	2264      	movs	r2, #100	; 0x64
 8001732:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001734:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <MX_TIM1_Init+0x98>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800173a:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <MX_TIM1_Init+0x98>)
 800173c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001740:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001742:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <MX_TIM1_Init+0x98>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001748:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <MX_TIM1_Init+0x98>)
 800174a:	2200      	movs	r2, #0
 800174c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <MX_TIM1_Init+0x98>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001754:	4813      	ldr	r0, [pc, #76]	; (80017a4 <MX_TIM1_Init+0x98>)
 8001756:	f002 f821 	bl	800379c <HAL_TIM_Base_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001760:	f000 f98a 	bl	8001a78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001768:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800176a:	f107 0308 	add.w	r3, r7, #8
 800176e:	4619      	mov	r1, r3
 8001770:	480c      	ldr	r0, [pc, #48]	; (80017a4 <MX_TIM1_Init+0x98>)
 8001772:	f002 fa27 	bl	8003bc4 <HAL_TIM_ConfigClockSource>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800177c:	f000 f97c 	bl	8001a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001780:	2300      	movs	r3, #0
 8001782:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001784:	2300      	movs	r3, #0
 8001786:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001788:	463b      	mov	r3, r7
 800178a:	4619      	mov	r1, r3
 800178c:	4805      	ldr	r0, [pc, #20]	; (80017a4 <MX_TIM1_Init+0x98>)
 800178e:	f002 fc23 	bl	8003fd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001798:	f000 f96e 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800179c:	bf00      	nop
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	200000dc 	.word	0x200000dc
 80017a8:	40010000 	.word	0x40010000

080017ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b2:	f107 0308 	add.w	r3, r7, #8
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c0:	463b      	mov	r3, r7
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017c8:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <MX_TIM2_Init+0x94>)
 80017ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80017d0:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <MX_TIM2_Init+0x94>)
 80017d2:	2263      	movs	r2, #99	; 0x63
 80017d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d6:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <MX_TIM2_Init+0x94>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 80017dc:	4b18      	ldr	r3, [pc, #96]	; (8001840 <MX_TIM2_Init+0x94>)
 80017de:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80017e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e4:	4b16      	ldr	r3, [pc, #88]	; (8001840 <MX_TIM2_Init+0x94>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <MX_TIM2_Init+0x94>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017f0:	4813      	ldr	r0, [pc, #76]	; (8001840 <MX_TIM2_Init+0x94>)
 80017f2:	f001 ffd3 	bl	800379c <HAL_TIM_Base_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80017fc:	f000 f93c 	bl	8001a78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001804:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001806:	f107 0308 	add.w	r3, r7, #8
 800180a:	4619      	mov	r1, r3
 800180c:	480c      	ldr	r0, [pc, #48]	; (8001840 <MX_TIM2_Init+0x94>)
 800180e:	f002 f9d9 	bl	8003bc4 <HAL_TIM_ConfigClockSource>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001818:	f000 f92e 	bl	8001a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800181c:	2320      	movs	r3, #32
 800181e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001820:	2300      	movs	r3, #0
 8001822:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001824:	463b      	mov	r3, r7
 8001826:	4619      	mov	r1, r3
 8001828:	4805      	ldr	r0, [pc, #20]	; (8001840 <MX_TIM2_Init+0x94>)
 800182a:	f002 fbd5 	bl	8003fd8 <HAL_TIMEx_MasterConfigSynchronization>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001834:	f000 f920 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001838:	bf00      	nop
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000124 	.word	0x20000124

08001844 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800184a:	f107 0308 	add.w	r3, r7, #8
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001858:	463b      	mov	r3, r7
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001860:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <MX_TIM4_Init+0x94>)
 8001862:	4a1e      	ldr	r2, [pc, #120]	; (80018dc <MX_TIM4_Init+0x98>)
 8001864:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8001866:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <MX_TIM4_Init+0x94>)
 8001868:	2263      	movs	r2, #99	; 0x63
 800186a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186c:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <MX_TIM4_Init+0x94>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8001872:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <MX_TIM4_Init+0x94>)
 8001874:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001878:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187a:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <MX_TIM4_Init+0x94>)
 800187c:	2200      	movs	r2, #0
 800187e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001880:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <MX_TIM4_Init+0x94>)
 8001882:	2200      	movs	r2, #0
 8001884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001886:	4814      	ldr	r0, [pc, #80]	; (80018d8 <MX_TIM4_Init+0x94>)
 8001888:	f001 ff88 	bl	800379c <HAL_TIM_Base_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001892:	f000 f8f1 	bl	8001a78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001896:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800189a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800189c:	f107 0308 	add.w	r3, r7, #8
 80018a0:	4619      	mov	r1, r3
 80018a2:	480d      	ldr	r0, [pc, #52]	; (80018d8 <MX_TIM4_Init+0x94>)
 80018a4:	f002 f98e 	bl	8003bc4 <HAL_TIM_ConfigClockSource>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80018ae:	f000 f8e3 	bl	8001a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b2:	2300      	movs	r3, #0
 80018b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018ba:	463b      	mov	r3, r7
 80018bc:	4619      	mov	r1, r3
 80018be:	4806      	ldr	r0, [pc, #24]	; (80018d8 <MX_TIM4_Init+0x94>)
 80018c0:	f002 fb8a 	bl	8003fd8 <HAL_TIMEx_MasterConfigSynchronization>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80018ca:	f000 f8d5 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80018ce:	bf00      	nop
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	2000016c 	.word	0x2000016c
 80018dc:	40000800 	.word	0x40000800

080018e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <MX_USART2_UART_Init+0x4c>)
 80018e6:	4a12      	ldr	r2, [pc, #72]	; (8001930 <MX_USART2_UART_Init+0x50>)
 80018e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <MX_USART2_UART_Init+0x4c>)
 80018ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <MX_USART2_UART_Init+0x4c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <MX_USART2_UART_Init+0x4c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018fe:	4b0b      	ldr	r3, [pc, #44]	; (800192c <MX_USART2_UART_Init+0x4c>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001904:	4b09      	ldr	r3, [pc, #36]	; (800192c <MX_USART2_UART_Init+0x4c>)
 8001906:	220c      	movs	r2, #12
 8001908:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190a:	4b08      	ldr	r3, [pc, #32]	; (800192c <MX_USART2_UART_Init+0x4c>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <MX_USART2_UART_Init+0x4c>)
 8001912:	2200      	movs	r2, #0
 8001914:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001916:	4805      	ldr	r0, [pc, #20]	; (800192c <MX_USART2_UART_Init+0x4c>)
 8001918:	f002 fbe0 	bl	80040dc <HAL_UART_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001922:	f000 f8a9 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	200001b4 	.word	0x200001b4
 8001930:	40004400 	.word	0x40004400

08001934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	; 0x28
 8001938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193a:	f107 0314 	add.w	r3, r7, #20
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
 8001948:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	4b46      	ldr	r3, [pc, #280]	; (8001a68 <MX_GPIO_Init+0x134>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a45      	ldr	r2, [pc, #276]	; (8001a68 <MX_GPIO_Init+0x134>)
 8001954:	f043 0304 	orr.w	r3, r3, #4
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b43      	ldr	r3, [pc, #268]	; (8001a68 <MX_GPIO_Init+0x134>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b3f      	ldr	r3, [pc, #252]	; (8001a68 <MX_GPIO_Init+0x134>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a3e      	ldr	r2, [pc, #248]	; (8001a68 <MX_GPIO_Init+0x134>)
 8001970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b3c      	ldr	r3, [pc, #240]	; (8001a68 <MX_GPIO_Init+0x134>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	4b38      	ldr	r3, [pc, #224]	; (8001a68 <MX_GPIO_Init+0x134>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a37      	ldr	r2, [pc, #220]	; (8001a68 <MX_GPIO_Init+0x134>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b35      	ldr	r3, [pc, #212]	; (8001a68 <MX_GPIO_Init+0x134>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	4b31      	ldr	r3, [pc, #196]	; (8001a68 <MX_GPIO_Init+0x134>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a30      	ldr	r2, [pc, #192]	; (8001a68 <MX_GPIO_Init+0x134>)
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <MX_GPIO_Init+0x134>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, segG_Pin|segD_Pin|segE_Pin|segC_Pin
 80019ba:	2200      	movs	r2, #0
 80019bc:	f640 71ff 	movw	r1, #4095	; 0xfff
 80019c0:	482a      	ldr	r0, [pc, #168]	; (8001a6c <MX_GPIO_Init+0x138>)
 80019c2:	f001 fa21 	bl	8002e08 <HAL_GPIO_WritePin>
                          |segB_Pin|segF_Pin|segA_Pin|segDP_Pin
                          |COM3_Pin|COM2_Pin|COM1_Pin|COM4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2120      	movs	r1, #32
 80019ca:	4829      	ldr	r0, [pc, #164]	; (8001a70 <MX_GPIO_Init+0x13c>)
 80019cc:	f001 fa1c 	bl	8002e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80019da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	4619      	mov	r1, r3
 80019e6:	4821      	ldr	r0, [pc, #132]	; (8001a6c <MX_GPIO_Init+0x138>)
 80019e8:	f001 f88a 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : segG_Pin segD_Pin segE_Pin segC_Pin
                           segB_Pin segF_Pin segA_Pin segDP_Pin
                           COM3_Pin COM2_Pin COM1_Pin COM4_Pin */
  GPIO_InitStruct.Pin = segG_Pin|segD_Pin|segE_Pin|segC_Pin
 80019ec:	f640 73ff 	movw	r3, #4095	; 0xfff
 80019f0:	617b      	str	r3, [r7, #20]
                          |segB_Pin|segF_Pin|segA_Pin|segDP_Pin
                          |COM3_Pin|COM2_Pin|COM1_Pin|COM4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f2:	2301      	movs	r3, #1
 80019f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	4619      	mov	r1, r3
 8001a04:	4819      	ldr	r0, [pc, #100]	; (8001a6c <MX_GPIO_Init+0x138>)
 8001a06:	f001 f87b 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a0a:	2320      	movs	r3, #32
 8001a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a16:	2300      	movs	r3, #0
 8001a18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4813      	ldr	r0, [pc, #76]	; (8001a70 <MX_GPIO_Init+0x13c>)
 8001a22:	f001 f86d 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin;
 8001a26:	2321      	movs	r3, #33	; 0x21
 8001a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a2a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a30:	2301      	movs	r3, #1
 8001a32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	4619      	mov	r1, r3
 8001a3a:	480e      	ldr	r0, [pc, #56]	; (8001a74 <MX_GPIO_Init+0x140>)
 8001a3c:	f001 f860 	bl	8002b00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2100      	movs	r1, #0
 8001a44:	2006      	movs	r0, #6
 8001a46:	f001 f824 	bl	8002a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001a4a:	2006      	movs	r0, #6
 8001a4c:	f001 f83d 	bl	8002aca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2100      	movs	r1, #0
 8001a54:	2017      	movs	r0, #23
 8001a56:	f001 f81c 	bl	8002a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a5a:	2017      	movs	r0, #23
 8001a5c:	f001 f835 	bl	8002aca <HAL_NVIC_EnableIRQ>

}
 8001a60:	bf00      	nop
 8001a62:	3728      	adds	r7, #40	; 0x28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40020800 	.word	0x40020800
 8001a70:	40020000 	.word	0x40020000
 8001a74:	40020400 	.word	0x40020400

08001a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a7c:	b672      	cpsid	i
}
 8001a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <Error_Handler+0x8>
	...

08001a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <HAL_MspInit+0x4c>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	4a0f      	ldr	r2, [pc, #60]	; (8001ad0 <HAL_MspInit+0x4c>)
 8001a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a98:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <HAL_MspInit+0x4c>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	603b      	str	r3, [r7, #0]
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <HAL_MspInit+0x4c>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	4a08      	ldr	r2, [pc, #32]	; (8001ad0 <HAL_MspInit+0x4c>)
 8001ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_MspInit+0x4c>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ac2:	2007      	movs	r0, #7
 8001ac4:	f000 ffda 	bl	8002a7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40023800 	.word	0x40023800

08001ad4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	; 0x28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a1b      	ldr	r2, [pc, #108]	; (8001b60 <HAL_ADC_MspInit+0x8c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d12f      	bne.n	8001b56 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <HAL_ADC_MspInit+0x90>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	4a19      	ldr	r2, [pc, #100]	; (8001b64 <HAL_ADC_MspInit+0x90>)
 8001b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b04:	6453      	str	r3, [r2, #68]	; 0x44
 8001b06:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <HAL_ADC_MspInit+0x90>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <HAL_ADC_MspInit+0x90>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a12      	ldr	r2, [pc, #72]	; (8001b64 <HAL_ADC_MspInit+0x90>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <HAL_ADC_MspInit+0x90>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = PV_Pin;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b32:	2303      	movs	r3, #3
 8001b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PV_GPIO_Port, &GPIO_InitStruct);
 8001b3a:	f107 0314 	add.w	r3, r7, #20
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4809      	ldr	r0, [pc, #36]	; (8001b68 <HAL_ADC_MspInit+0x94>)
 8001b42:	f000 ffdd 	bl	8002b00 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2012      	movs	r0, #18
 8001b4c:	f000 ffa1 	bl	8002a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001b50:	2012      	movs	r0, #18
 8001b52:	f000 ffba 	bl	8002aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b56:	bf00      	nop
 8001b58:	3728      	adds	r7, #40	; 0x28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40012000 	.word	0x40012000
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40020000 	.word	0x40020000

08001b6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a26      	ldr	r2, [pc, #152]	; (8001c14 <HAL_TIM_Base_MspInit+0xa8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d116      	bne.n	8001bac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <HAL_TIM_Base_MspInit+0xac>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	4a24      	ldr	r2, [pc, #144]	; (8001c18 <HAL_TIM_Base_MspInit+0xac>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8e:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <HAL_TIM_Base_MspInit+0xac>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	2019      	movs	r0, #25
 8001ba0:	f000 ff77 	bl	8002a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ba4:	2019      	movs	r0, #25
 8001ba6:	f000 ff90 	bl	8002aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001baa:	e02e      	b.n	8001c0a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb4:	d10e      	bne.n	8001bd4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <HAL_TIM_Base_MspInit+0xac>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	4a16      	ldr	r2, [pc, #88]	; (8001c18 <HAL_TIM_Base_MspInit+0xac>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc6:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <HAL_TIM_Base_MspInit+0xac>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	693b      	ldr	r3, [r7, #16]
}
 8001bd2:	e01a      	b.n	8001c0a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a10      	ldr	r2, [pc, #64]	; (8001c1c <HAL_TIM_Base_MspInit+0xb0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d115      	bne.n	8001c0a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <HAL_TIM_Base_MspInit+0xac>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	4a0c      	ldr	r2, [pc, #48]	; (8001c18 <HAL_TIM_Base_MspInit+0xac>)
 8001be8:	f043 0304 	orr.w	r3, r3, #4
 8001bec:	6413      	str	r3, [r2, #64]	; 0x40
 8001bee:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <HAL_TIM_Base_MspInit+0xac>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	201e      	movs	r0, #30
 8001c00:	f000 ff47 	bl	8002a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c04:	201e      	movs	r0, #30
 8001c06:	f000 ff60 	bl	8002aca <HAL_NVIC_EnableIRQ>
}
 8001c0a:	bf00      	nop
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40010000 	.word	0x40010000
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40000800 	.word	0x40000800

08001c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	; 0x28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a19      	ldr	r2, [pc, #100]	; (8001ca4 <HAL_UART_MspInit+0x84>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d12b      	bne.n	8001c9a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	4b18      	ldr	r3, [pc, #96]	; (8001ca8 <HAL_UART_MspInit+0x88>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	4a17      	ldr	r2, [pc, #92]	; (8001ca8 <HAL_UART_MspInit+0x88>)
 8001c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c50:	6413      	str	r3, [r2, #64]	; 0x40
 8001c52:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <HAL_UART_MspInit+0x88>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <HAL_UART_MspInit+0x88>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a10      	ldr	r2, [pc, #64]	; (8001ca8 <HAL_UART_MspInit+0x88>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <HAL_UART_MspInit+0x88>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c7a:	230c      	movs	r3, #12
 8001c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c86:	2303      	movs	r3, #3
 8001c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c8a:	2307      	movs	r3, #7
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	4619      	mov	r1, r3
 8001c94:	4805      	ldr	r0, [pc, #20]	; (8001cac <HAL_UART_MspInit+0x8c>)
 8001c96:	f000 ff33 	bl	8002b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c9a:	bf00      	nop
 8001c9c:	3728      	adds	r7, #40	; 0x28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40004400 	.word	0x40004400
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40020000 	.word	0x40020000

08001cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <NMI_Handler+0x4>

08001cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cba:	e7fe      	b.n	8001cba <HardFault_Handler+0x4>

08001cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <MemManage_Handler+0x4>

08001cc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc6:	e7fe      	b.n	8001cc6 <BusFault_Handler+0x4>

08001cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <UsageFault_Handler+0x4>

08001cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cfc:	f000 f962 	bl	8001fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button1_Pin);
 8001d08:	2001      	movs	r0, #1
 8001d0a:	f001 f897 	bl	8002e3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d18:	4802      	ldr	r0, [pc, #8]	; (8001d24 <ADC_IRQHandler+0x10>)
 8001d1a:	f000 fa75 	bl	8002208 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000094 	.word	0x20000094

08001d28 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button2_Pin);
 8001d2c:	2020      	movs	r0, #32
 8001d2e:	f001 f885 	bl	8002e3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d3c:	4802      	ldr	r0, [pc, #8]	; (8001d48 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001d3e:	f001 fe39 	bl	80039b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	200000dc 	.word	0x200000dc

08001d4c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d50:	4802      	ldr	r0, [pc, #8]	; (8001d5c <TIM4_IRQHandler+0x10>)
 8001d52:	f001 fe2f 	bl	80039b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	2000016c 	.word	0x2000016c

08001d60 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	e00a      	b.n	8001d88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d72:	f3af 8000 	nop.w
 8001d76:	4601      	mov	r1, r0
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	1c5a      	adds	r2, r3, #1
 8001d7c:	60ba      	str	r2, [r7, #8]
 8001d7e:	b2ca      	uxtb	r2, r1
 8001d80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	3301      	adds	r3, #1
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	dbf0      	blt.n	8001d72 <_read+0x12>
	}

return len;
 8001d90:	687b      	ldr	r3, [r7, #4]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	e009      	b.n	8001dc0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	1c5a      	adds	r2, r3, #1
 8001db0:	60ba      	str	r2, [r7, #8]
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fb6f 	bl	8001498 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	dbf1      	blt.n	8001dac <_write+0x12>
	}
	return len;
 8001dc8:	687b      	ldr	r3, [r7, #4]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <_close>:

int _close(int file)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
	return -1;
 8001dda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dfa:	605a      	str	r2, [r3, #4]
	return 0;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <_isatty>:

int _isatty(int file)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
	return 1;
 8001e12:	2301      	movs	r3, #1
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
	return 0;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e44:	4a14      	ldr	r2, [pc, #80]	; (8001e98 <_sbrk+0x5c>)
 8001e46:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <_sbrk+0x60>)
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e50:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <_sbrk+0x64>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d102      	bne.n	8001e5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e58:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <_sbrk+0x64>)
 8001e5a:	4a12      	ldr	r2, [pc, #72]	; (8001ea4 <_sbrk+0x68>)
 8001e5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <_sbrk+0x64>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d207      	bcs.n	8001e7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e6c:	f002 fcf8 	bl	8004860 <__errno>
 8001e70:	4603      	mov	r3, r0
 8001e72:	220c      	movs	r2, #12
 8001e74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e7a:	e009      	b.n	8001e90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e7c:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <_sbrk+0x64>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e82:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <_sbrk+0x64>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	4a05      	ldr	r2, [pc, #20]	; (8001ea0 <_sbrk+0x64>)
 8001e8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20020000 	.word	0x20020000
 8001e9c:	00000400 	.word	0x00000400
 8001ea0:	20001978 	.word	0x20001978
 8001ea4:	20001990 	.word	0x20001990

08001ea8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <SystemInit+0x20>)
 8001eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb2:	4a05      	ldr	r2, [pc, #20]	; (8001ec8 <SystemInit+0x20>)
 8001eb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ecc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ed0:	480d      	ldr	r0, [pc, #52]	; (8001f08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ed2:	490e      	ldr	r1, [pc, #56]	; (8001f0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ed4:	4a0e      	ldr	r2, [pc, #56]	; (8001f10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed8:	e002      	b.n	8001ee0 <LoopCopyDataInit>

08001eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ede:	3304      	adds	r3, #4

08001ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee4:	d3f9      	bcc.n	8001eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee6:	4a0b      	ldr	r2, [pc, #44]	; (8001f14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ee8:	4c0b      	ldr	r4, [pc, #44]	; (8001f18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eec:	e001      	b.n	8001ef2 <LoopFillZerobss>

08001eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef0:	3204      	adds	r2, #4

08001ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef4:	d3fb      	bcc.n	8001eee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ef6:	f7ff ffd7 	bl	8001ea8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001efa:	f002 fcb7 	bl	800486c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001efe:	f7ff fadd 	bl	80014bc <main>
  bx  lr    
 8001f02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f0c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001f10:	080058c4 	.word	0x080058c4
  ldr r2, =_sbss
 8001f14:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001f18:	20001990 	.word	0x20001990

08001f1c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f1c:	e7fe      	b.n	8001f1c <DMA1_Stream0_IRQHandler>
	...

08001f20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f24:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <HAL_Init+0x40>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0d      	ldr	r2, [pc, #52]	; (8001f60 <HAL_Init+0x40>)
 8001f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_Init+0x40>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <HAL_Init+0x40>)
 8001f36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <HAL_Init+0x40>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a07      	ldr	r2, [pc, #28]	; (8001f60 <HAL_Init+0x40>)
 8001f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f48:	2003      	movs	r0, #3
 8001f4a:	f000 fd97 	bl	8002a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f000 f808 	bl	8001f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f54:	f7ff fd96 	bl	8001a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40023c00 	.word	0x40023c00

08001f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_InitTick+0x54>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_InitTick+0x58>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	4619      	mov	r1, r3
 8001f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 fdaf 	bl	8002ae6 <HAL_SYSTICK_Config>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00e      	b.n	8001fb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b0f      	cmp	r3, #15
 8001f96:	d80a      	bhi.n	8001fae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fa0:	f000 fd77 	bl	8002a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa4:	4a06      	ldr	r2, [pc, #24]	; (8001fc0 <HAL_InitTick+0x5c>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	e000      	b.n	8001fb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20000008 	.word	0x20000008
 8001fbc:	20000010 	.word	0x20000010
 8001fc0:	2000000c 	.word	0x2000000c

08001fc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc8:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_IncTick+0x20>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_IncTick+0x24>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	4a04      	ldr	r2, [pc, #16]	; (8001fe8 <HAL_IncTick+0x24>)
 8001fd6:	6013      	str	r3, [r2, #0]
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	20000010 	.word	0x20000010
 8001fe8:	2000197c 	.word	0x2000197c

08001fec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff0:	4b03      	ldr	r3, [pc, #12]	; (8002000 <HAL_GetTick+0x14>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	2000197c 	.word	0x2000197c

08002004 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800200c:	2300      	movs	r3, #0
 800200e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e033      	b.n	8002082 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	2b00      	cmp	r3, #0
 8002020:	d109      	bne.n	8002036 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff fd56 	bl	8001ad4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	2b00      	cmp	r3, #0
 8002040:	d118      	bne.n	8002074 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800204a:	f023 0302 	bic.w	r3, r3, #2
 800204e:	f043 0202 	orr.w	r2, r3, #2
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 fb3a 	bl	80026d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f023 0303 	bic.w	r3, r3, #3
 800206a:	f043 0201 	orr.w	r2, r3, #1
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	641a      	str	r2, [r3, #64]	; 0x40
 8002072:	e001      	b.n	8002078 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002080:	7bfb      	ldrb	r3, [r7, #15]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002094:	2300      	movs	r3, #0
 8002096:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <HAL_ADC_Start_IT+0x1a>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e0a1      	b.n	80021ea <HAL_ADC_Start_IT+0x15e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d018      	beq.n	80020ee <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 0201 	orr.w	r2, r2, #1
 80020ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020cc:	4b4a      	ldr	r3, [pc, #296]	; (80021f8 <HAL_ADC_Start_IT+0x16c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a4a      	ldr	r2, [pc, #296]	; (80021fc <HAL_ADC_Start_IT+0x170>)
 80020d2:	fba2 2303 	umull	r2, r3, r2, r3
 80020d6:	0c9a      	lsrs	r2, r3, #18
 80020d8:	4613      	mov	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4413      	add	r3, r2
 80020de:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80020e0:	e002      	b.n	80020e8 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	3b01      	subs	r3, #1
 80020e6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f9      	bne.n	80020e2 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d169      	bne.n	80021d0 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002104:	f023 0301 	bic.w	r3, r3, #1
 8002108:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800211a:	2b00      	cmp	r3, #0
 800211c:	d007      	beq.n	800212e <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002126:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800213a:	d106      	bne.n	800214a <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002140:	f023 0206 	bic.w	r2, r3, #6
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	645a      	str	r2, [r3, #68]	; 0x44
 8002148:	e002      	b.n	8002150 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002158:	4b29      	ldr	r3, [pc, #164]	; (8002200 <HAL_ADC_Start_IT+0x174>)
 800215a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002164:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6812      	ldr	r2, [r2, #0]
 8002170:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002174:	f043 0320 	orr.w	r3, r3, #32
 8002178:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 031f 	and.w	r3, r3, #31
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10f      	bne.n	80021a6 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d129      	bne.n	80021e8 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	e020      	b.n	80021e8 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a16      	ldr	r2, [pc, #88]	; (8002204 <HAL_ADC_Start_IT+0x178>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d11b      	bne.n	80021e8 <HAL_ADC_Start_IT+0x15c>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d114      	bne.n	80021e8 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021cc:	609a      	str	r2, [r3, #8]
 80021ce:	e00b      	b.n	80021e8 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	f043 0210 	orr.w	r2, r3, #16
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e0:	f043 0201 	orr.w	r2, r3, #1
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000008 	.word	0x20000008
 80021fc:	431bde83 	.word	0x431bde83
 8002200:	40012300 	.word	0x40012300
 8002204:	40012000 	.word	0x40012000

08002208 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	2300      	movs	r3, #0
 8002216:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f003 0320 	and.w	r3, r3, #32
 8002236:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d049      	beq.n	80022d2 <HAL_ADC_IRQHandler+0xca>
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d046      	beq.n	80022d2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	f003 0310 	and.w	r3, r3, #16
 800224c:	2b00      	cmp	r3, #0
 800224e:	d105      	bne.n	800225c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d12b      	bne.n	80022c2 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800226e:	2b00      	cmp	r3, #0
 8002270:	d127      	bne.n	80022c2 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002278:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800227c:	2b00      	cmp	r3, #0
 800227e:	d006      	beq.n	800228e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800228a:	2b00      	cmp	r3, #0
 800228c:	d119      	bne.n	80022c2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0220 	bic.w	r2, r2, #32
 800229c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d105      	bne.n	80022c2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	f043 0201 	orr.w	r2, r3, #1
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff f880 	bl	80013c8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f06f 0212 	mvn.w	r2, #18
 80022d0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d057      	beq.n	8002398 <HAL_ADC_IRQHandler+0x190>
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d054      	beq.n	8002398 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f003 0310 	and.w	r3, r3, #16
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d105      	bne.n	8002306 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d139      	bne.n	8002388 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800231e:	2b00      	cmp	r3, #0
 8002320:	d006      	beq.n	8002330 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800232c:	2b00      	cmp	r3, #0
 800232e:	d12b      	bne.n	8002388 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800233a:	2b00      	cmp	r3, #0
 800233c:	d124      	bne.n	8002388 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002348:	2b00      	cmp	r3, #0
 800234a:	d11d      	bne.n	8002388 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002350:	2b00      	cmp	r3, #0
 8002352:	d119      	bne.n	8002388 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002362:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002378:	2b00      	cmp	r3, #0
 800237a:	d105      	bne.n	8002388 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	f043 0201 	orr.w	r2, r3, #1
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 fa9d 	bl	80028c8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f06f 020c 	mvn.w	r2, #12
 8002396:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d017      	beq.n	80023de <HAL_ADC_IRQHandler+0x1d6>
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d014      	beq.n	80023de <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d10d      	bne.n	80023de <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f837 	bl	8002442 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f06f 0201 	mvn.w	r2, #1
 80023dc:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f003 0320 	and.w	r3, r3, #32
 80023e4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023ec:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d015      	beq.n	8002420 <HAL_ADC_IRQHandler+0x218>
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d012      	beq.n	8002420 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fe:	f043 0202 	orr.w	r2, r3, #2
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f06f 0220 	mvn.w	r2, #32
 800240e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f820 	bl	8002456 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f06f 0220 	mvn.w	r2, #32
 800241e:	601a      	str	r2, [r3, #0]
  }
}
 8002420:	bf00      	nop
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002480:	2b01      	cmp	r3, #1
 8002482:	d101      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x1c>
 8002484:	2302      	movs	r3, #2
 8002486:	e113      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x244>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b09      	cmp	r3, #9
 8002496:	d925      	bls.n	80024e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68d9      	ldr	r1, [r3, #12]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	461a      	mov	r2, r3
 80024a6:	4613      	mov	r3, r2
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	4413      	add	r3, r2
 80024ac:	3b1e      	subs	r3, #30
 80024ae:	2207      	movs	r2, #7
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43da      	mvns	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	400a      	ands	r2, r1
 80024bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68d9      	ldr	r1, [r3, #12]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	4618      	mov	r0, r3
 80024d0:	4603      	mov	r3, r0
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	4403      	add	r3, r0
 80024d6:	3b1e      	subs	r3, #30
 80024d8:	409a      	lsls	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	60da      	str	r2, [r3, #12]
 80024e2:	e022      	b.n	800252a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6919      	ldr	r1, [r3, #16]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	461a      	mov	r2, r3
 80024f2:	4613      	mov	r3, r2
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	4413      	add	r3, r2
 80024f8:	2207      	movs	r2, #7
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43da      	mvns	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	400a      	ands	r2, r1
 8002506:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6919      	ldr	r1, [r3, #16]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	b29b      	uxth	r3, r3
 8002518:	4618      	mov	r0, r3
 800251a:	4603      	mov	r3, r0
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	4403      	add	r3, r0
 8002520:	409a      	lsls	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b06      	cmp	r3, #6
 8002530:	d824      	bhi.n	800257c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	3b05      	subs	r3, #5
 8002544:	221f      	movs	r2, #31
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43da      	mvns	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	400a      	ands	r2, r1
 8002552:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	b29b      	uxth	r3, r3
 8002560:	4618      	mov	r0, r3
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	3b05      	subs	r3, #5
 800256e:	fa00 f203 	lsl.w	r2, r0, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	635a      	str	r2, [r3, #52]	; 0x34
 800257a:	e04c      	b.n	8002616 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b0c      	cmp	r3, #12
 8002582:	d824      	bhi.n	80025ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	3b23      	subs	r3, #35	; 0x23
 8002596:	221f      	movs	r2, #31
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43da      	mvns	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	400a      	ands	r2, r1
 80025a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	4618      	mov	r0, r3
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	3b23      	subs	r3, #35	; 0x23
 80025c0:	fa00 f203 	lsl.w	r2, r0, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	631a      	str	r2, [r3, #48]	; 0x30
 80025cc:	e023      	b.n	8002616 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	3b41      	subs	r3, #65	; 0x41
 80025e0:	221f      	movs	r2, #31
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43da      	mvns	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	400a      	ands	r2, r1
 80025ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	4618      	mov	r0, r3
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	3b41      	subs	r3, #65	; 0x41
 800260a:	fa00 f203 	lsl.w	r2, r0, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002616:	4b29      	ldr	r3, [pc, #164]	; (80026bc <HAL_ADC_ConfigChannel+0x250>)
 8002618:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a28      	ldr	r2, [pc, #160]	; (80026c0 <HAL_ADC_ConfigChannel+0x254>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d10f      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x1d8>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b12      	cmp	r3, #18
 800262a:	d10b      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a1d      	ldr	r2, [pc, #116]	; (80026c0 <HAL_ADC_ConfigChannel+0x254>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d12b      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x23a>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a1c      	ldr	r2, [pc, #112]	; (80026c4 <HAL_ADC_ConfigChannel+0x258>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d003      	beq.n	8002660 <HAL_ADC_ConfigChannel+0x1f4>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2b11      	cmp	r3, #17
 800265e:	d122      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a11      	ldr	r2, [pc, #68]	; (80026c4 <HAL_ADC_ConfigChannel+0x258>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d111      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002682:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <HAL_ADC_ConfigChannel+0x25c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a11      	ldr	r2, [pc, #68]	; (80026cc <HAL_ADC_ConfigChannel+0x260>)
 8002688:	fba2 2303 	umull	r2, r3, r2, r3
 800268c:	0c9a      	lsrs	r2, r3, #18
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002698:	e002      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	3b01      	subs	r3, #1
 800269e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f9      	bne.n	800269a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	40012300 	.word	0x40012300
 80026c0:	40012000 	.word	0x40012000
 80026c4:	10000012 	.word	0x10000012
 80026c8:	20000008 	.word	0x20000008
 80026cc:	431bde83 	.word	0x431bde83

080026d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026d8:	4b79      	ldr	r3, [pc, #484]	; (80028c0 <ADC_Init+0x1f0>)
 80026da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	431a      	orrs	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002704:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6859      	ldr	r1, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	021a      	lsls	r2, r3, #8
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002728:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6859      	ldr	r1, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800274a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6899      	ldr	r1, [r3, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002762:	4a58      	ldr	r2, [pc, #352]	; (80028c4 <ADC_Init+0x1f4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d022      	beq.n	80027ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002776:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6899      	ldr	r1, [r3, #8]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002798:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6899      	ldr	r1, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	e00f      	b.n	80027ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0202 	bic.w	r2, r2, #2
 80027dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6899      	ldr	r1, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	7e1b      	ldrb	r3, [r3, #24]
 80027e8:	005a      	lsls	r2, r3, #1
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d01b      	beq.n	8002834 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800280a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800281a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6859      	ldr	r1, [r3, #4]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	3b01      	subs	r3, #1
 8002828:	035a      	lsls	r2, r3, #13
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	e007      	b.n	8002844 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002842:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002852:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	3b01      	subs	r3, #1
 8002860:	051a      	lsls	r2, r3, #20
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002878:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6899      	ldr	r1, [r3, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002886:	025a      	lsls	r2, r3, #9
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800289e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6899      	ldr	r1, [r3, #8]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	029a      	lsls	r2, r3, #10
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	609a      	str	r2, [r3, #8]
}
 80028b4:	bf00      	nop
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	40012300 	.word	0x40012300
 80028c4:	0f000001 	.word	0x0f000001

080028c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028ec:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <__NVIC_SetPriorityGrouping+0x44>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028f8:	4013      	ands	r3, r2
 80028fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002904:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800290c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800290e:	4a04      	ldr	r2, [pc, #16]	; (8002920 <__NVIC_SetPriorityGrouping+0x44>)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	60d3      	str	r3, [r2, #12]
}
 8002914:	bf00      	nop
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	e000ed00 	.word	0xe000ed00

08002924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002928:	4b04      	ldr	r3, [pc, #16]	; (800293c <__NVIC_GetPriorityGrouping+0x18>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	0a1b      	lsrs	r3, r3, #8
 800292e:	f003 0307 	and.w	r3, r3, #7
}
 8002932:	4618      	mov	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	2b00      	cmp	r3, #0
 8002950:	db0b      	blt.n	800296a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	f003 021f 	and.w	r2, r3, #31
 8002958:	4907      	ldr	r1, [pc, #28]	; (8002978 <__NVIC_EnableIRQ+0x38>)
 800295a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295e:	095b      	lsrs	r3, r3, #5
 8002960:	2001      	movs	r0, #1
 8002962:	fa00 f202 	lsl.w	r2, r0, r2
 8002966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	e000e100 	.word	0xe000e100

0800297c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	6039      	str	r1, [r7, #0]
 8002986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298c:	2b00      	cmp	r3, #0
 800298e:	db0a      	blt.n	80029a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	b2da      	uxtb	r2, r3
 8002994:	490c      	ldr	r1, [pc, #48]	; (80029c8 <__NVIC_SetPriority+0x4c>)
 8002996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299a:	0112      	lsls	r2, r2, #4
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	440b      	add	r3, r1
 80029a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a4:	e00a      	b.n	80029bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	4908      	ldr	r1, [pc, #32]	; (80029cc <__NVIC_SetPriority+0x50>)
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	3b04      	subs	r3, #4
 80029b4:	0112      	lsls	r2, r2, #4
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	440b      	add	r3, r1
 80029ba:	761a      	strb	r2, [r3, #24]
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	e000e100 	.word	0xe000e100
 80029cc:	e000ed00 	.word	0xe000ed00

080029d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b089      	sub	sp, #36	; 0x24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f1c3 0307 	rsb	r3, r3, #7
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	bf28      	it	cs
 80029ee:	2304      	movcs	r3, #4
 80029f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	3304      	adds	r3, #4
 80029f6:	2b06      	cmp	r3, #6
 80029f8:	d902      	bls.n	8002a00 <NVIC_EncodePriority+0x30>
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	3b03      	subs	r3, #3
 80029fe:	e000      	b.n	8002a02 <NVIC_EncodePriority+0x32>
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43da      	mvns	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	401a      	ands	r2, r3
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a22:	43d9      	mvns	r1, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a28:	4313      	orrs	r3, r2
         );
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3724      	adds	r7, #36	; 0x24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
	...

08002a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a48:	d301      	bcc.n	8002a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e00f      	b.n	8002a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a4e:	4a0a      	ldr	r2, [pc, #40]	; (8002a78 <SysTick_Config+0x40>)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a56:	210f      	movs	r1, #15
 8002a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a5c:	f7ff ff8e 	bl	800297c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a60:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <SysTick_Config+0x40>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a66:	4b04      	ldr	r3, [pc, #16]	; (8002a78 <SysTick_Config+0x40>)
 8002a68:	2207      	movs	r2, #7
 8002a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	e000e010 	.word	0xe000e010

08002a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff ff29 	bl	80028dc <__NVIC_SetPriorityGrouping>
}
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b086      	sub	sp, #24
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	4603      	mov	r3, r0
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
 8002a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aa4:	f7ff ff3e 	bl	8002924 <__NVIC_GetPriorityGrouping>
 8002aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	68b9      	ldr	r1, [r7, #8]
 8002aae:	6978      	ldr	r0, [r7, #20]
 8002ab0:	f7ff ff8e 	bl	80029d0 <NVIC_EncodePriority>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aba:	4611      	mov	r1, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff ff5d 	bl	800297c <__NVIC_SetPriority>
}
 8002ac2:	bf00      	nop
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff ff31 	bl	8002940 <__NVIC_EnableIRQ>
}
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b082      	sub	sp, #8
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff ffa2 	bl	8002a38 <SysTick_Config>
 8002af4:	4603      	mov	r3, r0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b089      	sub	sp, #36	; 0x24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b16:	2300      	movs	r3, #0
 8002b18:	61fb      	str	r3, [r7, #28]
 8002b1a:	e159      	b.n	8002dd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	f040 8148 	bne.w	8002dca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d005      	beq.n	8002b52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d130      	bne.n	8002bb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4013      	ands	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b88:	2201      	movs	r2, #1
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	f003 0201 	and.w	r2, r3, #1
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d017      	beq.n	8002bf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	2203      	movs	r2, #3
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d123      	bne.n	8002c44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	08da      	lsrs	r2, r3, #3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3208      	adds	r2, #8
 8002c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	220f      	movs	r2, #15
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	08da      	lsrs	r2, r3, #3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3208      	adds	r2, #8
 8002c3e:	69b9      	ldr	r1, [r7, #24]
 8002c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	2203      	movs	r2, #3
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 0203 	and.w	r2, r3, #3
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 80a2 	beq.w	8002dca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	4b57      	ldr	r3, [pc, #348]	; (8002de8 <HAL_GPIO_Init+0x2e8>)
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8e:	4a56      	ldr	r2, [pc, #344]	; (8002de8 <HAL_GPIO_Init+0x2e8>)
 8002c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c94:	6453      	str	r3, [r2, #68]	; 0x44
 8002c96:	4b54      	ldr	r3, [pc, #336]	; (8002de8 <HAL_GPIO_Init+0x2e8>)
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ca2:	4a52      	ldr	r2, [pc, #328]	; (8002dec <HAL_GPIO_Init+0x2ec>)
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	089b      	lsrs	r3, r3, #2
 8002ca8:	3302      	adds	r3, #2
 8002caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	220f      	movs	r2, #15
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a49      	ldr	r2, [pc, #292]	; (8002df0 <HAL_GPIO_Init+0x2f0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d019      	beq.n	8002d02 <HAL_GPIO_Init+0x202>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a48      	ldr	r2, [pc, #288]	; (8002df4 <HAL_GPIO_Init+0x2f4>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d013      	beq.n	8002cfe <HAL_GPIO_Init+0x1fe>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a47      	ldr	r2, [pc, #284]	; (8002df8 <HAL_GPIO_Init+0x2f8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00d      	beq.n	8002cfa <HAL_GPIO_Init+0x1fa>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a46      	ldr	r2, [pc, #280]	; (8002dfc <HAL_GPIO_Init+0x2fc>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d007      	beq.n	8002cf6 <HAL_GPIO_Init+0x1f6>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a45      	ldr	r2, [pc, #276]	; (8002e00 <HAL_GPIO_Init+0x300>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <HAL_GPIO_Init+0x1f2>
 8002cee:	2304      	movs	r3, #4
 8002cf0:	e008      	b.n	8002d04 <HAL_GPIO_Init+0x204>
 8002cf2:	2307      	movs	r3, #7
 8002cf4:	e006      	b.n	8002d04 <HAL_GPIO_Init+0x204>
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e004      	b.n	8002d04 <HAL_GPIO_Init+0x204>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e002      	b.n	8002d04 <HAL_GPIO_Init+0x204>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <HAL_GPIO_Init+0x204>
 8002d02:	2300      	movs	r3, #0
 8002d04:	69fa      	ldr	r2, [r7, #28]
 8002d06:	f002 0203 	and.w	r2, r2, #3
 8002d0a:	0092      	lsls	r2, r2, #2
 8002d0c:	4093      	lsls	r3, r2
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d14:	4935      	ldr	r1, [pc, #212]	; (8002dec <HAL_GPIO_Init+0x2ec>)
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	089b      	lsrs	r3, r3, #2
 8002d1a:	3302      	adds	r3, #2
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d22:	4b38      	ldr	r3, [pc, #224]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d46:	4a2f      	ldr	r2, [pc, #188]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d4c:	4b2d      	ldr	r3, [pc, #180]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d70:	4a24      	ldr	r2, [pc, #144]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d76:	4b23      	ldr	r3, [pc, #140]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4013      	ands	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d9a:	4a1a      	ldr	r2, [pc, #104]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002da0:	4b18      	ldr	r3, [pc, #96]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dc4:	4a0f      	ldr	r2, [pc, #60]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	61fb      	str	r3, [r7, #28]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	2b0f      	cmp	r3, #15
 8002dd4:	f67f aea2 	bls.w	8002b1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	3724      	adds	r7, #36	; 0x24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40013800 	.word	0x40013800
 8002df0:	40020000 	.word	0x40020000
 8002df4:	40020400 	.word	0x40020400
 8002df8:	40020800 	.word	0x40020800
 8002dfc:	40020c00 	.word	0x40020c00
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40013c00 	.word	0x40013c00

08002e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	807b      	strh	r3, [r7, #2]
 8002e14:	4613      	mov	r3, r2
 8002e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e18:	787b      	ldrb	r3, [r7, #1]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e1e:	887a      	ldrh	r2, [r7, #2]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e24:	e003      	b.n	8002e2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e26:	887b      	ldrh	r3, [r7, #2]
 8002e28:	041a      	lsls	r2, r3, #16
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	619a      	str	r2, [r3, #24]
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e46:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e48:	695a      	ldr	r2, [r3, #20]
 8002e4a:	88fb      	ldrh	r3, [r7, #6]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d006      	beq.n	8002e60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e52:	4a05      	ldr	r2, [pc, #20]	; (8002e68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e54:	88fb      	ldrh	r3, [r7, #6]
 8002e56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e58:	88fb      	ldrh	r3, [r7, #6]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe fa8a 	bl	8001374 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e60:	bf00      	nop
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40013c00 	.word	0x40013c00

08002e6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e267      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d075      	beq.n	8002f76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e8a:	4b88      	ldr	r3, [pc, #544]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d00c      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e96:	4b85      	ldr	r3, [pc, #532]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d112      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ea2:	4b82      	ldr	r3, [pc, #520]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eae:	d10b      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb0:	4b7e      	ldr	r3, [pc, #504]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d05b      	beq.n	8002f74 <HAL_RCC_OscConfig+0x108>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d157      	bne.n	8002f74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e242      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed0:	d106      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x74>
 8002ed2:	4b76      	ldr	r3, [pc, #472]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a75      	ldr	r2, [pc, #468]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	e01d      	b.n	8002f1c <HAL_RCC_OscConfig+0xb0>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ee8:	d10c      	bne.n	8002f04 <HAL_RCC_OscConfig+0x98>
 8002eea:	4b70      	ldr	r3, [pc, #448]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a6f      	ldr	r2, [pc, #444]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	4b6d      	ldr	r3, [pc, #436]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a6c      	ldr	r2, [pc, #432]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	e00b      	b.n	8002f1c <HAL_RCC_OscConfig+0xb0>
 8002f04:	4b69      	ldr	r3, [pc, #420]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a68      	ldr	r2, [pc, #416]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	4b66      	ldr	r3, [pc, #408]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a65      	ldr	r2, [pc, #404]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d013      	beq.n	8002f4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f24:	f7ff f862 	bl	8001fec <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f2c:	f7ff f85e 	bl	8001fec <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b64      	cmp	r3, #100	; 0x64
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e207      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3e:	4b5b      	ldr	r3, [pc, #364]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCC_OscConfig+0xc0>
 8002f4a:	e014      	b.n	8002f76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4c:	f7ff f84e 	bl	8001fec <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f54:	f7ff f84a 	bl	8001fec <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b64      	cmp	r3, #100	; 0x64
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e1f3      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f66:	4b51      	ldr	r3, [pc, #324]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0xe8>
 8002f72:	e000      	b.n	8002f76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d063      	beq.n	800304a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f82:	4b4a      	ldr	r3, [pc, #296]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 030c 	and.w	r3, r3, #12
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00b      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f8e:	4b47      	ldr	r3, [pc, #284]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d11c      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f9a:	4b44      	ldr	r3, [pc, #272]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d116      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fa6:	4b41      	ldr	r3, [pc, #260]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d005      	beq.n	8002fbe <HAL_RCC_OscConfig+0x152>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d001      	beq.n	8002fbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e1c7      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fbe:	4b3b      	ldr	r3, [pc, #236]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	4937      	ldr	r1, [pc, #220]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd2:	e03a      	b.n	800304a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d020      	beq.n	800301e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fdc:	4b34      	ldr	r3, [pc, #208]	; (80030b0 <HAL_RCC_OscConfig+0x244>)
 8002fde:	2201      	movs	r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe2:	f7ff f803 	bl	8001fec <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fea:	f7fe ffff 	bl	8001fec <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e1a8      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffc:	4b2b      	ldr	r3, [pc, #172]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0f0      	beq.n	8002fea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003008:	4b28      	ldr	r3, [pc, #160]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4925      	ldr	r1, [pc, #148]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8003018:	4313      	orrs	r3, r2
 800301a:	600b      	str	r3, [r1, #0]
 800301c:	e015      	b.n	800304a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800301e:	4b24      	ldr	r3, [pc, #144]	; (80030b0 <HAL_RCC_OscConfig+0x244>)
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003024:	f7fe ffe2 	bl	8001fec <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800302c:	f7fe ffde 	bl	8001fec <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e187      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303e:	4b1b      	ldr	r3, [pc, #108]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d036      	beq.n	80030c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d016      	beq.n	800308c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800305e:	4b15      	ldr	r3, [pc, #84]	; (80030b4 <HAL_RCC_OscConfig+0x248>)
 8003060:	2201      	movs	r2, #1
 8003062:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003064:	f7fe ffc2 	bl	8001fec <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800306c:	f7fe ffbe 	bl	8001fec <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e167      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307e:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8003080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCC_OscConfig+0x200>
 800308a:	e01b      	b.n	80030c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800308c:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <HAL_RCC_OscConfig+0x248>)
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003092:	f7fe ffab 	bl	8001fec <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003098:	e00e      	b.n	80030b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800309a:	f7fe ffa7 	bl	8001fec <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d907      	bls.n	80030b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e150      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
 80030ac:	40023800 	.word	0x40023800
 80030b0:	42470000 	.word	0x42470000
 80030b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b8:	4b88      	ldr	r3, [pc, #544]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 80030ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1ea      	bne.n	800309a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 8097 	beq.w	8003200 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030d2:	2300      	movs	r3, #0
 80030d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030d6:	4b81      	ldr	r3, [pc, #516]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10f      	bne.n	8003102 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	4b7d      	ldr	r3, [pc, #500]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	4a7c      	ldr	r2, [pc, #496]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 80030ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f0:	6413      	str	r3, [r2, #64]	; 0x40
 80030f2:	4b7a      	ldr	r3, [pc, #488]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fa:	60bb      	str	r3, [r7, #8]
 80030fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030fe:	2301      	movs	r3, #1
 8003100:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003102:	4b77      	ldr	r3, [pc, #476]	; (80032e0 <HAL_RCC_OscConfig+0x474>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310a:	2b00      	cmp	r3, #0
 800310c:	d118      	bne.n	8003140 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800310e:	4b74      	ldr	r3, [pc, #464]	; (80032e0 <HAL_RCC_OscConfig+0x474>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a73      	ldr	r2, [pc, #460]	; (80032e0 <HAL_RCC_OscConfig+0x474>)
 8003114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003118:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800311a:	f7fe ff67 	bl	8001fec <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003122:	f7fe ff63 	bl	8001fec <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e10c      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003134:	4b6a      	ldr	r3, [pc, #424]	; (80032e0 <HAL_RCC_OscConfig+0x474>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0f0      	beq.n	8003122 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d106      	bne.n	8003156 <HAL_RCC_OscConfig+0x2ea>
 8003148:	4b64      	ldr	r3, [pc, #400]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 800314a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314c:	4a63      	ldr	r2, [pc, #396]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	6713      	str	r3, [r2, #112]	; 0x70
 8003154:	e01c      	b.n	8003190 <HAL_RCC_OscConfig+0x324>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	2b05      	cmp	r3, #5
 800315c:	d10c      	bne.n	8003178 <HAL_RCC_OscConfig+0x30c>
 800315e:	4b5f      	ldr	r3, [pc, #380]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 8003160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003162:	4a5e      	ldr	r2, [pc, #376]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 8003164:	f043 0304 	orr.w	r3, r3, #4
 8003168:	6713      	str	r3, [r2, #112]	; 0x70
 800316a:	4b5c      	ldr	r3, [pc, #368]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 800316c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316e:	4a5b      	ldr	r2, [pc, #364]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	6713      	str	r3, [r2, #112]	; 0x70
 8003176:	e00b      	b.n	8003190 <HAL_RCC_OscConfig+0x324>
 8003178:	4b58      	ldr	r3, [pc, #352]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 800317a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317c:	4a57      	ldr	r2, [pc, #348]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 800317e:	f023 0301 	bic.w	r3, r3, #1
 8003182:	6713      	str	r3, [r2, #112]	; 0x70
 8003184:	4b55      	ldr	r3, [pc, #340]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 8003186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003188:	4a54      	ldr	r2, [pc, #336]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 800318a:	f023 0304 	bic.w	r3, r3, #4
 800318e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d015      	beq.n	80031c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003198:	f7fe ff28 	bl	8001fec <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800319e:	e00a      	b.n	80031b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031a0:	f7fe ff24 	bl	8001fec <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e0cb      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b6:	4b49      	ldr	r3, [pc, #292]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 80031b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0ee      	beq.n	80031a0 <HAL_RCC_OscConfig+0x334>
 80031c2:	e014      	b.n	80031ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c4:	f7fe ff12 	bl	8001fec <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ca:	e00a      	b.n	80031e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031cc:	f7fe ff0e 	bl	8001fec <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031da:	4293      	cmp	r3, r2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e0b5      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e2:	4b3e      	ldr	r3, [pc, #248]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 80031e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1ee      	bne.n	80031cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031ee:	7dfb      	ldrb	r3, [r7, #23]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d105      	bne.n	8003200 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f4:	4b39      	ldr	r3, [pc, #228]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	4a38      	ldr	r2, [pc, #224]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 80031fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 80a1 	beq.w	800334c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800320a:	4b34      	ldr	r3, [pc, #208]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 030c 	and.w	r3, r3, #12
 8003212:	2b08      	cmp	r3, #8
 8003214:	d05c      	beq.n	80032d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	2b02      	cmp	r3, #2
 800321c:	d141      	bne.n	80032a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800321e:	4b31      	ldr	r3, [pc, #196]	; (80032e4 <HAL_RCC_OscConfig+0x478>)
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003224:	f7fe fee2 	bl	8001fec <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800322c:	f7fe fede 	bl	8001fec <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e087      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323e:	4b27      	ldr	r3, [pc, #156]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f0      	bne.n	800322c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69da      	ldr	r2, [r3, #28]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	019b      	lsls	r3, r3, #6
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003260:	085b      	lsrs	r3, r3, #1
 8003262:	3b01      	subs	r3, #1
 8003264:	041b      	lsls	r3, r3, #16
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	061b      	lsls	r3, r3, #24
 800326e:	491b      	ldr	r1, [pc, #108]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 8003270:	4313      	orrs	r3, r2
 8003272:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003274:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <HAL_RCC_OscConfig+0x478>)
 8003276:	2201      	movs	r2, #1
 8003278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327a:	f7fe feb7 	bl	8001fec <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003282:	f7fe feb3 	bl	8001fec <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e05c      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003294:	4b11      	ldr	r3, [pc, #68]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0f0      	beq.n	8003282 <HAL_RCC_OscConfig+0x416>
 80032a0:	e054      	b.n	800334c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a2:	4b10      	ldr	r3, [pc, #64]	; (80032e4 <HAL_RCC_OscConfig+0x478>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a8:	f7fe fea0 	bl	8001fec <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b0:	f7fe fe9c 	bl	8001fec <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e045      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c2:	4b06      	ldr	r3, [pc, #24]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x444>
 80032ce:	e03d      	b.n	800334c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d107      	bne.n	80032e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e038      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
 80032dc:	40023800 	.word	0x40023800
 80032e0:	40007000 	.word	0x40007000
 80032e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032e8:	4b1b      	ldr	r3, [pc, #108]	; (8003358 <HAL_RCC_OscConfig+0x4ec>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d028      	beq.n	8003348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003300:	429a      	cmp	r2, r3
 8003302:	d121      	bne.n	8003348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800330e:	429a      	cmp	r2, r3
 8003310:	d11a      	bne.n	8003348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003318:	4013      	ands	r3, r2
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800331e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003320:	4293      	cmp	r3, r2
 8003322:	d111      	bne.n	8003348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332e:	085b      	lsrs	r3, r3, #1
 8003330:	3b01      	subs	r3, #1
 8003332:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003334:	429a      	cmp	r2, r3
 8003336:	d107      	bne.n	8003348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003342:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003344:	429a      	cmp	r2, r3
 8003346:	d001      	beq.n	800334c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e000      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	40023800 	.word	0x40023800

0800335c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e0cc      	b.n	800350a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003370:	4b68      	ldr	r3, [pc, #416]	; (8003514 <HAL_RCC_ClockConfig+0x1b8>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	429a      	cmp	r2, r3
 800337c:	d90c      	bls.n	8003398 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337e:	4b65      	ldr	r3, [pc, #404]	; (8003514 <HAL_RCC_ClockConfig+0x1b8>)
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	4b63      	ldr	r3, [pc, #396]	; (8003514 <HAL_RCC_ClockConfig+0x1b8>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0b8      	b.n	800350a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d020      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033b0:	4b59      	ldr	r3, [pc, #356]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	4a58      	ldr	r2, [pc, #352]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d005      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033c8:	4b53      	ldr	r3, [pc, #332]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	4a52      	ldr	r2, [pc, #328]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d4:	4b50      	ldr	r3, [pc, #320]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	494d      	ldr	r1, [pc, #308]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d044      	beq.n	800347c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d107      	bne.n	800340a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fa:	4b47      	ldr	r3, [pc, #284]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d119      	bne.n	800343a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e07f      	b.n	800350a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d003      	beq.n	800341a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003416:	2b03      	cmp	r3, #3
 8003418:	d107      	bne.n	800342a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341a:	4b3f      	ldr	r3, [pc, #252]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d109      	bne.n	800343a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e06f      	b.n	800350a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342a:	4b3b      	ldr	r3, [pc, #236]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e067      	b.n	800350a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800343a:	4b37      	ldr	r3, [pc, #220]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f023 0203 	bic.w	r2, r3, #3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	4934      	ldr	r1, [pc, #208]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 8003448:	4313      	orrs	r3, r2
 800344a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800344c:	f7fe fdce 	bl	8001fec <HAL_GetTick>
 8003450:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003452:	e00a      	b.n	800346a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003454:	f7fe fdca 	bl	8001fec <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003462:	4293      	cmp	r3, r2
 8003464:	d901      	bls.n	800346a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e04f      	b.n	800350a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346a:	4b2b      	ldr	r3, [pc, #172]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 020c 	and.w	r2, r3, #12
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	429a      	cmp	r2, r3
 800347a:	d1eb      	bne.n	8003454 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800347c:	4b25      	ldr	r3, [pc, #148]	; (8003514 <HAL_RCC_ClockConfig+0x1b8>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	429a      	cmp	r2, r3
 8003488:	d20c      	bcs.n	80034a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348a:	4b22      	ldr	r3, [pc, #136]	; (8003514 <HAL_RCC_ClockConfig+0x1b8>)
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003492:	4b20      	ldr	r3, [pc, #128]	; (8003514 <HAL_RCC_ClockConfig+0x1b8>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	429a      	cmp	r2, r3
 800349e:	d001      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e032      	b.n	800350a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d008      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034b0:	4b19      	ldr	r3, [pc, #100]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	4916      	ldr	r1, [pc, #88]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d009      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ce:	4b12      	ldr	r3, [pc, #72]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	490e      	ldr	r1, [pc, #56]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034e2:	f000 f821 	bl	8003528 <HAL_RCC_GetSysClockFreq>
 80034e6:	4602      	mov	r2, r0
 80034e8:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	091b      	lsrs	r3, r3, #4
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	490a      	ldr	r1, [pc, #40]	; (800351c <HAL_RCC_ClockConfig+0x1c0>)
 80034f4:	5ccb      	ldrb	r3, [r1, r3]
 80034f6:	fa22 f303 	lsr.w	r3, r2, r3
 80034fa:	4a09      	ldr	r2, [pc, #36]	; (8003520 <HAL_RCC_ClockConfig+0x1c4>)
 80034fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034fe:	4b09      	ldr	r3, [pc, #36]	; (8003524 <HAL_RCC_ClockConfig+0x1c8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f7fe fd2e 	bl	8001f64 <HAL_InitTick>

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40023c00 	.word	0x40023c00
 8003518:	40023800 	.word	0x40023800
 800351c:	08005804 	.word	0x08005804
 8003520:	20000008 	.word	0x20000008
 8003524:	2000000c 	.word	0x2000000c

08003528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800352c:	b094      	sub	sp, #80	; 0x50
 800352e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003530:	2300      	movs	r3, #0
 8003532:	647b      	str	r3, [r7, #68]	; 0x44
 8003534:	2300      	movs	r3, #0
 8003536:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003538:	2300      	movs	r3, #0
 800353a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003540:	4b79      	ldr	r3, [pc, #484]	; (8003728 <HAL_RCC_GetSysClockFreq+0x200>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 030c 	and.w	r3, r3, #12
 8003548:	2b08      	cmp	r3, #8
 800354a:	d00d      	beq.n	8003568 <HAL_RCC_GetSysClockFreq+0x40>
 800354c:	2b08      	cmp	r3, #8
 800354e:	f200 80e1 	bhi.w	8003714 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003552:	2b00      	cmp	r3, #0
 8003554:	d002      	beq.n	800355c <HAL_RCC_GetSysClockFreq+0x34>
 8003556:	2b04      	cmp	r3, #4
 8003558:	d003      	beq.n	8003562 <HAL_RCC_GetSysClockFreq+0x3a>
 800355a:	e0db      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800355c:	4b73      	ldr	r3, [pc, #460]	; (800372c <HAL_RCC_GetSysClockFreq+0x204>)
 800355e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003560:	e0db      	b.n	800371a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003562:	4b73      	ldr	r3, [pc, #460]	; (8003730 <HAL_RCC_GetSysClockFreq+0x208>)
 8003564:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003566:	e0d8      	b.n	800371a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003568:	4b6f      	ldr	r3, [pc, #444]	; (8003728 <HAL_RCC_GetSysClockFreq+0x200>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003570:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003572:	4b6d      	ldr	r3, [pc, #436]	; (8003728 <HAL_RCC_GetSysClockFreq+0x200>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d063      	beq.n	8003646 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800357e:	4b6a      	ldr	r3, [pc, #424]	; (8003728 <HAL_RCC_GetSysClockFreq+0x200>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	099b      	lsrs	r3, r3, #6
 8003584:	2200      	movs	r2, #0
 8003586:	63bb      	str	r3, [r7, #56]	; 0x38
 8003588:	63fa      	str	r2, [r7, #60]	; 0x3c
 800358a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003590:	633b      	str	r3, [r7, #48]	; 0x30
 8003592:	2300      	movs	r3, #0
 8003594:	637b      	str	r3, [r7, #52]	; 0x34
 8003596:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800359a:	4622      	mov	r2, r4
 800359c:	462b      	mov	r3, r5
 800359e:	f04f 0000 	mov.w	r0, #0
 80035a2:	f04f 0100 	mov.w	r1, #0
 80035a6:	0159      	lsls	r1, r3, #5
 80035a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035ac:	0150      	lsls	r0, r2, #5
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4621      	mov	r1, r4
 80035b4:	1a51      	subs	r1, r2, r1
 80035b6:	6139      	str	r1, [r7, #16]
 80035b8:	4629      	mov	r1, r5
 80035ba:	eb63 0301 	sbc.w	r3, r3, r1
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035cc:	4659      	mov	r1, fp
 80035ce:	018b      	lsls	r3, r1, #6
 80035d0:	4651      	mov	r1, sl
 80035d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035d6:	4651      	mov	r1, sl
 80035d8:	018a      	lsls	r2, r1, #6
 80035da:	4651      	mov	r1, sl
 80035dc:	ebb2 0801 	subs.w	r8, r2, r1
 80035e0:	4659      	mov	r1, fp
 80035e2:	eb63 0901 	sbc.w	r9, r3, r1
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	f04f 0300 	mov.w	r3, #0
 80035ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035fa:	4690      	mov	r8, r2
 80035fc:	4699      	mov	r9, r3
 80035fe:	4623      	mov	r3, r4
 8003600:	eb18 0303 	adds.w	r3, r8, r3
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	462b      	mov	r3, r5
 8003608:	eb49 0303 	adc.w	r3, r9, r3
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800361a:	4629      	mov	r1, r5
 800361c:	024b      	lsls	r3, r1, #9
 800361e:	4621      	mov	r1, r4
 8003620:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003624:	4621      	mov	r1, r4
 8003626:	024a      	lsls	r2, r1, #9
 8003628:	4610      	mov	r0, r2
 800362a:	4619      	mov	r1, r3
 800362c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800362e:	2200      	movs	r2, #0
 8003630:	62bb      	str	r3, [r7, #40]	; 0x28
 8003632:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003634:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003638:	f7fd fa10 	bl	8000a5c <__aeabi_uldivmod>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4613      	mov	r3, r2
 8003642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003644:	e058      	b.n	80036f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003646:	4b38      	ldr	r3, [pc, #224]	; (8003728 <HAL_RCC_GetSysClockFreq+0x200>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	099b      	lsrs	r3, r3, #6
 800364c:	2200      	movs	r2, #0
 800364e:	4618      	mov	r0, r3
 8003650:	4611      	mov	r1, r2
 8003652:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003656:	623b      	str	r3, [r7, #32]
 8003658:	2300      	movs	r3, #0
 800365a:	627b      	str	r3, [r7, #36]	; 0x24
 800365c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003660:	4642      	mov	r2, r8
 8003662:	464b      	mov	r3, r9
 8003664:	f04f 0000 	mov.w	r0, #0
 8003668:	f04f 0100 	mov.w	r1, #0
 800366c:	0159      	lsls	r1, r3, #5
 800366e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003672:	0150      	lsls	r0, r2, #5
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	4641      	mov	r1, r8
 800367a:	ebb2 0a01 	subs.w	sl, r2, r1
 800367e:	4649      	mov	r1, r9
 8003680:	eb63 0b01 	sbc.w	fp, r3, r1
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	f04f 0300 	mov.w	r3, #0
 800368c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003690:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003694:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003698:	ebb2 040a 	subs.w	r4, r2, sl
 800369c:	eb63 050b 	sbc.w	r5, r3, fp
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	f04f 0300 	mov.w	r3, #0
 80036a8:	00eb      	lsls	r3, r5, #3
 80036aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036ae:	00e2      	lsls	r2, r4, #3
 80036b0:	4614      	mov	r4, r2
 80036b2:	461d      	mov	r5, r3
 80036b4:	4643      	mov	r3, r8
 80036b6:	18e3      	adds	r3, r4, r3
 80036b8:	603b      	str	r3, [r7, #0]
 80036ba:	464b      	mov	r3, r9
 80036bc:	eb45 0303 	adc.w	r3, r5, r3
 80036c0:	607b      	str	r3, [r7, #4]
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036ce:	4629      	mov	r1, r5
 80036d0:	028b      	lsls	r3, r1, #10
 80036d2:	4621      	mov	r1, r4
 80036d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036d8:	4621      	mov	r1, r4
 80036da:	028a      	lsls	r2, r1, #10
 80036dc:	4610      	mov	r0, r2
 80036de:	4619      	mov	r1, r3
 80036e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036e2:	2200      	movs	r2, #0
 80036e4:	61bb      	str	r3, [r7, #24]
 80036e6:	61fa      	str	r2, [r7, #28]
 80036e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036ec:	f7fd f9b6 	bl	8000a5c <__aeabi_uldivmod>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4613      	mov	r3, r2
 80036f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036f8:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <HAL_RCC_GetSysClockFreq+0x200>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	0c1b      	lsrs	r3, r3, #16
 80036fe:	f003 0303 	and.w	r3, r3, #3
 8003702:	3301      	adds	r3, #1
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003708:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800370a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800370c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003710:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003712:	e002      	b.n	800371a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003714:	4b05      	ldr	r3, [pc, #20]	; (800372c <HAL_RCC_GetSysClockFreq+0x204>)
 8003716:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003718:	bf00      	nop
    }
  }
  return sysclockfreq;
 800371a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800371c:	4618      	mov	r0, r3
 800371e:	3750      	adds	r7, #80	; 0x50
 8003720:	46bd      	mov	sp, r7
 8003722:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003726:	bf00      	nop
 8003728:	40023800 	.word	0x40023800
 800372c:	00f42400 	.word	0x00f42400
 8003730:	007a1200 	.word	0x007a1200

08003734 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003738:	4b03      	ldr	r3, [pc, #12]	; (8003748 <HAL_RCC_GetHCLKFreq+0x14>)
 800373a:	681b      	ldr	r3, [r3, #0]
}
 800373c:	4618      	mov	r0, r3
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	20000008 	.word	0x20000008

0800374c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003750:	f7ff fff0 	bl	8003734 <HAL_RCC_GetHCLKFreq>
 8003754:	4602      	mov	r2, r0
 8003756:	4b05      	ldr	r3, [pc, #20]	; (800376c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	0a9b      	lsrs	r3, r3, #10
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	4903      	ldr	r1, [pc, #12]	; (8003770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003762:	5ccb      	ldrb	r3, [r1, r3]
 8003764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003768:	4618      	mov	r0, r3
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40023800 	.word	0x40023800
 8003770:	08005814 	.word	0x08005814

08003774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003778:	f7ff ffdc 	bl	8003734 <HAL_RCC_GetHCLKFreq>
 800377c:	4602      	mov	r2, r0
 800377e:	4b05      	ldr	r3, [pc, #20]	; (8003794 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	0b5b      	lsrs	r3, r3, #13
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	4903      	ldr	r1, [pc, #12]	; (8003798 <HAL_RCC_GetPCLK2Freq+0x24>)
 800378a:	5ccb      	ldrb	r3, [r1, r3]
 800378c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003790:	4618      	mov	r0, r3
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40023800 	.word	0x40023800
 8003798:	08005814 	.word	0x08005814

0800379c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e041      	b.n	8003832 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d106      	bne.n	80037c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7fe f9d2 	bl	8001b6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3304      	adds	r3, #4
 80037d8:	4619      	mov	r1, r3
 80037da:	4610      	mov	r0, r2
 80037dc:	f000 fae2 	bl	8003da4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b01      	cmp	r3, #1
 800384e:	d001      	beq.n	8003854 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e03c      	b.n	80038ce <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a1e      	ldr	r2, [pc, #120]	; (80038dc <HAL_TIM_Base_Start+0xa0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d018      	beq.n	8003898 <HAL_TIM_Base_Start+0x5c>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386e:	d013      	beq.n	8003898 <HAL_TIM_Base_Start+0x5c>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a1a      	ldr	r2, [pc, #104]	; (80038e0 <HAL_TIM_Base_Start+0xa4>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00e      	beq.n	8003898 <HAL_TIM_Base_Start+0x5c>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a19      	ldr	r2, [pc, #100]	; (80038e4 <HAL_TIM_Base_Start+0xa8>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d009      	beq.n	8003898 <HAL_TIM_Base_Start+0x5c>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a17      	ldr	r2, [pc, #92]	; (80038e8 <HAL_TIM_Base_Start+0xac>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d004      	beq.n	8003898 <HAL_TIM_Base_Start+0x5c>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a16      	ldr	r2, [pc, #88]	; (80038ec <HAL_TIM_Base_Start+0xb0>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d111      	bne.n	80038bc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2b06      	cmp	r3, #6
 80038a8:	d010      	beq.n	80038cc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f042 0201 	orr.w	r2, r2, #1
 80038b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ba:	e007      	b.n	80038cc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0201 	orr.w	r2, r2, #1
 80038ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40010000 	.word	0x40010000
 80038e0:	40000400 	.word	0x40000400
 80038e4:	40000800 	.word	0x40000800
 80038e8:	40000c00 	.word	0x40000c00
 80038ec:	40014000 	.word	0x40014000

080038f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b01      	cmp	r3, #1
 8003902:	d001      	beq.n	8003908 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e044      	b.n	8003992 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0201 	orr.w	r2, r2, #1
 800391e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a1e      	ldr	r2, [pc, #120]	; (80039a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d018      	beq.n	800395c <HAL_TIM_Base_Start_IT+0x6c>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003932:	d013      	beq.n	800395c <HAL_TIM_Base_Start_IT+0x6c>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a1a      	ldr	r2, [pc, #104]	; (80039a4 <HAL_TIM_Base_Start_IT+0xb4>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00e      	beq.n	800395c <HAL_TIM_Base_Start_IT+0x6c>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a19      	ldr	r2, [pc, #100]	; (80039a8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d009      	beq.n	800395c <HAL_TIM_Base_Start_IT+0x6c>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a17      	ldr	r2, [pc, #92]	; (80039ac <HAL_TIM_Base_Start_IT+0xbc>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d004      	beq.n	800395c <HAL_TIM_Base_Start_IT+0x6c>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a16      	ldr	r2, [pc, #88]	; (80039b0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d111      	bne.n	8003980 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2b06      	cmp	r3, #6
 800396c:	d010      	beq.n	8003990 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f042 0201 	orr.w	r2, r2, #1
 800397c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800397e:	e007      	b.n	8003990 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0201 	orr.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40010000 	.word	0x40010000
 80039a4:	40000400 	.word	0x40000400
 80039a8:	40000800 	.word	0x40000800
 80039ac:	40000c00 	.word	0x40000c00
 80039b0:	40014000 	.word	0x40014000

080039b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d122      	bne.n	8003a10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d11b      	bne.n	8003a10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f06f 0202 	mvn.w	r2, #2
 80039e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	f003 0303 	and.w	r3, r3, #3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f9b5 	bl	8003d66 <HAL_TIM_IC_CaptureCallback>
 80039fc:	e005      	b.n	8003a0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f9a7 	bl	8003d52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f9b8 	bl	8003d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d122      	bne.n	8003a64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b04      	cmp	r3, #4
 8003a2a:	d11b      	bne.n	8003a64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f06f 0204 	mvn.w	r2, #4
 8003a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2202      	movs	r2, #2
 8003a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f98b 	bl	8003d66 <HAL_TIM_IC_CaptureCallback>
 8003a50:	e005      	b.n	8003a5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f97d 	bl	8003d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f98e 	bl	8003d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d122      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f003 0308 	and.w	r3, r3, #8
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d11b      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f06f 0208 	mvn.w	r2, #8
 8003a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2204      	movs	r2, #4
 8003a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f961 	bl	8003d66 <HAL_TIM_IC_CaptureCallback>
 8003aa4:	e005      	b.n	8003ab2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f953 	bl	8003d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f964 	bl	8003d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0310 	and.w	r3, r3, #16
 8003ac2:	2b10      	cmp	r3, #16
 8003ac4:	d122      	bne.n	8003b0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0310 	and.w	r3, r3, #16
 8003ad0:	2b10      	cmp	r3, #16
 8003ad2:	d11b      	bne.n	8003b0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 0210 	mvn.w	r2, #16
 8003adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2208      	movs	r2, #8
 8003ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f937 	bl	8003d66 <HAL_TIM_IC_CaptureCallback>
 8003af8:	e005      	b.n	8003b06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f929 	bl	8003d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f93a 	bl	8003d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d10e      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d107      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0201 	mvn.w	r2, #1
 8003b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7fd fbdc 	bl	80012f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b42:	2b80      	cmp	r3, #128	; 0x80
 8003b44:	d10e      	bne.n	8003b64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b50:	2b80      	cmp	r3, #128	; 0x80
 8003b52:	d107      	bne.n	8003b64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 fab2 	bl	80040c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6e:	2b40      	cmp	r3, #64	; 0x40
 8003b70:	d10e      	bne.n	8003b90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7c:	2b40      	cmp	r3, #64	; 0x40
 8003b7e:	d107      	bne.n	8003b90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f8ff 	bl	8003d8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f003 0320 	and.w	r3, r3, #32
 8003b9a:	2b20      	cmp	r3, #32
 8003b9c:	d10e      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f003 0320 	and.w	r3, r3, #32
 8003ba8:	2b20      	cmp	r3, #32
 8003baa:	d107      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f06f 0220 	mvn.w	r2, #32
 8003bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 fa7c 	bl	80040b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bbc:	bf00      	nop
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_TIM_ConfigClockSource+0x1c>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e0b4      	b.n	8003d4a <HAL_TIM_ConfigClockSource+0x186>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c18:	d03e      	beq.n	8003c98 <HAL_TIM_ConfigClockSource+0xd4>
 8003c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c1e:	f200 8087 	bhi.w	8003d30 <HAL_TIM_ConfigClockSource+0x16c>
 8003c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c26:	f000 8086 	beq.w	8003d36 <HAL_TIM_ConfigClockSource+0x172>
 8003c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c2e:	d87f      	bhi.n	8003d30 <HAL_TIM_ConfigClockSource+0x16c>
 8003c30:	2b70      	cmp	r3, #112	; 0x70
 8003c32:	d01a      	beq.n	8003c6a <HAL_TIM_ConfigClockSource+0xa6>
 8003c34:	2b70      	cmp	r3, #112	; 0x70
 8003c36:	d87b      	bhi.n	8003d30 <HAL_TIM_ConfigClockSource+0x16c>
 8003c38:	2b60      	cmp	r3, #96	; 0x60
 8003c3a:	d050      	beq.n	8003cde <HAL_TIM_ConfigClockSource+0x11a>
 8003c3c:	2b60      	cmp	r3, #96	; 0x60
 8003c3e:	d877      	bhi.n	8003d30 <HAL_TIM_ConfigClockSource+0x16c>
 8003c40:	2b50      	cmp	r3, #80	; 0x50
 8003c42:	d03c      	beq.n	8003cbe <HAL_TIM_ConfigClockSource+0xfa>
 8003c44:	2b50      	cmp	r3, #80	; 0x50
 8003c46:	d873      	bhi.n	8003d30 <HAL_TIM_ConfigClockSource+0x16c>
 8003c48:	2b40      	cmp	r3, #64	; 0x40
 8003c4a:	d058      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x13a>
 8003c4c:	2b40      	cmp	r3, #64	; 0x40
 8003c4e:	d86f      	bhi.n	8003d30 <HAL_TIM_ConfigClockSource+0x16c>
 8003c50:	2b30      	cmp	r3, #48	; 0x30
 8003c52:	d064      	beq.n	8003d1e <HAL_TIM_ConfigClockSource+0x15a>
 8003c54:	2b30      	cmp	r3, #48	; 0x30
 8003c56:	d86b      	bhi.n	8003d30 <HAL_TIM_ConfigClockSource+0x16c>
 8003c58:	2b20      	cmp	r3, #32
 8003c5a:	d060      	beq.n	8003d1e <HAL_TIM_ConfigClockSource+0x15a>
 8003c5c:	2b20      	cmp	r3, #32
 8003c5e:	d867      	bhi.n	8003d30 <HAL_TIM_ConfigClockSource+0x16c>
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d05c      	beq.n	8003d1e <HAL_TIM_ConfigClockSource+0x15a>
 8003c64:	2b10      	cmp	r3, #16
 8003c66:	d05a      	beq.n	8003d1e <HAL_TIM_ConfigClockSource+0x15a>
 8003c68:	e062      	b.n	8003d30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6818      	ldr	r0, [r3, #0]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	6899      	ldr	r1, [r3, #8]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f000 f98d 	bl	8003f98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	609a      	str	r2, [r3, #8]
      break;
 8003c96:	e04f      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6818      	ldr	r0, [r3, #0]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	6899      	ldr	r1, [r3, #8]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f000 f976 	bl	8003f98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cba:	609a      	str	r2, [r3, #8]
      break;
 8003cbc:	e03c      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6818      	ldr	r0, [r3, #0]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	6859      	ldr	r1, [r3, #4]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	f000 f8ea 	bl	8003ea4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2150      	movs	r1, #80	; 0x50
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 f943 	bl	8003f62 <TIM_ITRx_SetConfig>
      break;
 8003cdc:	e02c      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6818      	ldr	r0, [r3, #0]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	6859      	ldr	r1, [r3, #4]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	461a      	mov	r2, r3
 8003cec:	f000 f909 	bl	8003f02 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2160      	movs	r1, #96	; 0x60
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 f933 	bl	8003f62 <TIM_ITRx_SetConfig>
      break;
 8003cfc:	e01c      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	6859      	ldr	r1, [r3, #4]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	f000 f8ca 	bl	8003ea4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2140      	movs	r1, #64	; 0x40
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 f923 	bl	8003f62 <TIM_ITRx_SetConfig>
      break;
 8003d1c:	e00c      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4619      	mov	r1, r3
 8003d28:	4610      	mov	r0, r2
 8003d2a:	f000 f91a 	bl	8003f62 <TIM_ITRx_SetConfig>
      break;
 8003d2e:	e003      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	73fb      	strb	r3, [r7, #15]
      break;
 8003d34:	e000      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
	...

08003da4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a34      	ldr	r2, [pc, #208]	; (8003e88 <TIM_Base_SetConfig+0xe4>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d00f      	beq.n	8003ddc <TIM_Base_SetConfig+0x38>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc2:	d00b      	beq.n	8003ddc <TIM_Base_SetConfig+0x38>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a31      	ldr	r2, [pc, #196]	; (8003e8c <TIM_Base_SetConfig+0xe8>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d007      	beq.n	8003ddc <TIM_Base_SetConfig+0x38>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a30      	ldr	r2, [pc, #192]	; (8003e90 <TIM_Base_SetConfig+0xec>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d003      	beq.n	8003ddc <TIM_Base_SetConfig+0x38>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a2f      	ldr	r2, [pc, #188]	; (8003e94 <TIM_Base_SetConfig+0xf0>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d108      	bne.n	8003dee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a25      	ldr	r2, [pc, #148]	; (8003e88 <TIM_Base_SetConfig+0xe4>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d01b      	beq.n	8003e2e <TIM_Base_SetConfig+0x8a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dfc:	d017      	beq.n	8003e2e <TIM_Base_SetConfig+0x8a>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a22      	ldr	r2, [pc, #136]	; (8003e8c <TIM_Base_SetConfig+0xe8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d013      	beq.n	8003e2e <TIM_Base_SetConfig+0x8a>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a21      	ldr	r2, [pc, #132]	; (8003e90 <TIM_Base_SetConfig+0xec>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d00f      	beq.n	8003e2e <TIM_Base_SetConfig+0x8a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a20      	ldr	r2, [pc, #128]	; (8003e94 <TIM_Base_SetConfig+0xf0>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d00b      	beq.n	8003e2e <TIM_Base_SetConfig+0x8a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a1f      	ldr	r2, [pc, #124]	; (8003e98 <TIM_Base_SetConfig+0xf4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d007      	beq.n	8003e2e <TIM_Base_SetConfig+0x8a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a1e      	ldr	r2, [pc, #120]	; (8003e9c <TIM_Base_SetConfig+0xf8>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d003      	beq.n	8003e2e <TIM_Base_SetConfig+0x8a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a1d      	ldr	r2, [pc, #116]	; (8003ea0 <TIM_Base_SetConfig+0xfc>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d108      	bne.n	8003e40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a08      	ldr	r2, [pc, #32]	; (8003e88 <TIM_Base_SetConfig+0xe4>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d103      	bne.n	8003e74 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	615a      	str	r2, [r3, #20]
}
 8003e7a:	bf00      	nop
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40010000 	.word	0x40010000
 8003e8c:	40000400 	.word	0x40000400
 8003e90:	40000800 	.word	0x40000800
 8003e94:	40000c00 	.word	0x40000c00
 8003e98:	40014000 	.word	0x40014000
 8003e9c:	40014400 	.word	0x40014400
 8003ea0:	40014800 	.word	0x40014800

08003ea4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b087      	sub	sp, #28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	f023 0201 	bic.w	r2, r3, #1
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f023 030a 	bic.w	r3, r3, #10
 8003ee0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	621a      	str	r2, [r3, #32]
}
 8003ef6:	bf00      	nop
 8003ef8:	371c      	adds	r7, #28
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b087      	sub	sp, #28
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	60f8      	str	r0, [r7, #12]
 8003f0a:	60b9      	str	r1, [r7, #8]
 8003f0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	f023 0210 	bic.w	r2, r3, #16
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	031b      	lsls	r3, r3, #12
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	621a      	str	r2, [r3, #32]
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b085      	sub	sp, #20
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f043 0307 	orr.w	r3, r3, #7
 8003f84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	609a      	str	r2, [r3, #8]
}
 8003f8c:	bf00      	nop
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
 8003fa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	021a      	lsls	r2, r3, #8
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	609a      	str	r2, [r3, #8]
}
 8003fcc:	bf00      	nop
 8003fce:	371c      	adds	r7, #28
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fec:	2302      	movs	r3, #2
 8003fee:	e050      	b.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004016:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a1c      	ldr	r2, [pc, #112]	; (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d018      	beq.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800403c:	d013      	beq.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a18      	ldr	r2, [pc, #96]	; (80040a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d00e      	beq.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a16      	ldr	r2, [pc, #88]	; (80040a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d009      	beq.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a15      	ldr	r2, [pc, #84]	; (80040ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d004      	beq.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a13      	ldr	r2, [pc, #76]	; (80040b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d10c      	bne.n	8004080 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800406c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	4313      	orrs	r3, r2
 8004076:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	40010000 	.word	0x40010000
 80040a4:	40000400 	.word	0x40000400
 80040a8:	40000800 	.word	0x40000800
 80040ac:	40000c00 	.word	0x40000c00
 80040b0:	40014000 	.word	0x40014000

080040b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e03f      	b.n	800416e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d106      	bne.n	8004108 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7fd fd8c 	bl	8001c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2224      	movs	r2, #36	; 0x24
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800411e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f929 	bl	8004378 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004134:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	695a      	ldr	r2, [r3, #20]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004144:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68da      	ldr	r2, [r3, #12]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004154:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b08a      	sub	sp, #40	; 0x28
 800417a:	af02      	add	r7, sp, #8
 800417c:	60f8      	str	r0, [r7, #12]
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	603b      	str	r3, [r7, #0]
 8004182:	4613      	mov	r3, r2
 8004184:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004186:	2300      	movs	r3, #0
 8004188:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b20      	cmp	r3, #32
 8004194:	d17c      	bne.n	8004290 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d002      	beq.n	80041a2 <HAL_UART_Transmit+0x2c>
 800419c:	88fb      	ldrh	r3, [r7, #6]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e075      	b.n	8004292 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d101      	bne.n	80041b4 <HAL_UART_Transmit+0x3e>
 80041b0:	2302      	movs	r3, #2
 80041b2:	e06e      	b.n	8004292 <HAL_UART_Transmit+0x11c>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2221      	movs	r2, #33	; 0x21
 80041c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041ca:	f7fd ff0f 	bl	8001fec <HAL_GetTick>
 80041ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	88fa      	ldrh	r2, [r7, #6]
 80041d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	88fa      	ldrh	r2, [r7, #6]
 80041da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e4:	d108      	bne.n	80041f8 <HAL_UART_Transmit+0x82>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d104      	bne.n	80041f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80041ee:	2300      	movs	r3, #0
 80041f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	61bb      	str	r3, [r7, #24]
 80041f6:	e003      	b.n	8004200 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041fc:	2300      	movs	r3, #0
 80041fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004208:	e02a      	b.n	8004260 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2200      	movs	r2, #0
 8004212:	2180      	movs	r1, #128	; 0x80
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 f840 	bl	800429a <UART_WaitOnFlagUntilTimeout>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e036      	b.n	8004292 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10b      	bne.n	8004242 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004238:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	3302      	adds	r3, #2
 800423e:	61bb      	str	r3, [r7, #24]
 8004240:	e007      	b.n	8004252 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	781a      	ldrb	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	3301      	adds	r3, #1
 8004250:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004264:	b29b      	uxth	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1cf      	bne.n	800420a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2200      	movs	r2, #0
 8004272:	2140      	movs	r1, #64	; 0x40
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 f810 	bl	800429a <UART_WaitOnFlagUntilTimeout>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e006      	b.n	8004292 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2220      	movs	r2, #32
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800428c:	2300      	movs	r3, #0
 800428e:	e000      	b.n	8004292 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004290:	2302      	movs	r3, #2
  }
}
 8004292:	4618      	mov	r0, r3
 8004294:	3720      	adds	r7, #32
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b090      	sub	sp, #64	; 0x40
 800429e:	af00      	add	r7, sp, #0
 80042a0:	60f8      	str	r0, [r7, #12]
 80042a2:	60b9      	str	r1, [r7, #8]
 80042a4:	603b      	str	r3, [r7, #0]
 80042a6:	4613      	mov	r3, r2
 80042a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042aa:	e050      	b.n	800434e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042b2:	d04c      	beq.n	800434e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80042b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d007      	beq.n	80042ca <UART_WaitOnFlagUntilTimeout+0x30>
 80042ba:	f7fd fe97 	bl	8001fec <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d241      	bcs.n	800434e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	330c      	adds	r3, #12
 80042d0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d4:	e853 3f00 	ldrex	r3, [r3]
 80042d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	330c      	adds	r3, #12
 80042e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042ea:	637a      	str	r2, [r7, #52]	; 0x34
 80042ec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042f2:	e841 2300 	strex	r3, r2, [r1]
 80042f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1e5      	bne.n	80042ca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3314      	adds	r3, #20
 8004304:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	e853 3f00 	ldrex	r3, [r3]
 800430c:	613b      	str	r3, [r7, #16]
   return(result);
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	f023 0301 	bic.w	r3, r3, #1
 8004314:	63bb      	str	r3, [r7, #56]	; 0x38
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3314      	adds	r3, #20
 800431c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800431e:	623a      	str	r2, [r7, #32]
 8004320:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004322:	69f9      	ldr	r1, [r7, #28]
 8004324:	6a3a      	ldr	r2, [r7, #32]
 8004326:	e841 2300 	strex	r3, r2, [r1]
 800432a:	61bb      	str	r3, [r7, #24]
   return(result);
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1e5      	bne.n	80042fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2220      	movs	r2, #32
 8004336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2220      	movs	r2, #32
 800433e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e00f      	b.n	800436e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	4013      	ands	r3, r2
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	429a      	cmp	r2, r3
 800435c:	bf0c      	ite	eq
 800435e:	2301      	moveq	r3, #1
 8004360:	2300      	movne	r3, #0
 8004362:	b2db      	uxtb	r3, r3
 8004364:	461a      	mov	r2, r3
 8004366:	79fb      	ldrb	r3, [r7, #7]
 8004368:	429a      	cmp	r2, r3
 800436a:	d09f      	beq.n	80042ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3740      	adds	r7, #64	; 0x40
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800437c:	b0c0      	sub	sp, #256	; 0x100
 800437e:	af00      	add	r7, sp, #0
 8004380:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004394:	68d9      	ldr	r1, [r3, #12]
 8004396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	ea40 0301 	orr.w	r3, r0, r1
 80043a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	431a      	orrs	r2, r3
 80043b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	431a      	orrs	r2, r3
 80043b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	4313      	orrs	r3, r2
 80043c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80043c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80043d0:	f021 010c 	bic.w	r1, r1, #12
 80043d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043de:	430b      	orrs	r3, r1
 80043e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80043ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f2:	6999      	ldr	r1, [r3, #24]
 80043f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	ea40 0301 	orr.w	r3, r0, r1
 80043fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	4b8f      	ldr	r3, [pc, #572]	; (8004644 <UART_SetConfig+0x2cc>)
 8004408:	429a      	cmp	r2, r3
 800440a:	d005      	beq.n	8004418 <UART_SetConfig+0xa0>
 800440c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	4b8d      	ldr	r3, [pc, #564]	; (8004648 <UART_SetConfig+0x2d0>)
 8004414:	429a      	cmp	r2, r3
 8004416:	d104      	bne.n	8004422 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004418:	f7ff f9ac 	bl	8003774 <HAL_RCC_GetPCLK2Freq>
 800441c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004420:	e003      	b.n	800442a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004422:	f7ff f993 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 8004426:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800442a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004434:	f040 810c 	bne.w	8004650 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800443c:	2200      	movs	r2, #0
 800443e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004442:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004446:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800444a:	4622      	mov	r2, r4
 800444c:	462b      	mov	r3, r5
 800444e:	1891      	adds	r1, r2, r2
 8004450:	65b9      	str	r1, [r7, #88]	; 0x58
 8004452:	415b      	adcs	r3, r3
 8004454:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004456:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800445a:	4621      	mov	r1, r4
 800445c:	eb12 0801 	adds.w	r8, r2, r1
 8004460:	4629      	mov	r1, r5
 8004462:	eb43 0901 	adc.w	r9, r3, r1
 8004466:	f04f 0200 	mov.w	r2, #0
 800446a:	f04f 0300 	mov.w	r3, #0
 800446e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004472:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004476:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800447a:	4690      	mov	r8, r2
 800447c:	4699      	mov	r9, r3
 800447e:	4623      	mov	r3, r4
 8004480:	eb18 0303 	adds.w	r3, r8, r3
 8004484:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004488:	462b      	mov	r3, r5
 800448a:	eb49 0303 	adc.w	r3, r9, r3
 800448e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800449e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80044a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80044a6:	460b      	mov	r3, r1
 80044a8:	18db      	adds	r3, r3, r3
 80044aa:	653b      	str	r3, [r7, #80]	; 0x50
 80044ac:	4613      	mov	r3, r2
 80044ae:	eb42 0303 	adc.w	r3, r2, r3
 80044b2:	657b      	str	r3, [r7, #84]	; 0x54
 80044b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80044b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80044bc:	f7fc face 	bl	8000a5c <__aeabi_uldivmod>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4b61      	ldr	r3, [pc, #388]	; (800464c <UART_SetConfig+0x2d4>)
 80044c6:	fba3 2302 	umull	r2, r3, r3, r2
 80044ca:	095b      	lsrs	r3, r3, #5
 80044cc:	011c      	lsls	r4, r3, #4
 80044ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044d2:	2200      	movs	r2, #0
 80044d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80044dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80044e0:	4642      	mov	r2, r8
 80044e2:	464b      	mov	r3, r9
 80044e4:	1891      	adds	r1, r2, r2
 80044e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80044e8:	415b      	adcs	r3, r3
 80044ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80044f0:	4641      	mov	r1, r8
 80044f2:	eb12 0a01 	adds.w	sl, r2, r1
 80044f6:	4649      	mov	r1, r9
 80044f8:	eb43 0b01 	adc.w	fp, r3, r1
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	f04f 0300 	mov.w	r3, #0
 8004504:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004508:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800450c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004510:	4692      	mov	sl, r2
 8004512:	469b      	mov	fp, r3
 8004514:	4643      	mov	r3, r8
 8004516:	eb1a 0303 	adds.w	r3, sl, r3
 800451a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800451e:	464b      	mov	r3, r9
 8004520:	eb4b 0303 	adc.w	r3, fp, r3
 8004524:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004534:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004538:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800453c:	460b      	mov	r3, r1
 800453e:	18db      	adds	r3, r3, r3
 8004540:	643b      	str	r3, [r7, #64]	; 0x40
 8004542:	4613      	mov	r3, r2
 8004544:	eb42 0303 	adc.w	r3, r2, r3
 8004548:	647b      	str	r3, [r7, #68]	; 0x44
 800454a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800454e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004552:	f7fc fa83 	bl	8000a5c <__aeabi_uldivmod>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	4611      	mov	r1, r2
 800455c:	4b3b      	ldr	r3, [pc, #236]	; (800464c <UART_SetConfig+0x2d4>)
 800455e:	fba3 2301 	umull	r2, r3, r3, r1
 8004562:	095b      	lsrs	r3, r3, #5
 8004564:	2264      	movs	r2, #100	; 0x64
 8004566:	fb02 f303 	mul.w	r3, r2, r3
 800456a:	1acb      	subs	r3, r1, r3
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004572:	4b36      	ldr	r3, [pc, #216]	; (800464c <UART_SetConfig+0x2d4>)
 8004574:	fba3 2302 	umull	r2, r3, r3, r2
 8004578:	095b      	lsrs	r3, r3, #5
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004580:	441c      	add	r4, r3
 8004582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004586:	2200      	movs	r2, #0
 8004588:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800458c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004590:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004594:	4642      	mov	r2, r8
 8004596:	464b      	mov	r3, r9
 8004598:	1891      	adds	r1, r2, r2
 800459a:	63b9      	str	r1, [r7, #56]	; 0x38
 800459c:	415b      	adcs	r3, r3
 800459e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045a4:	4641      	mov	r1, r8
 80045a6:	1851      	adds	r1, r2, r1
 80045a8:	6339      	str	r1, [r7, #48]	; 0x30
 80045aa:	4649      	mov	r1, r9
 80045ac:	414b      	adcs	r3, r1
 80045ae:	637b      	str	r3, [r7, #52]	; 0x34
 80045b0:	f04f 0200 	mov.w	r2, #0
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80045bc:	4659      	mov	r1, fp
 80045be:	00cb      	lsls	r3, r1, #3
 80045c0:	4651      	mov	r1, sl
 80045c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045c6:	4651      	mov	r1, sl
 80045c8:	00ca      	lsls	r2, r1, #3
 80045ca:	4610      	mov	r0, r2
 80045cc:	4619      	mov	r1, r3
 80045ce:	4603      	mov	r3, r0
 80045d0:	4642      	mov	r2, r8
 80045d2:	189b      	adds	r3, r3, r2
 80045d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045d8:	464b      	mov	r3, r9
 80045da:	460a      	mov	r2, r1
 80045dc:	eb42 0303 	adc.w	r3, r2, r3
 80045e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80045f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80045f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80045f8:	460b      	mov	r3, r1
 80045fa:	18db      	adds	r3, r3, r3
 80045fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80045fe:	4613      	mov	r3, r2
 8004600:	eb42 0303 	adc.w	r3, r2, r3
 8004604:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004606:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800460a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800460e:	f7fc fa25 	bl	8000a5c <__aeabi_uldivmod>
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	4b0d      	ldr	r3, [pc, #52]	; (800464c <UART_SetConfig+0x2d4>)
 8004618:	fba3 1302 	umull	r1, r3, r3, r2
 800461c:	095b      	lsrs	r3, r3, #5
 800461e:	2164      	movs	r1, #100	; 0x64
 8004620:	fb01 f303 	mul.w	r3, r1, r3
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	3332      	adds	r3, #50	; 0x32
 800462a:	4a08      	ldr	r2, [pc, #32]	; (800464c <UART_SetConfig+0x2d4>)
 800462c:	fba2 2303 	umull	r2, r3, r2, r3
 8004630:	095b      	lsrs	r3, r3, #5
 8004632:	f003 0207 	and.w	r2, r3, #7
 8004636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4422      	add	r2, r4
 800463e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004640:	e105      	b.n	800484e <UART_SetConfig+0x4d6>
 8004642:	bf00      	nop
 8004644:	40011000 	.word	0x40011000
 8004648:	40011400 	.word	0x40011400
 800464c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004650:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004654:	2200      	movs	r2, #0
 8004656:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800465a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800465e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004662:	4642      	mov	r2, r8
 8004664:	464b      	mov	r3, r9
 8004666:	1891      	adds	r1, r2, r2
 8004668:	6239      	str	r1, [r7, #32]
 800466a:	415b      	adcs	r3, r3
 800466c:	627b      	str	r3, [r7, #36]	; 0x24
 800466e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004672:	4641      	mov	r1, r8
 8004674:	1854      	adds	r4, r2, r1
 8004676:	4649      	mov	r1, r9
 8004678:	eb43 0501 	adc.w	r5, r3, r1
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	00eb      	lsls	r3, r5, #3
 8004686:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800468a:	00e2      	lsls	r2, r4, #3
 800468c:	4614      	mov	r4, r2
 800468e:	461d      	mov	r5, r3
 8004690:	4643      	mov	r3, r8
 8004692:	18e3      	adds	r3, r4, r3
 8004694:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004698:	464b      	mov	r3, r9
 800469a:	eb45 0303 	adc.w	r3, r5, r3
 800469e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046b2:	f04f 0200 	mov.w	r2, #0
 80046b6:	f04f 0300 	mov.w	r3, #0
 80046ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80046be:	4629      	mov	r1, r5
 80046c0:	008b      	lsls	r3, r1, #2
 80046c2:	4621      	mov	r1, r4
 80046c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046c8:	4621      	mov	r1, r4
 80046ca:	008a      	lsls	r2, r1, #2
 80046cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80046d0:	f7fc f9c4 	bl	8000a5c <__aeabi_uldivmod>
 80046d4:	4602      	mov	r2, r0
 80046d6:	460b      	mov	r3, r1
 80046d8:	4b60      	ldr	r3, [pc, #384]	; (800485c <UART_SetConfig+0x4e4>)
 80046da:	fba3 2302 	umull	r2, r3, r3, r2
 80046de:	095b      	lsrs	r3, r3, #5
 80046e0:	011c      	lsls	r4, r3, #4
 80046e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046e6:	2200      	movs	r2, #0
 80046e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80046ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80046f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80046f4:	4642      	mov	r2, r8
 80046f6:	464b      	mov	r3, r9
 80046f8:	1891      	adds	r1, r2, r2
 80046fa:	61b9      	str	r1, [r7, #24]
 80046fc:	415b      	adcs	r3, r3
 80046fe:	61fb      	str	r3, [r7, #28]
 8004700:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004704:	4641      	mov	r1, r8
 8004706:	1851      	adds	r1, r2, r1
 8004708:	6139      	str	r1, [r7, #16]
 800470a:	4649      	mov	r1, r9
 800470c:	414b      	adcs	r3, r1
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	f04f 0200 	mov.w	r2, #0
 8004714:	f04f 0300 	mov.w	r3, #0
 8004718:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800471c:	4659      	mov	r1, fp
 800471e:	00cb      	lsls	r3, r1, #3
 8004720:	4651      	mov	r1, sl
 8004722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004726:	4651      	mov	r1, sl
 8004728:	00ca      	lsls	r2, r1, #3
 800472a:	4610      	mov	r0, r2
 800472c:	4619      	mov	r1, r3
 800472e:	4603      	mov	r3, r0
 8004730:	4642      	mov	r2, r8
 8004732:	189b      	adds	r3, r3, r2
 8004734:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004738:	464b      	mov	r3, r9
 800473a:	460a      	mov	r2, r1
 800473c:	eb42 0303 	adc.w	r3, r2, r3
 8004740:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	67bb      	str	r3, [r7, #120]	; 0x78
 800474e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004750:	f04f 0200 	mov.w	r2, #0
 8004754:	f04f 0300 	mov.w	r3, #0
 8004758:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800475c:	4649      	mov	r1, r9
 800475e:	008b      	lsls	r3, r1, #2
 8004760:	4641      	mov	r1, r8
 8004762:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004766:	4641      	mov	r1, r8
 8004768:	008a      	lsls	r2, r1, #2
 800476a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800476e:	f7fc f975 	bl	8000a5c <__aeabi_uldivmod>
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	4b39      	ldr	r3, [pc, #228]	; (800485c <UART_SetConfig+0x4e4>)
 8004778:	fba3 1302 	umull	r1, r3, r3, r2
 800477c:	095b      	lsrs	r3, r3, #5
 800477e:	2164      	movs	r1, #100	; 0x64
 8004780:	fb01 f303 	mul.w	r3, r1, r3
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	3332      	adds	r3, #50	; 0x32
 800478a:	4a34      	ldr	r2, [pc, #208]	; (800485c <UART_SetConfig+0x4e4>)
 800478c:	fba2 2303 	umull	r2, r3, r2, r3
 8004790:	095b      	lsrs	r3, r3, #5
 8004792:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004796:	441c      	add	r4, r3
 8004798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800479c:	2200      	movs	r2, #0
 800479e:	673b      	str	r3, [r7, #112]	; 0x70
 80047a0:	677a      	str	r2, [r7, #116]	; 0x74
 80047a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80047a6:	4642      	mov	r2, r8
 80047a8:	464b      	mov	r3, r9
 80047aa:	1891      	adds	r1, r2, r2
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	415b      	adcs	r3, r3
 80047b0:	60fb      	str	r3, [r7, #12]
 80047b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047b6:	4641      	mov	r1, r8
 80047b8:	1851      	adds	r1, r2, r1
 80047ba:	6039      	str	r1, [r7, #0]
 80047bc:	4649      	mov	r1, r9
 80047be:	414b      	adcs	r3, r1
 80047c0:	607b      	str	r3, [r7, #4]
 80047c2:	f04f 0200 	mov.w	r2, #0
 80047c6:	f04f 0300 	mov.w	r3, #0
 80047ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047ce:	4659      	mov	r1, fp
 80047d0:	00cb      	lsls	r3, r1, #3
 80047d2:	4651      	mov	r1, sl
 80047d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047d8:	4651      	mov	r1, sl
 80047da:	00ca      	lsls	r2, r1, #3
 80047dc:	4610      	mov	r0, r2
 80047de:	4619      	mov	r1, r3
 80047e0:	4603      	mov	r3, r0
 80047e2:	4642      	mov	r2, r8
 80047e4:	189b      	adds	r3, r3, r2
 80047e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80047e8:	464b      	mov	r3, r9
 80047ea:	460a      	mov	r2, r1
 80047ec:	eb42 0303 	adc.w	r3, r2, r3
 80047f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	663b      	str	r3, [r7, #96]	; 0x60
 80047fc:	667a      	str	r2, [r7, #100]	; 0x64
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	f04f 0300 	mov.w	r3, #0
 8004806:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800480a:	4649      	mov	r1, r9
 800480c:	008b      	lsls	r3, r1, #2
 800480e:	4641      	mov	r1, r8
 8004810:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004814:	4641      	mov	r1, r8
 8004816:	008a      	lsls	r2, r1, #2
 8004818:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800481c:	f7fc f91e 	bl	8000a5c <__aeabi_uldivmod>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4b0d      	ldr	r3, [pc, #52]	; (800485c <UART_SetConfig+0x4e4>)
 8004826:	fba3 1302 	umull	r1, r3, r3, r2
 800482a:	095b      	lsrs	r3, r3, #5
 800482c:	2164      	movs	r1, #100	; 0x64
 800482e:	fb01 f303 	mul.w	r3, r1, r3
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	011b      	lsls	r3, r3, #4
 8004836:	3332      	adds	r3, #50	; 0x32
 8004838:	4a08      	ldr	r2, [pc, #32]	; (800485c <UART_SetConfig+0x4e4>)
 800483a:	fba2 2303 	umull	r2, r3, r2, r3
 800483e:	095b      	lsrs	r3, r3, #5
 8004840:	f003 020f 	and.w	r2, r3, #15
 8004844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4422      	add	r2, r4
 800484c:	609a      	str	r2, [r3, #8]
}
 800484e:	bf00      	nop
 8004850:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004854:	46bd      	mov	sp, r7
 8004856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800485a:	bf00      	nop
 800485c:	51eb851f 	.word	0x51eb851f

08004860 <__errno>:
 8004860:	4b01      	ldr	r3, [pc, #4]	; (8004868 <__errno+0x8>)
 8004862:	6818      	ldr	r0, [r3, #0]
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	20000014 	.word	0x20000014

0800486c <__libc_init_array>:
 800486c:	b570      	push	{r4, r5, r6, lr}
 800486e:	4d0d      	ldr	r5, [pc, #52]	; (80048a4 <__libc_init_array+0x38>)
 8004870:	4c0d      	ldr	r4, [pc, #52]	; (80048a8 <__libc_init_array+0x3c>)
 8004872:	1b64      	subs	r4, r4, r5
 8004874:	10a4      	asrs	r4, r4, #2
 8004876:	2600      	movs	r6, #0
 8004878:	42a6      	cmp	r6, r4
 800487a:	d109      	bne.n	8004890 <__libc_init_array+0x24>
 800487c:	4d0b      	ldr	r5, [pc, #44]	; (80048ac <__libc_init_array+0x40>)
 800487e:	4c0c      	ldr	r4, [pc, #48]	; (80048b0 <__libc_init_array+0x44>)
 8004880:	f000 ffae 	bl	80057e0 <_init>
 8004884:	1b64      	subs	r4, r4, r5
 8004886:	10a4      	asrs	r4, r4, #2
 8004888:	2600      	movs	r6, #0
 800488a:	42a6      	cmp	r6, r4
 800488c:	d105      	bne.n	800489a <__libc_init_array+0x2e>
 800488e:	bd70      	pop	{r4, r5, r6, pc}
 8004890:	f855 3b04 	ldr.w	r3, [r5], #4
 8004894:	4798      	blx	r3
 8004896:	3601      	adds	r6, #1
 8004898:	e7ee      	b.n	8004878 <__libc_init_array+0xc>
 800489a:	f855 3b04 	ldr.w	r3, [r5], #4
 800489e:	4798      	blx	r3
 80048a0:	3601      	adds	r6, #1
 80048a2:	e7f2      	b.n	800488a <__libc_init_array+0x1e>
 80048a4:	080058bc 	.word	0x080058bc
 80048a8:	080058bc 	.word	0x080058bc
 80048ac:	080058bc 	.word	0x080058bc
 80048b0:	080058c0 	.word	0x080058c0

080048b4 <memset>:
 80048b4:	4402      	add	r2, r0
 80048b6:	4603      	mov	r3, r0
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d100      	bne.n	80048be <memset+0xa>
 80048bc:	4770      	bx	lr
 80048be:	f803 1b01 	strb.w	r1, [r3], #1
 80048c2:	e7f9      	b.n	80048b8 <memset+0x4>

080048c4 <iprintf>:
 80048c4:	b40f      	push	{r0, r1, r2, r3}
 80048c6:	4b0a      	ldr	r3, [pc, #40]	; (80048f0 <iprintf+0x2c>)
 80048c8:	b513      	push	{r0, r1, r4, lr}
 80048ca:	681c      	ldr	r4, [r3, #0]
 80048cc:	b124      	cbz	r4, 80048d8 <iprintf+0x14>
 80048ce:	69a3      	ldr	r3, [r4, #24]
 80048d0:	b913      	cbnz	r3, 80048d8 <iprintf+0x14>
 80048d2:	4620      	mov	r0, r4
 80048d4:	f000 f866 	bl	80049a4 <__sinit>
 80048d8:	ab05      	add	r3, sp, #20
 80048da:	9a04      	ldr	r2, [sp, #16]
 80048dc:	68a1      	ldr	r1, [r4, #8]
 80048de:	9301      	str	r3, [sp, #4]
 80048e0:	4620      	mov	r0, r4
 80048e2:	f000 f9bd 	bl	8004c60 <_vfiprintf_r>
 80048e6:	b002      	add	sp, #8
 80048e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048ec:	b004      	add	sp, #16
 80048ee:	4770      	bx	lr
 80048f0:	20000014 	.word	0x20000014

080048f4 <std>:
 80048f4:	2300      	movs	r3, #0
 80048f6:	b510      	push	{r4, lr}
 80048f8:	4604      	mov	r4, r0
 80048fa:	e9c0 3300 	strd	r3, r3, [r0]
 80048fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004902:	6083      	str	r3, [r0, #8]
 8004904:	8181      	strh	r1, [r0, #12]
 8004906:	6643      	str	r3, [r0, #100]	; 0x64
 8004908:	81c2      	strh	r2, [r0, #14]
 800490a:	6183      	str	r3, [r0, #24]
 800490c:	4619      	mov	r1, r3
 800490e:	2208      	movs	r2, #8
 8004910:	305c      	adds	r0, #92	; 0x5c
 8004912:	f7ff ffcf 	bl	80048b4 <memset>
 8004916:	4b05      	ldr	r3, [pc, #20]	; (800492c <std+0x38>)
 8004918:	6263      	str	r3, [r4, #36]	; 0x24
 800491a:	4b05      	ldr	r3, [pc, #20]	; (8004930 <std+0x3c>)
 800491c:	62a3      	str	r3, [r4, #40]	; 0x28
 800491e:	4b05      	ldr	r3, [pc, #20]	; (8004934 <std+0x40>)
 8004920:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004922:	4b05      	ldr	r3, [pc, #20]	; (8004938 <std+0x44>)
 8004924:	6224      	str	r4, [r4, #32]
 8004926:	6323      	str	r3, [r4, #48]	; 0x30
 8004928:	bd10      	pop	{r4, pc}
 800492a:	bf00      	nop
 800492c:	08005209 	.word	0x08005209
 8004930:	0800522b 	.word	0x0800522b
 8004934:	08005263 	.word	0x08005263
 8004938:	08005287 	.word	0x08005287

0800493c <_cleanup_r>:
 800493c:	4901      	ldr	r1, [pc, #4]	; (8004944 <_cleanup_r+0x8>)
 800493e:	f000 b8af 	b.w	8004aa0 <_fwalk_reent>
 8004942:	bf00      	nop
 8004944:	08005561 	.word	0x08005561

08004948 <__sfmoreglue>:
 8004948:	b570      	push	{r4, r5, r6, lr}
 800494a:	2268      	movs	r2, #104	; 0x68
 800494c:	1e4d      	subs	r5, r1, #1
 800494e:	4355      	muls	r5, r2
 8004950:	460e      	mov	r6, r1
 8004952:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004956:	f000 f8e5 	bl	8004b24 <_malloc_r>
 800495a:	4604      	mov	r4, r0
 800495c:	b140      	cbz	r0, 8004970 <__sfmoreglue+0x28>
 800495e:	2100      	movs	r1, #0
 8004960:	e9c0 1600 	strd	r1, r6, [r0]
 8004964:	300c      	adds	r0, #12
 8004966:	60a0      	str	r0, [r4, #8]
 8004968:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800496c:	f7ff ffa2 	bl	80048b4 <memset>
 8004970:	4620      	mov	r0, r4
 8004972:	bd70      	pop	{r4, r5, r6, pc}

08004974 <__sfp_lock_acquire>:
 8004974:	4801      	ldr	r0, [pc, #4]	; (800497c <__sfp_lock_acquire+0x8>)
 8004976:	f000 b8b3 	b.w	8004ae0 <__retarget_lock_acquire_recursive>
 800497a:	bf00      	nop
 800497c:	20001981 	.word	0x20001981

08004980 <__sfp_lock_release>:
 8004980:	4801      	ldr	r0, [pc, #4]	; (8004988 <__sfp_lock_release+0x8>)
 8004982:	f000 b8ae 	b.w	8004ae2 <__retarget_lock_release_recursive>
 8004986:	bf00      	nop
 8004988:	20001981 	.word	0x20001981

0800498c <__sinit_lock_acquire>:
 800498c:	4801      	ldr	r0, [pc, #4]	; (8004994 <__sinit_lock_acquire+0x8>)
 800498e:	f000 b8a7 	b.w	8004ae0 <__retarget_lock_acquire_recursive>
 8004992:	bf00      	nop
 8004994:	20001982 	.word	0x20001982

08004998 <__sinit_lock_release>:
 8004998:	4801      	ldr	r0, [pc, #4]	; (80049a0 <__sinit_lock_release+0x8>)
 800499a:	f000 b8a2 	b.w	8004ae2 <__retarget_lock_release_recursive>
 800499e:	bf00      	nop
 80049a0:	20001982 	.word	0x20001982

080049a4 <__sinit>:
 80049a4:	b510      	push	{r4, lr}
 80049a6:	4604      	mov	r4, r0
 80049a8:	f7ff fff0 	bl	800498c <__sinit_lock_acquire>
 80049ac:	69a3      	ldr	r3, [r4, #24]
 80049ae:	b11b      	cbz	r3, 80049b8 <__sinit+0x14>
 80049b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049b4:	f7ff bff0 	b.w	8004998 <__sinit_lock_release>
 80049b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80049bc:	6523      	str	r3, [r4, #80]	; 0x50
 80049be:	4b13      	ldr	r3, [pc, #76]	; (8004a0c <__sinit+0x68>)
 80049c0:	4a13      	ldr	r2, [pc, #76]	; (8004a10 <__sinit+0x6c>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80049c6:	42a3      	cmp	r3, r4
 80049c8:	bf04      	itt	eq
 80049ca:	2301      	moveq	r3, #1
 80049cc:	61a3      	streq	r3, [r4, #24]
 80049ce:	4620      	mov	r0, r4
 80049d0:	f000 f820 	bl	8004a14 <__sfp>
 80049d4:	6060      	str	r0, [r4, #4]
 80049d6:	4620      	mov	r0, r4
 80049d8:	f000 f81c 	bl	8004a14 <__sfp>
 80049dc:	60a0      	str	r0, [r4, #8]
 80049de:	4620      	mov	r0, r4
 80049e0:	f000 f818 	bl	8004a14 <__sfp>
 80049e4:	2200      	movs	r2, #0
 80049e6:	60e0      	str	r0, [r4, #12]
 80049e8:	2104      	movs	r1, #4
 80049ea:	6860      	ldr	r0, [r4, #4]
 80049ec:	f7ff ff82 	bl	80048f4 <std>
 80049f0:	68a0      	ldr	r0, [r4, #8]
 80049f2:	2201      	movs	r2, #1
 80049f4:	2109      	movs	r1, #9
 80049f6:	f7ff ff7d 	bl	80048f4 <std>
 80049fa:	68e0      	ldr	r0, [r4, #12]
 80049fc:	2202      	movs	r2, #2
 80049fe:	2112      	movs	r1, #18
 8004a00:	f7ff ff78 	bl	80048f4 <std>
 8004a04:	2301      	movs	r3, #1
 8004a06:	61a3      	str	r3, [r4, #24]
 8004a08:	e7d2      	b.n	80049b0 <__sinit+0xc>
 8004a0a:	bf00      	nop
 8004a0c:	0800581c 	.word	0x0800581c
 8004a10:	0800493d 	.word	0x0800493d

08004a14 <__sfp>:
 8004a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a16:	4607      	mov	r7, r0
 8004a18:	f7ff ffac 	bl	8004974 <__sfp_lock_acquire>
 8004a1c:	4b1e      	ldr	r3, [pc, #120]	; (8004a98 <__sfp+0x84>)
 8004a1e:	681e      	ldr	r6, [r3, #0]
 8004a20:	69b3      	ldr	r3, [r6, #24]
 8004a22:	b913      	cbnz	r3, 8004a2a <__sfp+0x16>
 8004a24:	4630      	mov	r0, r6
 8004a26:	f7ff ffbd 	bl	80049a4 <__sinit>
 8004a2a:	3648      	adds	r6, #72	; 0x48
 8004a2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a30:	3b01      	subs	r3, #1
 8004a32:	d503      	bpl.n	8004a3c <__sfp+0x28>
 8004a34:	6833      	ldr	r3, [r6, #0]
 8004a36:	b30b      	cbz	r3, 8004a7c <__sfp+0x68>
 8004a38:	6836      	ldr	r6, [r6, #0]
 8004a3a:	e7f7      	b.n	8004a2c <__sfp+0x18>
 8004a3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a40:	b9d5      	cbnz	r5, 8004a78 <__sfp+0x64>
 8004a42:	4b16      	ldr	r3, [pc, #88]	; (8004a9c <__sfp+0x88>)
 8004a44:	60e3      	str	r3, [r4, #12]
 8004a46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a4a:	6665      	str	r5, [r4, #100]	; 0x64
 8004a4c:	f000 f847 	bl	8004ade <__retarget_lock_init_recursive>
 8004a50:	f7ff ff96 	bl	8004980 <__sfp_lock_release>
 8004a54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004a58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004a5c:	6025      	str	r5, [r4, #0]
 8004a5e:	61a5      	str	r5, [r4, #24]
 8004a60:	2208      	movs	r2, #8
 8004a62:	4629      	mov	r1, r5
 8004a64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a68:	f7ff ff24 	bl	80048b4 <memset>
 8004a6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004a70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004a74:	4620      	mov	r0, r4
 8004a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a78:	3468      	adds	r4, #104	; 0x68
 8004a7a:	e7d9      	b.n	8004a30 <__sfp+0x1c>
 8004a7c:	2104      	movs	r1, #4
 8004a7e:	4638      	mov	r0, r7
 8004a80:	f7ff ff62 	bl	8004948 <__sfmoreglue>
 8004a84:	4604      	mov	r4, r0
 8004a86:	6030      	str	r0, [r6, #0]
 8004a88:	2800      	cmp	r0, #0
 8004a8a:	d1d5      	bne.n	8004a38 <__sfp+0x24>
 8004a8c:	f7ff ff78 	bl	8004980 <__sfp_lock_release>
 8004a90:	230c      	movs	r3, #12
 8004a92:	603b      	str	r3, [r7, #0]
 8004a94:	e7ee      	b.n	8004a74 <__sfp+0x60>
 8004a96:	bf00      	nop
 8004a98:	0800581c 	.word	0x0800581c
 8004a9c:	ffff0001 	.word	0xffff0001

08004aa0 <_fwalk_reent>:
 8004aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004aa4:	4606      	mov	r6, r0
 8004aa6:	4688      	mov	r8, r1
 8004aa8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004aac:	2700      	movs	r7, #0
 8004aae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ab2:	f1b9 0901 	subs.w	r9, r9, #1
 8004ab6:	d505      	bpl.n	8004ac4 <_fwalk_reent+0x24>
 8004ab8:	6824      	ldr	r4, [r4, #0]
 8004aba:	2c00      	cmp	r4, #0
 8004abc:	d1f7      	bne.n	8004aae <_fwalk_reent+0xe>
 8004abe:	4638      	mov	r0, r7
 8004ac0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ac4:	89ab      	ldrh	r3, [r5, #12]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d907      	bls.n	8004ada <_fwalk_reent+0x3a>
 8004aca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	d003      	beq.n	8004ada <_fwalk_reent+0x3a>
 8004ad2:	4629      	mov	r1, r5
 8004ad4:	4630      	mov	r0, r6
 8004ad6:	47c0      	blx	r8
 8004ad8:	4307      	orrs	r7, r0
 8004ada:	3568      	adds	r5, #104	; 0x68
 8004adc:	e7e9      	b.n	8004ab2 <_fwalk_reent+0x12>

08004ade <__retarget_lock_init_recursive>:
 8004ade:	4770      	bx	lr

08004ae0 <__retarget_lock_acquire_recursive>:
 8004ae0:	4770      	bx	lr

08004ae2 <__retarget_lock_release_recursive>:
 8004ae2:	4770      	bx	lr

08004ae4 <sbrk_aligned>:
 8004ae4:	b570      	push	{r4, r5, r6, lr}
 8004ae6:	4e0e      	ldr	r6, [pc, #56]	; (8004b20 <sbrk_aligned+0x3c>)
 8004ae8:	460c      	mov	r4, r1
 8004aea:	6831      	ldr	r1, [r6, #0]
 8004aec:	4605      	mov	r5, r0
 8004aee:	b911      	cbnz	r1, 8004af6 <sbrk_aligned+0x12>
 8004af0:	f000 fb7a 	bl	80051e8 <_sbrk_r>
 8004af4:	6030      	str	r0, [r6, #0]
 8004af6:	4621      	mov	r1, r4
 8004af8:	4628      	mov	r0, r5
 8004afa:	f000 fb75 	bl	80051e8 <_sbrk_r>
 8004afe:	1c43      	adds	r3, r0, #1
 8004b00:	d00a      	beq.n	8004b18 <sbrk_aligned+0x34>
 8004b02:	1cc4      	adds	r4, r0, #3
 8004b04:	f024 0403 	bic.w	r4, r4, #3
 8004b08:	42a0      	cmp	r0, r4
 8004b0a:	d007      	beq.n	8004b1c <sbrk_aligned+0x38>
 8004b0c:	1a21      	subs	r1, r4, r0
 8004b0e:	4628      	mov	r0, r5
 8004b10:	f000 fb6a 	bl	80051e8 <_sbrk_r>
 8004b14:	3001      	adds	r0, #1
 8004b16:	d101      	bne.n	8004b1c <sbrk_aligned+0x38>
 8004b18:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004b1c:	4620      	mov	r0, r4
 8004b1e:	bd70      	pop	{r4, r5, r6, pc}
 8004b20:	20001988 	.word	0x20001988

08004b24 <_malloc_r>:
 8004b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b28:	1ccd      	adds	r5, r1, #3
 8004b2a:	f025 0503 	bic.w	r5, r5, #3
 8004b2e:	3508      	adds	r5, #8
 8004b30:	2d0c      	cmp	r5, #12
 8004b32:	bf38      	it	cc
 8004b34:	250c      	movcc	r5, #12
 8004b36:	2d00      	cmp	r5, #0
 8004b38:	4607      	mov	r7, r0
 8004b3a:	db01      	blt.n	8004b40 <_malloc_r+0x1c>
 8004b3c:	42a9      	cmp	r1, r5
 8004b3e:	d905      	bls.n	8004b4c <_malloc_r+0x28>
 8004b40:	230c      	movs	r3, #12
 8004b42:	603b      	str	r3, [r7, #0]
 8004b44:	2600      	movs	r6, #0
 8004b46:	4630      	mov	r0, r6
 8004b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b4c:	4e2e      	ldr	r6, [pc, #184]	; (8004c08 <_malloc_r+0xe4>)
 8004b4e:	f000 fdbb 	bl	80056c8 <__malloc_lock>
 8004b52:	6833      	ldr	r3, [r6, #0]
 8004b54:	461c      	mov	r4, r3
 8004b56:	bb34      	cbnz	r4, 8004ba6 <_malloc_r+0x82>
 8004b58:	4629      	mov	r1, r5
 8004b5a:	4638      	mov	r0, r7
 8004b5c:	f7ff ffc2 	bl	8004ae4 <sbrk_aligned>
 8004b60:	1c43      	adds	r3, r0, #1
 8004b62:	4604      	mov	r4, r0
 8004b64:	d14d      	bne.n	8004c02 <_malloc_r+0xde>
 8004b66:	6834      	ldr	r4, [r6, #0]
 8004b68:	4626      	mov	r6, r4
 8004b6a:	2e00      	cmp	r6, #0
 8004b6c:	d140      	bne.n	8004bf0 <_malloc_r+0xcc>
 8004b6e:	6823      	ldr	r3, [r4, #0]
 8004b70:	4631      	mov	r1, r6
 8004b72:	4638      	mov	r0, r7
 8004b74:	eb04 0803 	add.w	r8, r4, r3
 8004b78:	f000 fb36 	bl	80051e8 <_sbrk_r>
 8004b7c:	4580      	cmp	r8, r0
 8004b7e:	d13a      	bne.n	8004bf6 <_malloc_r+0xd2>
 8004b80:	6821      	ldr	r1, [r4, #0]
 8004b82:	3503      	adds	r5, #3
 8004b84:	1a6d      	subs	r5, r5, r1
 8004b86:	f025 0503 	bic.w	r5, r5, #3
 8004b8a:	3508      	adds	r5, #8
 8004b8c:	2d0c      	cmp	r5, #12
 8004b8e:	bf38      	it	cc
 8004b90:	250c      	movcc	r5, #12
 8004b92:	4629      	mov	r1, r5
 8004b94:	4638      	mov	r0, r7
 8004b96:	f7ff ffa5 	bl	8004ae4 <sbrk_aligned>
 8004b9a:	3001      	adds	r0, #1
 8004b9c:	d02b      	beq.n	8004bf6 <_malloc_r+0xd2>
 8004b9e:	6823      	ldr	r3, [r4, #0]
 8004ba0:	442b      	add	r3, r5
 8004ba2:	6023      	str	r3, [r4, #0]
 8004ba4:	e00e      	b.n	8004bc4 <_malloc_r+0xa0>
 8004ba6:	6822      	ldr	r2, [r4, #0]
 8004ba8:	1b52      	subs	r2, r2, r5
 8004baa:	d41e      	bmi.n	8004bea <_malloc_r+0xc6>
 8004bac:	2a0b      	cmp	r2, #11
 8004bae:	d916      	bls.n	8004bde <_malloc_r+0xba>
 8004bb0:	1961      	adds	r1, r4, r5
 8004bb2:	42a3      	cmp	r3, r4
 8004bb4:	6025      	str	r5, [r4, #0]
 8004bb6:	bf18      	it	ne
 8004bb8:	6059      	strne	r1, [r3, #4]
 8004bba:	6863      	ldr	r3, [r4, #4]
 8004bbc:	bf08      	it	eq
 8004bbe:	6031      	streq	r1, [r6, #0]
 8004bc0:	5162      	str	r2, [r4, r5]
 8004bc2:	604b      	str	r3, [r1, #4]
 8004bc4:	4638      	mov	r0, r7
 8004bc6:	f104 060b 	add.w	r6, r4, #11
 8004bca:	f000 fd83 	bl	80056d4 <__malloc_unlock>
 8004bce:	f026 0607 	bic.w	r6, r6, #7
 8004bd2:	1d23      	adds	r3, r4, #4
 8004bd4:	1af2      	subs	r2, r6, r3
 8004bd6:	d0b6      	beq.n	8004b46 <_malloc_r+0x22>
 8004bd8:	1b9b      	subs	r3, r3, r6
 8004bda:	50a3      	str	r3, [r4, r2]
 8004bdc:	e7b3      	b.n	8004b46 <_malloc_r+0x22>
 8004bde:	6862      	ldr	r2, [r4, #4]
 8004be0:	42a3      	cmp	r3, r4
 8004be2:	bf0c      	ite	eq
 8004be4:	6032      	streq	r2, [r6, #0]
 8004be6:	605a      	strne	r2, [r3, #4]
 8004be8:	e7ec      	b.n	8004bc4 <_malloc_r+0xa0>
 8004bea:	4623      	mov	r3, r4
 8004bec:	6864      	ldr	r4, [r4, #4]
 8004bee:	e7b2      	b.n	8004b56 <_malloc_r+0x32>
 8004bf0:	4634      	mov	r4, r6
 8004bf2:	6876      	ldr	r6, [r6, #4]
 8004bf4:	e7b9      	b.n	8004b6a <_malloc_r+0x46>
 8004bf6:	230c      	movs	r3, #12
 8004bf8:	603b      	str	r3, [r7, #0]
 8004bfa:	4638      	mov	r0, r7
 8004bfc:	f000 fd6a 	bl	80056d4 <__malloc_unlock>
 8004c00:	e7a1      	b.n	8004b46 <_malloc_r+0x22>
 8004c02:	6025      	str	r5, [r4, #0]
 8004c04:	e7de      	b.n	8004bc4 <_malloc_r+0xa0>
 8004c06:	bf00      	nop
 8004c08:	20001984 	.word	0x20001984

08004c0c <__sfputc_r>:
 8004c0c:	6893      	ldr	r3, [r2, #8]
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	b410      	push	{r4}
 8004c14:	6093      	str	r3, [r2, #8]
 8004c16:	da08      	bge.n	8004c2a <__sfputc_r+0x1e>
 8004c18:	6994      	ldr	r4, [r2, #24]
 8004c1a:	42a3      	cmp	r3, r4
 8004c1c:	db01      	blt.n	8004c22 <__sfputc_r+0x16>
 8004c1e:	290a      	cmp	r1, #10
 8004c20:	d103      	bne.n	8004c2a <__sfputc_r+0x1e>
 8004c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c26:	f000 bb33 	b.w	8005290 <__swbuf_r>
 8004c2a:	6813      	ldr	r3, [r2, #0]
 8004c2c:	1c58      	adds	r0, r3, #1
 8004c2e:	6010      	str	r0, [r2, #0]
 8004c30:	7019      	strb	r1, [r3, #0]
 8004c32:	4608      	mov	r0, r1
 8004c34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <__sfputs_r>:
 8004c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3c:	4606      	mov	r6, r0
 8004c3e:	460f      	mov	r7, r1
 8004c40:	4614      	mov	r4, r2
 8004c42:	18d5      	adds	r5, r2, r3
 8004c44:	42ac      	cmp	r4, r5
 8004c46:	d101      	bne.n	8004c4c <__sfputs_r+0x12>
 8004c48:	2000      	movs	r0, #0
 8004c4a:	e007      	b.n	8004c5c <__sfputs_r+0x22>
 8004c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c50:	463a      	mov	r2, r7
 8004c52:	4630      	mov	r0, r6
 8004c54:	f7ff ffda 	bl	8004c0c <__sfputc_r>
 8004c58:	1c43      	adds	r3, r0, #1
 8004c5a:	d1f3      	bne.n	8004c44 <__sfputs_r+0xa>
 8004c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c60 <_vfiprintf_r>:
 8004c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c64:	460d      	mov	r5, r1
 8004c66:	b09d      	sub	sp, #116	; 0x74
 8004c68:	4614      	mov	r4, r2
 8004c6a:	4698      	mov	r8, r3
 8004c6c:	4606      	mov	r6, r0
 8004c6e:	b118      	cbz	r0, 8004c78 <_vfiprintf_r+0x18>
 8004c70:	6983      	ldr	r3, [r0, #24]
 8004c72:	b90b      	cbnz	r3, 8004c78 <_vfiprintf_r+0x18>
 8004c74:	f7ff fe96 	bl	80049a4 <__sinit>
 8004c78:	4b89      	ldr	r3, [pc, #548]	; (8004ea0 <_vfiprintf_r+0x240>)
 8004c7a:	429d      	cmp	r5, r3
 8004c7c:	d11b      	bne.n	8004cb6 <_vfiprintf_r+0x56>
 8004c7e:	6875      	ldr	r5, [r6, #4]
 8004c80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c82:	07d9      	lsls	r1, r3, #31
 8004c84:	d405      	bmi.n	8004c92 <_vfiprintf_r+0x32>
 8004c86:	89ab      	ldrh	r3, [r5, #12]
 8004c88:	059a      	lsls	r2, r3, #22
 8004c8a:	d402      	bmi.n	8004c92 <_vfiprintf_r+0x32>
 8004c8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c8e:	f7ff ff27 	bl	8004ae0 <__retarget_lock_acquire_recursive>
 8004c92:	89ab      	ldrh	r3, [r5, #12]
 8004c94:	071b      	lsls	r3, r3, #28
 8004c96:	d501      	bpl.n	8004c9c <_vfiprintf_r+0x3c>
 8004c98:	692b      	ldr	r3, [r5, #16]
 8004c9a:	b9eb      	cbnz	r3, 8004cd8 <_vfiprintf_r+0x78>
 8004c9c:	4629      	mov	r1, r5
 8004c9e:	4630      	mov	r0, r6
 8004ca0:	f000 fb5a 	bl	8005358 <__swsetup_r>
 8004ca4:	b1c0      	cbz	r0, 8004cd8 <_vfiprintf_r+0x78>
 8004ca6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ca8:	07dc      	lsls	r4, r3, #31
 8004caa:	d50e      	bpl.n	8004cca <_vfiprintf_r+0x6a>
 8004cac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cb0:	b01d      	add	sp, #116	; 0x74
 8004cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cb6:	4b7b      	ldr	r3, [pc, #492]	; (8004ea4 <_vfiprintf_r+0x244>)
 8004cb8:	429d      	cmp	r5, r3
 8004cba:	d101      	bne.n	8004cc0 <_vfiprintf_r+0x60>
 8004cbc:	68b5      	ldr	r5, [r6, #8]
 8004cbe:	e7df      	b.n	8004c80 <_vfiprintf_r+0x20>
 8004cc0:	4b79      	ldr	r3, [pc, #484]	; (8004ea8 <_vfiprintf_r+0x248>)
 8004cc2:	429d      	cmp	r5, r3
 8004cc4:	bf08      	it	eq
 8004cc6:	68f5      	ldreq	r5, [r6, #12]
 8004cc8:	e7da      	b.n	8004c80 <_vfiprintf_r+0x20>
 8004cca:	89ab      	ldrh	r3, [r5, #12]
 8004ccc:	0598      	lsls	r0, r3, #22
 8004cce:	d4ed      	bmi.n	8004cac <_vfiprintf_r+0x4c>
 8004cd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cd2:	f7ff ff06 	bl	8004ae2 <__retarget_lock_release_recursive>
 8004cd6:	e7e9      	b.n	8004cac <_vfiprintf_r+0x4c>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	9309      	str	r3, [sp, #36]	; 0x24
 8004cdc:	2320      	movs	r3, #32
 8004cde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ce2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ce6:	2330      	movs	r3, #48	; 0x30
 8004ce8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004eac <_vfiprintf_r+0x24c>
 8004cec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cf0:	f04f 0901 	mov.w	r9, #1
 8004cf4:	4623      	mov	r3, r4
 8004cf6:	469a      	mov	sl, r3
 8004cf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cfc:	b10a      	cbz	r2, 8004d02 <_vfiprintf_r+0xa2>
 8004cfe:	2a25      	cmp	r2, #37	; 0x25
 8004d00:	d1f9      	bne.n	8004cf6 <_vfiprintf_r+0x96>
 8004d02:	ebba 0b04 	subs.w	fp, sl, r4
 8004d06:	d00b      	beq.n	8004d20 <_vfiprintf_r+0xc0>
 8004d08:	465b      	mov	r3, fp
 8004d0a:	4622      	mov	r2, r4
 8004d0c:	4629      	mov	r1, r5
 8004d0e:	4630      	mov	r0, r6
 8004d10:	f7ff ff93 	bl	8004c3a <__sfputs_r>
 8004d14:	3001      	adds	r0, #1
 8004d16:	f000 80aa 	beq.w	8004e6e <_vfiprintf_r+0x20e>
 8004d1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d1c:	445a      	add	r2, fp
 8004d1e:	9209      	str	r2, [sp, #36]	; 0x24
 8004d20:	f89a 3000 	ldrb.w	r3, [sl]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 80a2 	beq.w	8004e6e <_vfiprintf_r+0x20e>
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d34:	f10a 0a01 	add.w	sl, sl, #1
 8004d38:	9304      	str	r3, [sp, #16]
 8004d3a:	9307      	str	r3, [sp, #28]
 8004d3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d40:	931a      	str	r3, [sp, #104]	; 0x68
 8004d42:	4654      	mov	r4, sl
 8004d44:	2205      	movs	r2, #5
 8004d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d4a:	4858      	ldr	r0, [pc, #352]	; (8004eac <_vfiprintf_r+0x24c>)
 8004d4c:	f7fb fa48 	bl	80001e0 <memchr>
 8004d50:	9a04      	ldr	r2, [sp, #16]
 8004d52:	b9d8      	cbnz	r0, 8004d8c <_vfiprintf_r+0x12c>
 8004d54:	06d1      	lsls	r1, r2, #27
 8004d56:	bf44      	itt	mi
 8004d58:	2320      	movmi	r3, #32
 8004d5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d5e:	0713      	lsls	r3, r2, #28
 8004d60:	bf44      	itt	mi
 8004d62:	232b      	movmi	r3, #43	; 0x2b
 8004d64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d68:	f89a 3000 	ldrb.w	r3, [sl]
 8004d6c:	2b2a      	cmp	r3, #42	; 0x2a
 8004d6e:	d015      	beq.n	8004d9c <_vfiprintf_r+0x13c>
 8004d70:	9a07      	ldr	r2, [sp, #28]
 8004d72:	4654      	mov	r4, sl
 8004d74:	2000      	movs	r0, #0
 8004d76:	f04f 0c0a 	mov.w	ip, #10
 8004d7a:	4621      	mov	r1, r4
 8004d7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d80:	3b30      	subs	r3, #48	; 0x30
 8004d82:	2b09      	cmp	r3, #9
 8004d84:	d94e      	bls.n	8004e24 <_vfiprintf_r+0x1c4>
 8004d86:	b1b0      	cbz	r0, 8004db6 <_vfiprintf_r+0x156>
 8004d88:	9207      	str	r2, [sp, #28]
 8004d8a:	e014      	b.n	8004db6 <_vfiprintf_r+0x156>
 8004d8c:	eba0 0308 	sub.w	r3, r0, r8
 8004d90:	fa09 f303 	lsl.w	r3, r9, r3
 8004d94:	4313      	orrs	r3, r2
 8004d96:	9304      	str	r3, [sp, #16]
 8004d98:	46a2      	mov	sl, r4
 8004d9a:	e7d2      	b.n	8004d42 <_vfiprintf_r+0xe2>
 8004d9c:	9b03      	ldr	r3, [sp, #12]
 8004d9e:	1d19      	adds	r1, r3, #4
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	9103      	str	r1, [sp, #12]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	bfbb      	ittet	lt
 8004da8:	425b      	neglt	r3, r3
 8004daa:	f042 0202 	orrlt.w	r2, r2, #2
 8004dae:	9307      	strge	r3, [sp, #28]
 8004db0:	9307      	strlt	r3, [sp, #28]
 8004db2:	bfb8      	it	lt
 8004db4:	9204      	strlt	r2, [sp, #16]
 8004db6:	7823      	ldrb	r3, [r4, #0]
 8004db8:	2b2e      	cmp	r3, #46	; 0x2e
 8004dba:	d10c      	bne.n	8004dd6 <_vfiprintf_r+0x176>
 8004dbc:	7863      	ldrb	r3, [r4, #1]
 8004dbe:	2b2a      	cmp	r3, #42	; 0x2a
 8004dc0:	d135      	bne.n	8004e2e <_vfiprintf_r+0x1ce>
 8004dc2:	9b03      	ldr	r3, [sp, #12]
 8004dc4:	1d1a      	adds	r2, r3, #4
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	9203      	str	r2, [sp, #12]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	bfb8      	it	lt
 8004dce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004dd2:	3402      	adds	r4, #2
 8004dd4:	9305      	str	r3, [sp, #20]
 8004dd6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004ebc <_vfiprintf_r+0x25c>
 8004dda:	7821      	ldrb	r1, [r4, #0]
 8004ddc:	2203      	movs	r2, #3
 8004dde:	4650      	mov	r0, sl
 8004de0:	f7fb f9fe 	bl	80001e0 <memchr>
 8004de4:	b140      	cbz	r0, 8004df8 <_vfiprintf_r+0x198>
 8004de6:	2340      	movs	r3, #64	; 0x40
 8004de8:	eba0 000a 	sub.w	r0, r0, sl
 8004dec:	fa03 f000 	lsl.w	r0, r3, r0
 8004df0:	9b04      	ldr	r3, [sp, #16]
 8004df2:	4303      	orrs	r3, r0
 8004df4:	3401      	adds	r4, #1
 8004df6:	9304      	str	r3, [sp, #16]
 8004df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dfc:	482c      	ldr	r0, [pc, #176]	; (8004eb0 <_vfiprintf_r+0x250>)
 8004dfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e02:	2206      	movs	r2, #6
 8004e04:	f7fb f9ec 	bl	80001e0 <memchr>
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	d03f      	beq.n	8004e8c <_vfiprintf_r+0x22c>
 8004e0c:	4b29      	ldr	r3, [pc, #164]	; (8004eb4 <_vfiprintf_r+0x254>)
 8004e0e:	bb1b      	cbnz	r3, 8004e58 <_vfiprintf_r+0x1f8>
 8004e10:	9b03      	ldr	r3, [sp, #12]
 8004e12:	3307      	adds	r3, #7
 8004e14:	f023 0307 	bic.w	r3, r3, #7
 8004e18:	3308      	adds	r3, #8
 8004e1a:	9303      	str	r3, [sp, #12]
 8004e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e1e:	443b      	add	r3, r7
 8004e20:	9309      	str	r3, [sp, #36]	; 0x24
 8004e22:	e767      	b.n	8004cf4 <_vfiprintf_r+0x94>
 8004e24:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e28:	460c      	mov	r4, r1
 8004e2a:	2001      	movs	r0, #1
 8004e2c:	e7a5      	b.n	8004d7a <_vfiprintf_r+0x11a>
 8004e2e:	2300      	movs	r3, #0
 8004e30:	3401      	adds	r4, #1
 8004e32:	9305      	str	r3, [sp, #20]
 8004e34:	4619      	mov	r1, r3
 8004e36:	f04f 0c0a 	mov.w	ip, #10
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e40:	3a30      	subs	r2, #48	; 0x30
 8004e42:	2a09      	cmp	r2, #9
 8004e44:	d903      	bls.n	8004e4e <_vfiprintf_r+0x1ee>
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0c5      	beq.n	8004dd6 <_vfiprintf_r+0x176>
 8004e4a:	9105      	str	r1, [sp, #20]
 8004e4c:	e7c3      	b.n	8004dd6 <_vfiprintf_r+0x176>
 8004e4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e52:	4604      	mov	r4, r0
 8004e54:	2301      	movs	r3, #1
 8004e56:	e7f0      	b.n	8004e3a <_vfiprintf_r+0x1da>
 8004e58:	ab03      	add	r3, sp, #12
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	462a      	mov	r2, r5
 8004e5e:	4b16      	ldr	r3, [pc, #88]	; (8004eb8 <_vfiprintf_r+0x258>)
 8004e60:	a904      	add	r1, sp, #16
 8004e62:	4630      	mov	r0, r6
 8004e64:	f3af 8000 	nop.w
 8004e68:	4607      	mov	r7, r0
 8004e6a:	1c78      	adds	r0, r7, #1
 8004e6c:	d1d6      	bne.n	8004e1c <_vfiprintf_r+0x1bc>
 8004e6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e70:	07d9      	lsls	r1, r3, #31
 8004e72:	d405      	bmi.n	8004e80 <_vfiprintf_r+0x220>
 8004e74:	89ab      	ldrh	r3, [r5, #12]
 8004e76:	059a      	lsls	r2, r3, #22
 8004e78:	d402      	bmi.n	8004e80 <_vfiprintf_r+0x220>
 8004e7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e7c:	f7ff fe31 	bl	8004ae2 <__retarget_lock_release_recursive>
 8004e80:	89ab      	ldrh	r3, [r5, #12]
 8004e82:	065b      	lsls	r3, r3, #25
 8004e84:	f53f af12 	bmi.w	8004cac <_vfiprintf_r+0x4c>
 8004e88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e8a:	e711      	b.n	8004cb0 <_vfiprintf_r+0x50>
 8004e8c:	ab03      	add	r3, sp, #12
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	462a      	mov	r2, r5
 8004e92:	4b09      	ldr	r3, [pc, #36]	; (8004eb8 <_vfiprintf_r+0x258>)
 8004e94:	a904      	add	r1, sp, #16
 8004e96:	4630      	mov	r0, r6
 8004e98:	f000 f880 	bl	8004f9c <_printf_i>
 8004e9c:	e7e4      	b.n	8004e68 <_vfiprintf_r+0x208>
 8004e9e:	bf00      	nop
 8004ea0:	08005840 	.word	0x08005840
 8004ea4:	08005860 	.word	0x08005860
 8004ea8:	08005820 	.word	0x08005820
 8004eac:	08005880 	.word	0x08005880
 8004eb0:	0800588a 	.word	0x0800588a
 8004eb4:	00000000 	.word	0x00000000
 8004eb8:	08004c3b 	.word	0x08004c3b
 8004ebc:	08005886 	.word	0x08005886

08004ec0 <_printf_common>:
 8004ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec4:	4616      	mov	r6, r2
 8004ec6:	4699      	mov	r9, r3
 8004ec8:	688a      	ldr	r2, [r1, #8]
 8004eca:	690b      	ldr	r3, [r1, #16]
 8004ecc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	bfb8      	it	lt
 8004ed4:	4613      	movlt	r3, r2
 8004ed6:	6033      	str	r3, [r6, #0]
 8004ed8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004edc:	4607      	mov	r7, r0
 8004ede:	460c      	mov	r4, r1
 8004ee0:	b10a      	cbz	r2, 8004ee6 <_printf_common+0x26>
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	6033      	str	r3, [r6, #0]
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	0699      	lsls	r1, r3, #26
 8004eea:	bf42      	ittt	mi
 8004eec:	6833      	ldrmi	r3, [r6, #0]
 8004eee:	3302      	addmi	r3, #2
 8004ef0:	6033      	strmi	r3, [r6, #0]
 8004ef2:	6825      	ldr	r5, [r4, #0]
 8004ef4:	f015 0506 	ands.w	r5, r5, #6
 8004ef8:	d106      	bne.n	8004f08 <_printf_common+0x48>
 8004efa:	f104 0a19 	add.w	sl, r4, #25
 8004efe:	68e3      	ldr	r3, [r4, #12]
 8004f00:	6832      	ldr	r2, [r6, #0]
 8004f02:	1a9b      	subs	r3, r3, r2
 8004f04:	42ab      	cmp	r3, r5
 8004f06:	dc26      	bgt.n	8004f56 <_printf_common+0x96>
 8004f08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f0c:	1e13      	subs	r3, r2, #0
 8004f0e:	6822      	ldr	r2, [r4, #0]
 8004f10:	bf18      	it	ne
 8004f12:	2301      	movne	r3, #1
 8004f14:	0692      	lsls	r2, r2, #26
 8004f16:	d42b      	bmi.n	8004f70 <_printf_common+0xb0>
 8004f18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f1c:	4649      	mov	r1, r9
 8004f1e:	4638      	mov	r0, r7
 8004f20:	47c0      	blx	r8
 8004f22:	3001      	adds	r0, #1
 8004f24:	d01e      	beq.n	8004f64 <_printf_common+0xa4>
 8004f26:	6823      	ldr	r3, [r4, #0]
 8004f28:	68e5      	ldr	r5, [r4, #12]
 8004f2a:	6832      	ldr	r2, [r6, #0]
 8004f2c:	f003 0306 	and.w	r3, r3, #6
 8004f30:	2b04      	cmp	r3, #4
 8004f32:	bf08      	it	eq
 8004f34:	1aad      	subeq	r5, r5, r2
 8004f36:	68a3      	ldr	r3, [r4, #8]
 8004f38:	6922      	ldr	r2, [r4, #16]
 8004f3a:	bf0c      	ite	eq
 8004f3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f40:	2500      	movne	r5, #0
 8004f42:	4293      	cmp	r3, r2
 8004f44:	bfc4      	itt	gt
 8004f46:	1a9b      	subgt	r3, r3, r2
 8004f48:	18ed      	addgt	r5, r5, r3
 8004f4a:	2600      	movs	r6, #0
 8004f4c:	341a      	adds	r4, #26
 8004f4e:	42b5      	cmp	r5, r6
 8004f50:	d11a      	bne.n	8004f88 <_printf_common+0xc8>
 8004f52:	2000      	movs	r0, #0
 8004f54:	e008      	b.n	8004f68 <_printf_common+0xa8>
 8004f56:	2301      	movs	r3, #1
 8004f58:	4652      	mov	r2, sl
 8004f5a:	4649      	mov	r1, r9
 8004f5c:	4638      	mov	r0, r7
 8004f5e:	47c0      	blx	r8
 8004f60:	3001      	adds	r0, #1
 8004f62:	d103      	bne.n	8004f6c <_printf_common+0xac>
 8004f64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f6c:	3501      	adds	r5, #1
 8004f6e:	e7c6      	b.n	8004efe <_printf_common+0x3e>
 8004f70:	18e1      	adds	r1, r4, r3
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	2030      	movs	r0, #48	; 0x30
 8004f76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f7a:	4422      	add	r2, r4
 8004f7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f84:	3302      	adds	r3, #2
 8004f86:	e7c7      	b.n	8004f18 <_printf_common+0x58>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	4622      	mov	r2, r4
 8004f8c:	4649      	mov	r1, r9
 8004f8e:	4638      	mov	r0, r7
 8004f90:	47c0      	blx	r8
 8004f92:	3001      	adds	r0, #1
 8004f94:	d0e6      	beq.n	8004f64 <_printf_common+0xa4>
 8004f96:	3601      	adds	r6, #1
 8004f98:	e7d9      	b.n	8004f4e <_printf_common+0x8e>
	...

08004f9c <_printf_i>:
 8004f9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fa0:	7e0f      	ldrb	r7, [r1, #24]
 8004fa2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fa4:	2f78      	cmp	r7, #120	; 0x78
 8004fa6:	4691      	mov	r9, r2
 8004fa8:	4680      	mov	r8, r0
 8004faa:	460c      	mov	r4, r1
 8004fac:	469a      	mov	sl, r3
 8004fae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fb2:	d807      	bhi.n	8004fc4 <_printf_i+0x28>
 8004fb4:	2f62      	cmp	r7, #98	; 0x62
 8004fb6:	d80a      	bhi.n	8004fce <_printf_i+0x32>
 8004fb8:	2f00      	cmp	r7, #0
 8004fba:	f000 80d8 	beq.w	800516e <_printf_i+0x1d2>
 8004fbe:	2f58      	cmp	r7, #88	; 0x58
 8004fc0:	f000 80a3 	beq.w	800510a <_printf_i+0x16e>
 8004fc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fcc:	e03a      	b.n	8005044 <_printf_i+0xa8>
 8004fce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fd2:	2b15      	cmp	r3, #21
 8004fd4:	d8f6      	bhi.n	8004fc4 <_printf_i+0x28>
 8004fd6:	a101      	add	r1, pc, #4	; (adr r1, 8004fdc <_printf_i+0x40>)
 8004fd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fdc:	08005035 	.word	0x08005035
 8004fe0:	08005049 	.word	0x08005049
 8004fe4:	08004fc5 	.word	0x08004fc5
 8004fe8:	08004fc5 	.word	0x08004fc5
 8004fec:	08004fc5 	.word	0x08004fc5
 8004ff0:	08004fc5 	.word	0x08004fc5
 8004ff4:	08005049 	.word	0x08005049
 8004ff8:	08004fc5 	.word	0x08004fc5
 8004ffc:	08004fc5 	.word	0x08004fc5
 8005000:	08004fc5 	.word	0x08004fc5
 8005004:	08004fc5 	.word	0x08004fc5
 8005008:	08005155 	.word	0x08005155
 800500c:	08005079 	.word	0x08005079
 8005010:	08005137 	.word	0x08005137
 8005014:	08004fc5 	.word	0x08004fc5
 8005018:	08004fc5 	.word	0x08004fc5
 800501c:	08005177 	.word	0x08005177
 8005020:	08004fc5 	.word	0x08004fc5
 8005024:	08005079 	.word	0x08005079
 8005028:	08004fc5 	.word	0x08004fc5
 800502c:	08004fc5 	.word	0x08004fc5
 8005030:	0800513f 	.word	0x0800513f
 8005034:	682b      	ldr	r3, [r5, #0]
 8005036:	1d1a      	adds	r2, r3, #4
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	602a      	str	r2, [r5, #0]
 800503c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005040:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005044:	2301      	movs	r3, #1
 8005046:	e0a3      	b.n	8005190 <_printf_i+0x1f4>
 8005048:	6820      	ldr	r0, [r4, #0]
 800504a:	6829      	ldr	r1, [r5, #0]
 800504c:	0606      	lsls	r6, r0, #24
 800504e:	f101 0304 	add.w	r3, r1, #4
 8005052:	d50a      	bpl.n	800506a <_printf_i+0xce>
 8005054:	680e      	ldr	r6, [r1, #0]
 8005056:	602b      	str	r3, [r5, #0]
 8005058:	2e00      	cmp	r6, #0
 800505a:	da03      	bge.n	8005064 <_printf_i+0xc8>
 800505c:	232d      	movs	r3, #45	; 0x2d
 800505e:	4276      	negs	r6, r6
 8005060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005064:	485e      	ldr	r0, [pc, #376]	; (80051e0 <_printf_i+0x244>)
 8005066:	230a      	movs	r3, #10
 8005068:	e019      	b.n	800509e <_printf_i+0x102>
 800506a:	680e      	ldr	r6, [r1, #0]
 800506c:	602b      	str	r3, [r5, #0]
 800506e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005072:	bf18      	it	ne
 8005074:	b236      	sxthne	r6, r6
 8005076:	e7ef      	b.n	8005058 <_printf_i+0xbc>
 8005078:	682b      	ldr	r3, [r5, #0]
 800507a:	6820      	ldr	r0, [r4, #0]
 800507c:	1d19      	adds	r1, r3, #4
 800507e:	6029      	str	r1, [r5, #0]
 8005080:	0601      	lsls	r1, r0, #24
 8005082:	d501      	bpl.n	8005088 <_printf_i+0xec>
 8005084:	681e      	ldr	r6, [r3, #0]
 8005086:	e002      	b.n	800508e <_printf_i+0xf2>
 8005088:	0646      	lsls	r6, r0, #25
 800508a:	d5fb      	bpl.n	8005084 <_printf_i+0xe8>
 800508c:	881e      	ldrh	r6, [r3, #0]
 800508e:	4854      	ldr	r0, [pc, #336]	; (80051e0 <_printf_i+0x244>)
 8005090:	2f6f      	cmp	r7, #111	; 0x6f
 8005092:	bf0c      	ite	eq
 8005094:	2308      	moveq	r3, #8
 8005096:	230a      	movne	r3, #10
 8005098:	2100      	movs	r1, #0
 800509a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800509e:	6865      	ldr	r5, [r4, #4]
 80050a0:	60a5      	str	r5, [r4, #8]
 80050a2:	2d00      	cmp	r5, #0
 80050a4:	bfa2      	ittt	ge
 80050a6:	6821      	ldrge	r1, [r4, #0]
 80050a8:	f021 0104 	bicge.w	r1, r1, #4
 80050ac:	6021      	strge	r1, [r4, #0]
 80050ae:	b90e      	cbnz	r6, 80050b4 <_printf_i+0x118>
 80050b0:	2d00      	cmp	r5, #0
 80050b2:	d04d      	beq.n	8005150 <_printf_i+0x1b4>
 80050b4:	4615      	mov	r5, r2
 80050b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80050ba:	fb03 6711 	mls	r7, r3, r1, r6
 80050be:	5dc7      	ldrb	r7, [r0, r7]
 80050c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050c4:	4637      	mov	r7, r6
 80050c6:	42bb      	cmp	r3, r7
 80050c8:	460e      	mov	r6, r1
 80050ca:	d9f4      	bls.n	80050b6 <_printf_i+0x11a>
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d10b      	bne.n	80050e8 <_printf_i+0x14c>
 80050d0:	6823      	ldr	r3, [r4, #0]
 80050d2:	07de      	lsls	r6, r3, #31
 80050d4:	d508      	bpl.n	80050e8 <_printf_i+0x14c>
 80050d6:	6923      	ldr	r3, [r4, #16]
 80050d8:	6861      	ldr	r1, [r4, #4]
 80050da:	4299      	cmp	r1, r3
 80050dc:	bfde      	ittt	le
 80050de:	2330      	movle	r3, #48	; 0x30
 80050e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050e4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80050e8:	1b52      	subs	r2, r2, r5
 80050ea:	6122      	str	r2, [r4, #16]
 80050ec:	f8cd a000 	str.w	sl, [sp]
 80050f0:	464b      	mov	r3, r9
 80050f2:	aa03      	add	r2, sp, #12
 80050f4:	4621      	mov	r1, r4
 80050f6:	4640      	mov	r0, r8
 80050f8:	f7ff fee2 	bl	8004ec0 <_printf_common>
 80050fc:	3001      	adds	r0, #1
 80050fe:	d14c      	bne.n	800519a <_printf_i+0x1fe>
 8005100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005104:	b004      	add	sp, #16
 8005106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800510a:	4835      	ldr	r0, [pc, #212]	; (80051e0 <_printf_i+0x244>)
 800510c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005110:	6829      	ldr	r1, [r5, #0]
 8005112:	6823      	ldr	r3, [r4, #0]
 8005114:	f851 6b04 	ldr.w	r6, [r1], #4
 8005118:	6029      	str	r1, [r5, #0]
 800511a:	061d      	lsls	r5, r3, #24
 800511c:	d514      	bpl.n	8005148 <_printf_i+0x1ac>
 800511e:	07df      	lsls	r7, r3, #31
 8005120:	bf44      	itt	mi
 8005122:	f043 0320 	orrmi.w	r3, r3, #32
 8005126:	6023      	strmi	r3, [r4, #0]
 8005128:	b91e      	cbnz	r6, 8005132 <_printf_i+0x196>
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	f023 0320 	bic.w	r3, r3, #32
 8005130:	6023      	str	r3, [r4, #0]
 8005132:	2310      	movs	r3, #16
 8005134:	e7b0      	b.n	8005098 <_printf_i+0xfc>
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	f043 0320 	orr.w	r3, r3, #32
 800513c:	6023      	str	r3, [r4, #0]
 800513e:	2378      	movs	r3, #120	; 0x78
 8005140:	4828      	ldr	r0, [pc, #160]	; (80051e4 <_printf_i+0x248>)
 8005142:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005146:	e7e3      	b.n	8005110 <_printf_i+0x174>
 8005148:	0659      	lsls	r1, r3, #25
 800514a:	bf48      	it	mi
 800514c:	b2b6      	uxthmi	r6, r6
 800514e:	e7e6      	b.n	800511e <_printf_i+0x182>
 8005150:	4615      	mov	r5, r2
 8005152:	e7bb      	b.n	80050cc <_printf_i+0x130>
 8005154:	682b      	ldr	r3, [r5, #0]
 8005156:	6826      	ldr	r6, [r4, #0]
 8005158:	6961      	ldr	r1, [r4, #20]
 800515a:	1d18      	adds	r0, r3, #4
 800515c:	6028      	str	r0, [r5, #0]
 800515e:	0635      	lsls	r5, r6, #24
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	d501      	bpl.n	8005168 <_printf_i+0x1cc>
 8005164:	6019      	str	r1, [r3, #0]
 8005166:	e002      	b.n	800516e <_printf_i+0x1d2>
 8005168:	0670      	lsls	r0, r6, #25
 800516a:	d5fb      	bpl.n	8005164 <_printf_i+0x1c8>
 800516c:	8019      	strh	r1, [r3, #0]
 800516e:	2300      	movs	r3, #0
 8005170:	6123      	str	r3, [r4, #16]
 8005172:	4615      	mov	r5, r2
 8005174:	e7ba      	b.n	80050ec <_printf_i+0x150>
 8005176:	682b      	ldr	r3, [r5, #0]
 8005178:	1d1a      	adds	r2, r3, #4
 800517a:	602a      	str	r2, [r5, #0]
 800517c:	681d      	ldr	r5, [r3, #0]
 800517e:	6862      	ldr	r2, [r4, #4]
 8005180:	2100      	movs	r1, #0
 8005182:	4628      	mov	r0, r5
 8005184:	f7fb f82c 	bl	80001e0 <memchr>
 8005188:	b108      	cbz	r0, 800518e <_printf_i+0x1f2>
 800518a:	1b40      	subs	r0, r0, r5
 800518c:	6060      	str	r0, [r4, #4]
 800518e:	6863      	ldr	r3, [r4, #4]
 8005190:	6123      	str	r3, [r4, #16]
 8005192:	2300      	movs	r3, #0
 8005194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005198:	e7a8      	b.n	80050ec <_printf_i+0x150>
 800519a:	6923      	ldr	r3, [r4, #16]
 800519c:	462a      	mov	r2, r5
 800519e:	4649      	mov	r1, r9
 80051a0:	4640      	mov	r0, r8
 80051a2:	47d0      	blx	sl
 80051a4:	3001      	adds	r0, #1
 80051a6:	d0ab      	beq.n	8005100 <_printf_i+0x164>
 80051a8:	6823      	ldr	r3, [r4, #0]
 80051aa:	079b      	lsls	r3, r3, #30
 80051ac:	d413      	bmi.n	80051d6 <_printf_i+0x23a>
 80051ae:	68e0      	ldr	r0, [r4, #12]
 80051b0:	9b03      	ldr	r3, [sp, #12]
 80051b2:	4298      	cmp	r0, r3
 80051b4:	bfb8      	it	lt
 80051b6:	4618      	movlt	r0, r3
 80051b8:	e7a4      	b.n	8005104 <_printf_i+0x168>
 80051ba:	2301      	movs	r3, #1
 80051bc:	4632      	mov	r2, r6
 80051be:	4649      	mov	r1, r9
 80051c0:	4640      	mov	r0, r8
 80051c2:	47d0      	blx	sl
 80051c4:	3001      	adds	r0, #1
 80051c6:	d09b      	beq.n	8005100 <_printf_i+0x164>
 80051c8:	3501      	adds	r5, #1
 80051ca:	68e3      	ldr	r3, [r4, #12]
 80051cc:	9903      	ldr	r1, [sp, #12]
 80051ce:	1a5b      	subs	r3, r3, r1
 80051d0:	42ab      	cmp	r3, r5
 80051d2:	dcf2      	bgt.n	80051ba <_printf_i+0x21e>
 80051d4:	e7eb      	b.n	80051ae <_printf_i+0x212>
 80051d6:	2500      	movs	r5, #0
 80051d8:	f104 0619 	add.w	r6, r4, #25
 80051dc:	e7f5      	b.n	80051ca <_printf_i+0x22e>
 80051de:	bf00      	nop
 80051e0:	08005891 	.word	0x08005891
 80051e4:	080058a2 	.word	0x080058a2

080051e8 <_sbrk_r>:
 80051e8:	b538      	push	{r3, r4, r5, lr}
 80051ea:	4d06      	ldr	r5, [pc, #24]	; (8005204 <_sbrk_r+0x1c>)
 80051ec:	2300      	movs	r3, #0
 80051ee:	4604      	mov	r4, r0
 80051f0:	4608      	mov	r0, r1
 80051f2:	602b      	str	r3, [r5, #0]
 80051f4:	f7fc fe22 	bl	8001e3c <_sbrk>
 80051f8:	1c43      	adds	r3, r0, #1
 80051fa:	d102      	bne.n	8005202 <_sbrk_r+0x1a>
 80051fc:	682b      	ldr	r3, [r5, #0]
 80051fe:	b103      	cbz	r3, 8005202 <_sbrk_r+0x1a>
 8005200:	6023      	str	r3, [r4, #0]
 8005202:	bd38      	pop	{r3, r4, r5, pc}
 8005204:	2000198c 	.word	0x2000198c

08005208 <__sread>:
 8005208:	b510      	push	{r4, lr}
 800520a:	460c      	mov	r4, r1
 800520c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005210:	f000 fab2 	bl	8005778 <_read_r>
 8005214:	2800      	cmp	r0, #0
 8005216:	bfab      	itete	ge
 8005218:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800521a:	89a3      	ldrhlt	r3, [r4, #12]
 800521c:	181b      	addge	r3, r3, r0
 800521e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005222:	bfac      	ite	ge
 8005224:	6563      	strge	r3, [r4, #84]	; 0x54
 8005226:	81a3      	strhlt	r3, [r4, #12]
 8005228:	bd10      	pop	{r4, pc}

0800522a <__swrite>:
 800522a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800522e:	461f      	mov	r7, r3
 8005230:	898b      	ldrh	r3, [r1, #12]
 8005232:	05db      	lsls	r3, r3, #23
 8005234:	4605      	mov	r5, r0
 8005236:	460c      	mov	r4, r1
 8005238:	4616      	mov	r6, r2
 800523a:	d505      	bpl.n	8005248 <__swrite+0x1e>
 800523c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005240:	2302      	movs	r3, #2
 8005242:	2200      	movs	r2, #0
 8005244:	f000 f9c8 	bl	80055d8 <_lseek_r>
 8005248:	89a3      	ldrh	r3, [r4, #12]
 800524a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800524e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005252:	81a3      	strh	r3, [r4, #12]
 8005254:	4632      	mov	r2, r6
 8005256:	463b      	mov	r3, r7
 8005258:	4628      	mov	r0, r5
 800525a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800525e:	f000 b869 	b.w	8005334 <_write_r>

08005262 <__sseek>:
 8005262:	b510      	push	{r4, lr}
 8005264:	460c      	mov	r4, r1
 8005266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800526a:	f000 f9b5 	bl	80055d8 <_lseek_r>
 800526e:	1c43      	adds	r3, r0, #1
 8005270:	89a3      	ldrh	r3, [r4, #12]
 8005272:	bf15      	itete	ne
 8005274:	6560      	strne	r0, [r4, #84]	; 0x54
 8005276:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800527a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800527e:	81a3      	strheq	r3, [r4, #12]
 8005280:	bf18      	it	ne
 8005282:	81a3      	strhne	r3, [r4, #12]
 8005284:	bd10      	pop	{r4, pc}

08005286 <__sclose>:
 8005286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800528a:	f000 b8d3 	b.w	8005434 <_close_r>
	...

08005290 <__swbuf_r>:
 8005290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005292:	460e      	mov	r6, r1
 8005294:	4614      	mov	r4, r2
 8005296:	4605      	mov	r5, r0
 8005298:	b118      	cbz	r0, 80052a2 <__swbuf_r+0x12>
 800529a:	6983      	ldr	r3, [r0, #24]
 800529c:	b90b      	cbnz	r3, 80052a2 <__swbuf_r+0x12>
 800529e:	f7ff fb81 	bl	80049a4 <__sinit>
 80052a2:	4b21      	ldr	r3, [pc, #132]	; (8005328 <__swbuf_r+0x98>)
 80052a4:	429c      	cmp	r4, r3
 80052a6:	d12b      	bne.n	8005300 <__swbuf_r+0x70>
 80052a8:	686c      	ldr	r4, [r5, #4]
 80052aa:	69a3      	ldr	r3, [r4, #24]
 80052ac:	60a3      	str	r3, [r4, #8]
 80052ae:	89a3      	ldrh	r3, [r4, #12]
 80052b0:	071a      	lsls	r2, r3, #28
 80052b2:	d52f      	bpl.n	8005314 <__swbuf_r+0x84>
 80052b4:	6923      	ldr	r3, [r4, #16]
 80052b6:	b36b      	cbz	r3, 8005314 <__swbuf_r+0x84>
 80052b8:	6923      	ldr	r3, [r4, #16]
 80052ba:	6820      	ldr	r0, [r4, #0]
 80052bc:	1ac0      	subs	r0, r0, r3
 80052be:	6963      	ldr	r3, [r4, #20]
 80052c0:	b2f6      	uxtb	r6, r6
 80052c2:	4283      	cmp	r3, r0
 80052c4:	4637      	mov	r7, r6
 80052c6:	dc04      	bgt.n	80052d2 <__swbuf_r+0x42>
 80052c8:	4621      	mov	r1, r4
 80052ca:	4628      	mov	r0, r5
 80052cc:	f000 f948 	bl	8005560 <_fflush_r>
 80052d0:	bb30      	cbnz	r0, 8005320 <__swbuf_r+0x90>
 80052d2:	68a3      	ldr	r3, [r4, #8]
 80052d4:	3b01      	subs	r3, #1
 80052d6:	60a3      	str	r3, [r4, #8]
 80052d8:	6823      	ldr	r3, [r4, #0]
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	6022      	str	r2, [r4, #0]
 80052de:	701e      	strb	r6, [r3, #0]
 80052e0:	6963      	ldr	r3, [r4, #20]
 80052e2:	3001      	adds	r0, #1
 80052e4:	4283      	cmp	r3, r0
 80052e6:	d004      	beq.n	80052f2 <__swbuf_r+0x62>
 80052e8:	89a3      	ldrh	r3, [r4, #12]
 80052ea:	07db      	lsls	r3, r3, #31
 80052ec:	d506      	bpl.n	80052fc <__swbuf_r+0x6c>
 80052ee:	2e0a      	cmp	r6, #10
 80052f0:	d104      	bne.n	80052fc <__swbuf_r+0x6c>
 80052f2:	4621      	mov	r1, r4
 80052f4:	4628      	mov	r0, r5
 80052f6:	f000 f933 	bl	8005560 <_fflush_r>
 80052fa:	b988      	cbnz	r0, 8005320 <__swbuf_r+0x90>
 80052fc:	4638      	mov	r0, r7
 80052fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005300:	4b0a      	ldr	r3, [pc, #40]	; (800532c <__swbuf_r+0x9c>)
 8005302:	429c      	cmp	r4, r3
 8005304:	d101      	bne.n	800530a <__swbuf_r+0x7a>
 8005306:	68ac      	ldr	r4, [r5, #8]
 8005308:	e7cf      	b.n	80052aa <__swbuf_r+0x1a>
 800530a:	4b09      	ldr	r3, [pc, #36]	; (8005330 <__swbuf_r+0xa0>)
 800530c:	429c      	cmp	r4, r3
 800530e:	bf08      	it	eq
 8005310:	68ec      	ldreq	r4, [r5, #12]
 8005312:	e7ca      	b.n	80052aa <__swbuf_r+0x1a>
 8005314:	4621      	mov	r1, r4
 8005316:	4628      	mov	r0, r5
 8005318:	f000 f81e 	bl	8005358 <__swsetup_r>
 800531c:	2800      	cmp	r0, #0
 800531e:	d0cb      	beq.n	80052b8 <__swbuf_r+0x28>
 8005320:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005324:	e7ea      	b.n	80052fc <__swbuf_r+0x6c>
 8005326:	bf00      	nop
 8005328:	08005840 	.word	0x08005840
 800532c:	08005860 	.word	0x08005860
 8005330:	08005820 	.word	0x08005820

08005334 <_write_r>:
 8005334:	b538      	push	{r3, r4, r5, lr}
 8005336:	4d07      	ldr	r5, [pc, #28]	; (8005354 <_write_r+0x20>)
 8005338:	4604      	mov	r4, r0
 800533a:	4608      	mov	r0, r1
 800533c:	4611      	mov	r1, r2
 800533e:	2200      	movs	r2, #0
 8005340:	602a      	str	r2, [r5, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	f7fc fd29 	bl	8001d9a <_write>
 8005348:	1c43      	adds	r3, r0, #1
 800534a:	d102      	bne.n	8005352 <_write_r+0x1e>
 800534c:	682b      	ldr	r3, [r5, #0]
 800534e:	b103      	cbz	r3, 8005352 <_write_r+0x1e>
 8005350:	6023      	str	r3, [r4, #0]
 8005352:	bd38      	pop	{r3, r4, r5, pc}
 8005354:	2000198c 	.word	0x2000198c

08005358 <__swsetup_r>:
 8005358:	4b32      	ldr	r3, [pc, #200]	; (8005424 <__swsetup_r+0xcc>)
 800535a:	b570      	push	{r4, r5, r6, lr}
 800535c:	681d      	ldr	r5, [r3, #0]
 800535e:	4606      	mov	r6, r0
 8005360:	460c      	mov	r4, r1
 8005362:	b125      	cbz	r5, 800536e <__swsetup_r+0x16>
 8005364:	69ab      	ldr	r3, [r5, #24]
 8005366:	b913      	cbnz	r3, 800536e <__swsetup_r+0x16>
 8005368:	4628      	mov	r0, r5
 800536a:	f7ff fb1b 	bl	80049a4 <__sinit>
 800536e:	4b2e      	ldr	r3, [pc, #184]	; (8005428 <__swsetup_r+0xd0>)
 8005370:	429c      	cmp	r4, r3
 8005372:	d10f      	bne.n	8005394 <__swsetup_r+0x3c>
 8005374:	686c      	ldr	r4, [r5, #4]
 8005376:	89a3      	ldrh	r3, [r4, #12]
 8005378:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800537c:	0719      	lsls	r1, r3, #28
 800537e:	d42c      	bmi.n	80053da <__swsetup_r+0x82>
 8005380:	06dd      	lsls	r5, r3, #27
 8005382:	d411      	bmi.n	80053a8 <__swsetup_r+0x50>
 8005384:	2309      	movs	r3, #9
 8005386:	6033      	str	r3, [r6, #0]
 8005388:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800538c:	81a3      	strh	r3, [r4, #12]
 800538e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005392:	e03e      	b.n	8005412 <__swsetup_r+0xba>
 8005394:	4b25      	ldr	r3, [pc, #148]	; (800542c <__swsetup_r+0xd4>)
 8005396:	429c      	cmp	r4, r3
 8005398:	d101      	bne.n	800539e <__swsetup_r+0x46>
 800539a:	68ac      	ldr	r4, [r5, #8]
 800539c:	e7eb      	b.n	8005376 <__swsetup_r+0x1e>
 800539e:	4b24      	ldr	r3, [pc, #144]	; (8005430 <__swsetup_r+0xd8>)
 80053a0:	429c      	cmp	r4, r3
 80053a2:	bf08      	it	eq
 80053a4:	68ec      	ldreq	r4, [r5, #12]
 80053a6:	e7e6      	b.n	8005376 <__swsetup_r+0x1e>
 80053a8:	0758      	lsls	r0, r3, #29
 80053aa:	d512      	bpl.n	80053d2 <__swsetup_r+0x7a>
 80053ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053ae:	b141      	cbz	r1, 80053c2 <__swsetup_r+0x6a>
 80053b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053b4:	4299      	cmp	r1, r3
 80053b6:	d002      	beq.n	80053be <__swsetup_r+0x66>
 80053b8:	4630      	mov	r0, r6
 80053ba:	f000 f991 	bl	80056e0 <_free_r>
 80053be:	2300      	movs	r3, #0
 80053c0:	6363      	str	r3, [r4, #52]	; 0x34
 80053c2:	89a3      	ldrh	r3, [r4, #12]
 80053c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80053c8:	81a3      	strh	r3, [r4, #12]
 80053ca:	2300      	movs	r3, #0
 80053cc:	6063      	str	r3, [r4, #4]
 80053ce:	6923      	ldr	r3, [r4, #16]
 80053d0:	6023      	str	r3, [r4, #0]
 80053d2:	89a3      	ldrh	r3, [r4, #12]
 80053d4:	f043 0308 	orr.w	r3, r3, #8
 80053d8:	81a3      	strh	r3, [r4, #12]
 80053da:	6923      	ldr	r3, [r4, #16]
 80053dc:	b94b      	cbnz	r3, 80053f2 <__swsetup_r+0x9a>
 80053de:	89a3      	ldrh	r3, [r4, #12]
 80053e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80053e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053e8:	d003      	beq.n	80053f2 <__swsetup_r+0x9a>
 80053ea:	4621      	mov	r1, r4
 80053ec:	4630      	mov	r0, r6
 80053ee:	f000 f92b 	bl	8005648 <__smakebuf_r>
 80053f2:	89a0      	ldrh	r0, [r4, #12]
 80053f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053f8:	f010 0301 	ands.w	r3, r0, #1
 80053fc:	d00a      	beq.n	8005414 <__swsetup_r+0xbc>
 80053fe:	2300      	movs	r3, #0
 8005400:	60a3      	str	r3, [r4, #8]
 8005402:	6963      	ldr	r3, [r4, #20]
 8005404:	425b      	negs	r3, r3
 8005406:	61a3      	str	r3, [r4, #24]
 8005408:	6923      	ldr	r3, [r4, #16]
 800540a:	b943      	cbnz	r3, 800541e <__swsetup_r+0xc6>
 800540c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005410:	d1ba      	bne.n	8005388 <__swsetup_r+0x30>
 8005412:	bd70      	pop	{r4, r5, r6, pc}
 8005414:	0781      	lsls	r1, r0, #30
 8005416:	bf58      	it	pl
 8005418:	6963      	ldrpl	r3, [r4, #20]
 800541a:	60a3      	str	r3, [r4, #8]
 800541c:	e7f4      	b.n	8005408 <__swsetup_r+0xb0>
 800541e:	2000      	movs	r0, #0
 8005420:	e7f7      	b.n	8005412 <__swsetup_r+0xba>
 8005422:	bf00      	nop
 8005424:	20000014 	.word	0x20000014
 8005428:	08005840 	.word	0x08005840
 800542c:	08005860 	.word	0x08005860
 8005430:	08005820 	.word	0x08005820

08005434 <_close_r>:
 8005434:	b538      	push	{r3, r4, r5, lr}
 8005436:	4d06      	ldr	r5, [pc, #24]	; (8005450 <_close_r+0x1c>)
 8005438:	2300      	movs	r3, #0
 800543a:	4604      	mov	r4, r0
 800543c:	4608      	mov	r0, r1
 800543e:	602b      	str	r3, [r5, #0]
 8005440:	f7fc fcc7 	bl	8001dd2 <_close>
 8005444:	1c43      	adds	r3, r0, #1
 8005446:	d102      	bne.n	800544e <_close_r+0x1a>
 8005448:	682b      	ldr	r3, [r5, #0]
 800544a:	b103      	cbz	r3, 800544e <_close_r+0x1a>
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	bd38      	pop	{r3, r4, r5, pc}
 8005450:	2000198c 	.word	0x2000198c

08005454 <__sflush_r>:
 8005454:	898a      	ldrh	r2, [r1, #12]
 8005456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800545a:	4605      	mov	r5, r0
 800545c:	0710      	lsls	r0, r2, #28
 800545e:	460c      	mov	r4, r1
 8005460:	d458      	bmi.n	8005514 <__sflush_r+0xc0>
 8005462:	684b      	ldr	r3, [r1, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	dc05      	bgt.n	8005474 <__sflush_r+0x20>
 8005468:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800546a:	2b00      	cmp	r3, #0
 800546c:	dc02      	bgt.n	8005474 <__sflush_r+0x20>
 800546e:	2000      	movs	r0, #0
 8005470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005474:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005476:	2e00      	cmp	r6, #0
 8005478:	d0f9      	beq.n	800546e <__sflush_r+0x1a>
 800547a:	2300      	movs	r3, #0
 800547c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005480:	682f      	ldr	r7, [r5, #0]
 8005482:	602b      	str	r3, [r5, #0]
 8005484:	d032      	beq.n	80054ec <__sflush_r+0x98>
 8005486:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005488:	89a3      	ldrh	r3, [r4, #12]
 800548a:	075a      	lsls	r2, r3, #29
 800548c:	d505      	bpl.n	800549a <__sflush_r+0x46>
 800548e:	6863      	ldr	r3, [r4, #4]
 8005490:	1ac0      	subs	r0, r0, r3
 8005492:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005494:	b10b      	cbz	r3, 800549a <__sflush_r+0x46>
 8005496:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005498:	1ac0      	subs	r0, r0, r3
 800549a:	2300      	movs	r3, #0
 800549c:	4602      	mov	r2, r0
 800549e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054a0:	6a21      	ldr	r1, [r4, #32]
 80054a2:	4628      	mov	r0, r5
 80054a4:	47b0      	blx	r6
 80054a6:	1c43      	adds	r3, r0, #1
 80054a8:	89a3      	ldrh	r3, [r4, #12]
 80054aa:	d106      	bne.n	80054ba <__sflush_r+0x66>
 80054ac:	6829      	ldr	r1, [r5, #0]
 80054ae:	291d      	cmp	r1, #29
 80054b0:	d82c      	bhi.n	800550c <__sflush_r+0xb8>
 80054b2:	4a2a      	ldr	r2, [pc, #168]	; (800555c <__sflush_r+0x108>)
 80054b4:	40ca      	lsrs	r2, r1
 80054b6:	07d6      	lsls	r6, r2, #31
 80054b8:	d528      	bpl.n	800550c <__sflush_r+0xb8>
 80054ba:	2200      	movs	r2, #0
 80054bc:	6062      	str	r2, [r4, #4]
 80054be:	04d9      	lsls	r1, r3, #19
 80054c0:	6922      	ldr	r2, [r4, #16]
 80054c2:	6022      	str	r2, [r4, #0]
 80054c4:	d504      	bpl.n	80054d0 <__sflush_r+0x7c>
 80054c6:	1c42      	adds	r2, r0, #1
 80054c8:	d101      	bne.n	80054ce <__sflush_r+0x7a>
 80054ca:	682b      	ldr	r3, [r5, #0]
 80054cc:	b903      	cbnz	r3, 80054d0 <__sflush_r+0x7c>
 80054ce:	6560      	str	r0, [r4, #84]	; 0x54
 80054d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054d2:	602f      	str	r7, [r5, #0]
 80054d4:	2900      	cmp	r1, #0
 80054d6:	d0ca      	beq.n	800546e <__sflush_r+0x1a>
 80054d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054dc:	4299      	cmp	r1, r3
 80054de:	d002      	beq.n	80054e6 <__sflush_r+0x92>
 80054e0:	4628      	mov	r0, r5
 80054e2:	f000 f8fd 	bl	80056e0 <_free_r>
 80054e6:	2000      	movs	r0, #0
 80054e8:	6360      	str	r0, [r4, #52]	; 0x34
 80054ea:	e7c1      	b.n	8005470 <__sflush_r+0x1c>
 80054ec:	6a21      	ldr	r1, [r4, #32]
 80054ee:	2301      	movs	r3, #1
 80054f0:	4628      	mov	r0, r5
 80054f2:	47b0      	blx	r6
 80054f4:	1c41      	adds	r1, r0, #1
 80054f6:	d1c7      	bne.n	8005488 <__sflush_r+0x34>
 80054f8:	682b      	ldr	r3, [r5, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d0c4      	beq.n	8005488 <__sflush_r+0x34>
 80054fe:	2b1d      	cmp	r3, #29
 8005500:	d001      	beq.n	8005506 <__sflush_r+0xb2>
 8005502:	2b16      	cmp	r3, #22
 8005504:	d101      	bne.n	800550a <__sflush_r+0xb6>
 8005506:	602f      	str	r7, [r5, #0]
 8005508:	e7b1      	b.n	800546e <__sflush_r+0x1a>
 800550a:	89a3      	ldrh	r3, [r4, #12]
 800550c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005510:	81a3      	strh	r3, [r4, #12]
 8005512:	e7ad      	b.n	8005470 <__sflush_r+0x1c>
 8005514:	690f      	ldr	r7, [r1, #16]
 8005516:	2f00      	cmp	r7, #0
 8005518:	d0a9      	beq.n	800546e <__sflush_r+0x1a>
 800551a:	0793      	lsls	r3, r2, #30
 800551c:	680e      	ldr	r6, [r1, #0]
 800551e:	bf08      	it	eq
 8005520:	694b      	ldreq	r3, [r1, #20]
 8005522:	600f      	str	r7, [r1, #0]
 8005524:	bf18      	it	ne
 8005526:	2300      	movne	r3, #0
 8005528:	eba6 0807 	sub.w	r8, r6, r7
 800552c:	608b      	str	r3, [r1, #8]
 800552e:	f1b8 0f00 	cmp.w	r8, #0
 8005532:	dd9c      	ble.n	800546e <__sflush_r+0x1a>
 8005534:	6a21      	ldr	r1, [r4, #32]
 8005536:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005538:	4643      	mov	r3, r8
 800553a:	463a      	mov	r2, r7
 800553c:	4628      	mov	r0, r5
 800553e:	47b0      	blx	r6
 8005540:	2800      	cmp	r0, #0
 8005542:	dc06      	bgt.n	8005552 <__sflush_r+0xfe>
 8005544:	89a3      	ldrh	r3, [r4, #12]
 8005546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800554a:	81a3      	strh	r3, [r4, #12]
 800554c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005550:	e78e      	b.n	8005470 <__sflush_r+0x1c>
 8005552:	4407      	add	r7, r0
 8005554:	eba8 0800 	sub.w	r8, r8, r0
 8005558:	e7e9      	b.n	800552e <__sflush_r+0xda>
 800555a:	bf00      	nop
 800555c:	20400001 	.word	0x20400001

08005560 <_fflush_r>:
 8005560:	b538      	push	{r3, r4, r5, lr}
 8005562:	690b      	ldr	r3, [r1, #16]
 8005564:	4605      	mov	r5, r0
 8005566:	460c      	mov	r4, r1
 8005568:	b913      	cbnz	r3, 8005570 <_fflush_r+0x10>
 800556a:	2500      	movs	r5, #0
 800556c:	4628      	mov	r0, r5
 800556e:	bd38      	pop	{r3, r4, r5, pc}
 8005570:	b118      	cbz	r0, 800557a <_fflush_r+0x1a>
 8005572:	6983      	ldr	r3, [r0, #24]
 8005574:	b90b      	cbnz	r3, 800557a <_fflush_r+0x1a>
 8005576:	f7ff fa15 	bl	80049a4 <__sinit>
 800557a:	4b14      	ldr	r3, [pc, #80]	; (80055cc <_fflush_r+0x6c>)
 800557c:	429c      	cmp	r4, r3
 800557e:	d11b      	bne.n	80055b8 <_fflush_r+0x58>
 8005580:	686c      	ldr	r4, [r5, #4]
 8005582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d0ef      	beq.n	800556a <_fflush_r+0xa>
 800558a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800558c:	07d0      	lsls	r0, r2, #31
 800558e:	d404      	bmi.n	800559a <_fflush_r+0x3a>
 8005590:	0599      	lsls	r1, r3, #22
 8005592:	d402      	bmi.n	800559a <_fflush_r+0x3a>
 8005594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005596:	f7ff faa3 	bl	8004ae0 <__retarget_lock_acquire_recursive>
 800559a:	4628      	mov	r0, r5
 800559c:	4621      	mov	r1, r4
 800559e:	f7ff ff59 	bl	8005454 <__sflush_r>
 80055a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055a4:	07da      	lsls	r2, r3, #31
 80055a6:	4605      	mov	r5, r0
 80055a8:	d4e0      	bmi.n	800556c <_fflush_r+0xc>
 80055aa:	89a3      	ldrh	r3, [r4, #12]
 80055ac:	059b      	lsls	r3, r3, #22
 80055ae:	d4dd      	bmi.n	800556c <_fflush_r+0xc>
 80055b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055b2:	f7ff fa96 	bl	8004ae2 <__retarget_lock_release_recursive>
 80055b6:	e7d9      	b.n	800556c <_fflush_r+0xc>
 80055b8:	4b05      	ldr	r3, [pc, #20]	; (80055d0 <_fflush_r+0x70>)
 80055ba:	429c      	cmp	r4, r3
 80055bc:	d101      	bne.n	80055c2 <_fflush_r+0x62>
 80055be:	68ac      	ldr	r4, [r5, #8]
 80055c0:	e7df      	b.n	8005582 <_fflush_r+0x22>
 80055c2:	4b04      	ldr	r3, [pc, #16]	; (80055d4 <_fflush_r+0x74>)
 80055c4:	429c      	cmp	r4, r3
 80055c6:	bf08      	it	eq
 80055c8:	68ec      	ldreq	r4, [r5, #12]
 80055ca:	e7da      	b.n	8005582 <_fflush_r+0x22>
 80055cc:	08005840 	.word	0x08005840
 80055d0:	08005860 	.word	0x08005860
 80055d4:	08005820 	.word	0x08005820

080055d8 <_lseek_r>:
 80055d8:	b538      	push	{r3, r4, r5, lr}
 80055da:	4d07      	ldr	r5, [pc, #28]	; (80055f8 <_lseek_r+0x20>)
 80055dc:	4604      	mov	r4, r0
 80055de:	4608      	mov	r0, r1
 80055e0:	4611      	mov	r1, r2
 80055e2:	2200      	movs	r2, #0
 80055e4:	602a      	str	r2, [r5, #0]
 80055e6:	461a      	mov	r2, r3
 80055e8:	f7fc fc1a 	bl	8001e20 <_lseek>
 80055ec:	1c43      	adds	r3, r0, #1
 80055ee:	d102      	bne.n	80055f6 <_lseek_r+0x1e>
 80055f0:	682b      	ldr	r3, [r5, #0]
 80055f2:	b103      	cbz	r3, 80055f6 <_lseek_r+0x1e>
 80055f4:	6023      	str	r3, [r4, #0]
 80055f6:	bd38      	pop	{r3, r4, r5, pc}
 80055f8:	2000198c 	.word	0x2000198c

080055fc <__swhatbuf_r>:
 80055fc:	b570      	push	{r4, r5, r6, lr}
 80055fe:	460e      	mov	r6, r1
 8005600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005604:	2900      	cmp	r1, #0
 8005606:	b096      	sub	sp, #88	; 0x58
 8005608:	4614      	mov	r4, r2
 800560a:	461d      	mov	r5, r3
 800560c:	da08      	bge.n	8005620 <__swhatbuf_r+0x24>
 800560e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	602a      	str	r2, [r5, #0]
 8005616:	061a      	lsls	r2, r3, #24
 8005618:	d410      	bmi.n	800563c <__swhatbuf_r+0x40>
 800561a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800561e:	e00e      	b.n	800563e <__swhatbuf_r+0x42>
 8005620:	466a      	mov	r2, sp
 8005622:	f000 f8bb 	bl	800579c <_fstat_r>
 8005626:	2800      	cmp	r0, #0
 8005628:	dbf1      	blt.n	800560e <__swhatbuf_r+0x12>
 800562a:	9a01      	ldr	r2, [sp, #4]
 800562c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005630:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005634:	425a      	negs	r2, r3
 8005636:	415a      	adcs	r2, r3
 8005638:	602a      	str	r2, [r5, #0]
 800563a:	e7ee      	b.n	800561a <__swhatbuf_r+0x1e>
 800563c:	2340      	movs	r3, #64	; 0x40
 800563e:	2000      	movs	r0, #0
 8005640:	6023      	str	r3, [r4, #0]
 8005642:	b016      	add	sp, #88	; 0x58
 8005644:	bd70      	pop	{r4, r5, r6, pc}
	...

08005648 <__smakebuf_r>:
 8005648:	898b      	ldrh	r3, [r1, #12]
 800564a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800564c:	079d      	lsls	r5, r3, #30
 800564e:	4606      	mov	r6, r0
 8005650:	460c      	mov	r4, r1
 8005652:	d507      	bpl.n	8005664 <__smakebuf_r+0x1c>
 8005654:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005658:	6023      	str	r3, [r4, #0]
 800565a:	6123      	str	r3, [r4, #16]
 800565c:	2301      	movs	r3, #1
 800565e:	6163      	str	r3, [r4, #20]
 8005660:	b002      	add	sp, #8
 8005662:	bd70      	pop	{r4, r5, r6, pc}
 8005664:	ab01      	add	r3, sp, #4
 8005666:	466a      	mov	r2, sp
 8005668:	f7ff ffc8 	bl	80055fc <__swhatbuf_r>
 800566c:	9900      	ldr	r1, [sp, #0]
 800566e:	4605      	mov	r5, r0
 8005670:	4630      	mov	r0, r6
 8005672:	f7ff fa57 	bl	8004b24 <_malloc_r>
 8005676:	b948      	cbnz	r0, 800568c <__smakebuf_r+0x44>
 8005678:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800567c:	059a      	lsls	r2, r3, #22
 800567e:	d4ef      	bmi.n	8005660 <__smakebuf_r+0x18>
 8005680:	f023 0303 	bic.w	r3, r3, #3
 8005684:	f043 0302 	orr.w	r3, r3, #2
 8005688:	81a3      	strh	r3, [r4, #12]
 800568a:	e7e3      	b.n	8005654 <__smakebuf_r+0xc>
 800568c:	4b0d      	ldr	r3, [pc, #52]	; (80056c4 <__smakebuf_r+0x7c>)
 800568e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005690:	89a3      	ldrh	r3, [r4, #12]
 8005692:	6020      	str	r0, [r4, #0]
 8005694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005698:	81a3      	strh	r3, [r4, #12]
 800569a:	9b00      	ldr	r3, [sp, #0]
 800569c:	6163      	str	r3, [r4, #20]
 800569e:	9b01      	ldr	r3, [sp, #4]
 80056a0:	6120      	str	r0, [r4, #16]
 80056a2:	b15b      	cbz	r3, 80056bc <__smakebuf_r+0x74>
 80056a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056a8:	4630      	mov	r0, r6
 80056aa:	f000 f889 	bl	80057c0 <_isatty_r>
 80056ae:	b128      	cbz	r0, 80056bc <__smakebuf_r+0x74>
 80056b0:	89a3      	ldrh	r3, [r4, #12]
 80056b2:	f023 0303 	bic.w	r3, r3, #3
 80056b6:	f043 0301 	orr.w	r3, r3, #1
 80056ba:	81a3      	strh	r3, [r4, #12]
 80056bc:	89a0      	ldrh	r0, [r4, #12]
 80056be:	4305      	orrs	r5, r0
 80056c0:	81a5      	strh	r5, [r4, #12]
 80056c2:	e7cd      	b.n	8005660 <__smakebuf_r+0x18>
 80056c4:	0800493d 	.word	0x0800493d

080056c8 <__malloc_lock>:
 80056c8:	4801      	ldr	r0, [pc, #4]	; (80056d0 <__malloc_lock+0x8>)
 80056ca:	f7ff ba09 	b.w	8004ae0 <__retarget_lock_acquire_recursive>
 80056ce:	bf00      	nop
 80056d0:	20001980 	.word	0x20001980

080056d4 <__malloc_unlock>:
 80056d4:	4801      	ldr	r0, [pc, #4]	; (80056dc <__malloc_unlock+0x8>)
 80056d6:	f7ff ba04 	b.w	8004ae2 <__retarget_lock_release_recursive>
 80056da:	bf00      	nop
 80056dc:	20001980 	.word	0x20001980

080056e0 <_free_r>:
 80056e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056e2:	2900      	cmp	r1, #0
 80056e4:	d044      	beq.n	8005770 <_free_r+0x90>
 80056e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056ea:	9001      	str	r0, [sp, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f1a1 0404 	sub.w	r4, r1, #4
 80056f2:	bfb8      	it	lt
 80056f4:	18e4      	addlt	r4, r4, r3
 80056f6:	f7ff ffe7 	bl	80056c8 <__malloc_lock>
 80056fa:	4a1e      	ldr	r2, [pc, #120]	; (8005774 <_free_r+0x94>)
 80056fc:	9801      	ldr	r0, [sp, #4]
 80056fe:	6813      	ldr	r3, [r2, #0]
 8005700:	b933      	cbnz	r3, 8005710 <_free_r+0x30>
 8005702:	6063      	str	r3, [r4, #4]
 8005704:	6014      	str	r4, [r2, #0]
 8005706:	b003      	add	sp, #12
 8005708:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800570c:	f7ff bfe2 	b.w	80056d4 <__malloc_unlock>
 8005710:	42a3      	cmp	r3, r4
 8005712:	d908      	bls.n	8005726 <_free_r+0x46>
 8005714:	6825      	ldr	r5, [r4, #0]
 8005716:	1961      	adds	r1, r4, r5
 8005718:	428b      	cmp	r3, r1
 800571a:	bf01      	itttt	eq
 800571c:	6819      	ldreq	r1, [r3, #0]
 800571e:	685b      	ldreq	r3, [r3, #4]
 8005720:	1949      	addeq	r1, r1, r5
 8005722:	6021      	streq	r1, [r4, #0]
 8005724:	e7ed      	b.n	8005702 <_free_r+0x22>
 8005726:	461a      	mov	r2, r3
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	b10b      	cbz	r3, 8005730 <_free_r+0x50>
 800572c:	42a3      	cmp	r3, r4
 800572e:	d9fa      	bls.n	8005726 <_free_r+0x46>
 8005730:	6811      	ldr	r1, [r2, #0]
 8005732:	1855      	adds	r5, r2, r1
 8005734:	42a5      	cmp	r5, r4
 8005736:	d10b      	bne.n	8005750 <_free_r+0x70>
 8005738:	6824      	ldr	r4, [r4, #0]
 800573a:	4421      	add	r1, r4
 800573c:	1854      	adds	r4, r2, r1
 800573e:	42a3      	cmp	r3, r4
 8005740:	6011      	str	r1, [r2, #0]
 8005742:	d1e0      	bne.n	8005706 <_free_r+0x26>
 8005744:	681c      	ldr	r4, [r3, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	6053      	str	r3, [r2, #4]
 800574a:	4421      	add	r1, r4
 800574c:	6011      	str	r1, [r2, #0]
 800574e:	e7da      	b.n	8005706 <_free_r+0x26>
 8005750:	d902      	bls.n	8005758 <_free_r+0x78>
 8005752:	230c      	movs	r3, #12
 8005754:	6003      	str	r3, [r0, #0]
 8005756:	e7d6      	b.n	8005706 <_free_r+0x26>
 8005758:	6825      	ldr	r5, [r4, #0]
 800575a:	1961      	adds	r1, r4, r5
 800575c:	428b      	cmp	r3, r1
 800575e:	bf04      	itt	eq
 8005760:	6819      	ldreq	r1, [r3, #0]
 8005762:	685b      	ldreq	r3, [r3, #4]
 8005764:	6063      	str	r3, [r4, #4]
 8005766:	bf04      	itt	eq
 8005768:	1949      	addeq	r1, r1, r5
 800576a:	6021      	streq	r1, [r4, #0]
 800576c:	6054      	str	r4, [r2, #4]
 800576e:	e7ca      	b.n	8005706 <_free_r+0x26>
 8005770:	b003      	add	sp, #12
 8005772:	bd30      	pop	{r4, r5, pc}
 8005774:	20001984 	.word	0x20001984

08005778 <_read_r>:
 8005778:	b538      	push	{r3, r4, r5, lr}
 800577a:	4d07      	ldr	r5, [pc, #28]	; (8005798 <_read_r+0x20>)
 800577c:	4604      	mov	r4, r0
 800577e:	4608      	mov	r0, r1
 8005780:	4611      	mov	r1, r2
 8005782:	2200      	movs	r2, #0
 8005784:	602a      	str	r2, [r5, #0]
 8005786:	461a      	mov	r2, r3
 8005788:	f7fc faea 	bl	8001d60 <_read>
 800578c:	1c43      	adds	r3, r0, #1
 800578e:	d102      	bne.n	8005796 <_read_r+0x1e>
 8005790:	682b      	ldr	r3, [r5, #0]
 8005792:	b103      	cbz	r3, 8005796 <_read_r+0x1e>
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	bd38      	pop	{r3, r4, r5, pc}
 8005798:	2000198c 	.word	0x2000198c

0800579c <_fstat_r>:
 800579c:	b538      	push	{r3, r4, r5, lr}
 800579e:	4d07      	ldr	r5, [pc, #28]	; (80057bc <_fstat_r+0x20>)
 80057a0:	2300      	movs	r3, #0
 80057a2:	4604      	mov	r4, r0
 80057a4:	4608      	mov	r0, r1
 80057a6:	4611      	mov	r1, r2
 80057a8:	602b      	str	r3, [r5, #0]
 80057aa:	f7fc fb1e 	bl	8001dea <_fstat>
 80057ae:	1c43      	adds	r3, r0, #1
 80057b0:	d102      	bne.n	80057b8 <_fstat_r+0x1c>
 80057b2:	682b      	ldr	r3, [r5, #0]
 80057b4:	b103      	cbz	r3, 80057b8 <_fstat_r+0x1c>
 80057b6:	6023      	str	r3, [r4, #0]
 80057b8:	bd38      	pop	{r3, r4, r5, pc}
 80057ba:	bf00      	nop
 80057bc:	2000198c 	.word	0x2000198c

080057c0 <_isatty_r>:
 80057c0:	b538      	push	{r3, r4, r5, lr}
 80057c2:	4d06      	ldr	r5, [pc, #24]	; (80057dc <_isatty_r+0x1c>)
 80057c4:	2300      	movs	r3, #0
 80057c6:	4604      	mov	r4, r0
 80057c8:	4608      	mov	r0, r1
 80057ca:	602b      	str	r3, [r5, #0]
 80057cc:	f7fc fb1d 	bl	8001e0a <_isatty>
 80057d0:	1c43      	adds	r3, r0, #1
 80057d2:	d102      	bne.n	80057da <_isatty_r+0x1a>
 80057d4:	682b      	ldr	r3, [r5, #0]
 80057d6:	b103      	cbz	r3, 80057da <_isatty_r+0x1a>
 80057d8:	6023      	str	r3, [r4, #0]
 80057da:	bd38      	pop	{r3, r4, r5, pc}
 80057dc:	2000198c 	.word	0x2000198c

080057e0 <_init>:
 80057e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e2:	bf00      	nop
 80057e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057e6:	bc08      	pop	{r3}
 80057e8:	469e      	mov	lr, r3
 80057ea:	4770      	bx	lr

080057ec <_fini>:
 80057ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ee:	bf00      	nop
 80057f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057f2:	bc08      	pop	{r3}
 80057f4:	469e      	mov	lr, r3
 80057f6:	4770      	bx	lr
